
MEMS_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08005368  08005368  00015368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005744  08005744  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005744  08005744  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005744  08005744  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800574c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000001f4  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007a5f  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017a9  00000000  00000000  00027ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000808  00000000  00000000  00029450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000615  00000000  00000000  00029c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000212dd  00000000  00000000  0002a26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a4a7  00000000  00000000  0004b54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5bf6  00000000  00000000  000559f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003124  00000000  00000000  0011b5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011e70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005350 	.word	0x08005350

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005350 	.word	0x08005350

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f023 030f 	bic.w	r3, r3, #15
 8000bb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	f043 030c 	orr.w	r3, r3, #12
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	f043 030c 	orr.w	r3, r3, #12
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000be8:	f107 0208 	add.w	r2, r7, #8
 8000bec:	2364      	movs	r3, #100	; 0x64
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	214e      	movs	r1, #78	; 0x4e
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <lcd_send_cmd+0x5c>)
 8000bf6:	f001 f9fd 	bl	8001ff4 <HAL_I2C_Master_Transmit>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000220 	.word	0x20000220

08000c08 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f023 030f 	bic.w	r3, r3, #15
 8000c18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	f043 030d 	orr.w	r3, r3, #13
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	f043 0309 	orr.w	r3, r3, #9
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
 8000c36:	f043 030d 	orr.w	r3, r3, #13
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	f043 0309 	orr.w	r3, r3, #9
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c48:	f107 0208 	add.w	r2, r7, #8
 8000c4c:	2364      	movs	r3, #100	; 0x64
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2304      	movs	r3, #4
 8000c52:	214e      	movs	r1, #78	; 0x4e
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <lcd_send_data+0x5c>)
 8000c56:	f001 f9cd 	bl	8001ff4 <HAL_I2C_Master_Transmit>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000220 	.word	0x20000220

08000c68 <lcd_clear>:

void lcd_clear (void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000c6e:	2080      	movs	r0, #128	; 0x80
 8000c70:	f7ff ff9a 	bl	8000ba8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	e005      	b.n	8000c86 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000c7a:	2020      	movs	r0, #32
 8000c7c:	f7ff ffc4 	bl	8000c08 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b45      	cmp	r3, #69	; 0x45
 8000c8a:	ddf6      	ble.n	8000c7a <lcd_clear+0x12>
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <lcd_put_cur+0x18>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d005      	beq.n	8000cb8 <lcd_put_cur+0x22>
 8000cac:	e009      	b.n	8000cc2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	603b      	str	r3, [r7, #0]
            break;
 8000cb6:	e004      	b.n	8000cc2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cbe:	603b      	str	r3, [r7, #0]
            break;
 8000cc0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff6e 	bl	8000ba8 <lcd_send_cmd>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <lcd_init>:


void lcd_init (void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000cd8:	2032      	movs	r0, #50	; 0x32
 8000cda:	f000 fda1 	bl	8001820 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000cde:	2030      	movs	r0, #48	; 0x30
 8000ce0:	f7ff ff62 	bl	8000ba8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ce4:	2005      	movs	r0, #5
 8000ce6:	f000 fd9b 	bl	8001820 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000cea:	2030      	movs	r0, #48	; 0x30
 8000cec:	f7ff ff5c 	bl	8000ba8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f000 fd95 	bl	8001820 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000cf6:	2030      	movs	r0, #48	; 0x30
 8000cf8:	f7ff ff56 	bl	8000ba8 <lcd_send_cmd>
	HAL_Delay(10);
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f000 fd8f 	bl	8001820 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d02:	2020      	movs	r0, #32
 8000d04:	f7ff ff50 	bl	8000ba8 <lcd_send_cmd>
	HAL_Delay(10);
 8000d08:	200a      	movs	r0, #10
 8000d0a:	f000 fd89 	bl	8001820 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d0e:	2028      	movs	r0, #40	; 0x28
 8000d10:	f7ff ff4a 	bl	8000ba8 <lcd_send_cmd>
	HAL_Delay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fd83 	bl	8001820 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d1a:	2008      	movs	r0, #8
 8000d1c:	f7ff ff44 	bl	8000ba8 <lcd_send_cmd>
	HAL_Delay(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 fd7d 	bl	8001820 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff ff3e 	bl	8000ba8 <lcd_send_cmd>
	HAL_Delay(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f000 fd77 	bl	8001820 <HAL_Delay>
	HAL_Delay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 fd74 	bl	8001820 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d38:	2006      	movs	r0, #6
 8000d3a:	f7ff ff35 	bl	8000ba8 <lcd_send_cmd>
	HAL_Delay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f000 fd6e 	bl	8001820 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d44:	200c      	movs	r0, #12
 8000d46:	f7ff ff2f 	bl	8000ba8 <lcd_send_cmd>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d56:	e006      	b.n	8000d66 <lcd_send_string+0x18>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff51 	bl	8000c08 <lcd_send_data>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f4      	bne.n	8000d58 <lcd_send_string+0xa>
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d013      	beq.n	8000db8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00b      	beq.n	8000db8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	e000      	b.n	8000da4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000da2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f9      	beq.n	8000da2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// function to write printf
int _write(int file, char *ptr, int len) {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e009      	b.n	8000df0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ffc7 	bl	8000d78 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf1      	blt.n	8000ddc <_write+0x16>
	return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <SPI_TX_FUNC>:

// transmit data via SPI and receive response
uint16_t SPI_TX_FUNC(uint8_t data) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	while (SPI1->SR & (1 << 7))
 8000e0e:	bf00      	nop
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <SPI_TX_FUNC+0x54>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f9      	bne.n	8000e10 <SPI_TX_FUNC+0xc>
		;		// wait until SPI is not busy

	// load data into SPI transmit buffer
	while (!(SPI1->SR & (1 << 1)))
 8000e1c:	bf00      	nop
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <SPI_TX_FUNC+0x54>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f9      	beq.n	8000e1e <SPI_TX_FUNC+0x1a>
		;	//wait till transmit buffer is empty
	SPI1->DR = data;
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <SPI_TX_FUNC+0x54>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	60d3      	str	r3, [r2, #12]

	// wait for data reception
	while (!(SPI1->SR & (1 << 0)))
 8000e30:	bf00      	nop
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <SPI_TX_FUNC+0x54>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f9      	beq.n	8000e32 <SPI_TX_FUNC+0x2e>
		;
	TX_data = SPI1->DR;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SPI_TX_FUNC+0x54>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SPI_TX_FUNC+0x58>)
 8000e46:	801a      	strh	r2, [r3, #0]

	return TX_data;
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SPI_TX_FUNC+0x58>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40013000 	.word	0x40013000
 8000e5c:	200001f0 	.word	0x200001f0

08000e60 <SPI_RX_FUNC>:

// read data from a specified register over SPI
uint16_t SPI_RX_FUNC(uint8_t reg_addr) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]

	GPIOE_CS_LOW();
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <SPI_RX_FUNC+0x4c>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <SPI_RX_FUNC+0x4c>)
 8000e70:	f023 0308 	bic.w	r3, r3, #8
 8000e74:	6153      	str	r3, [r2, #20]

	reg_addr |= 0x80;			// set MSB for read operation (MSB=1)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e7c:	71fb      	strb	r3, [r7, #7]

	SPI_TX_FUNC(reg_addr);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffbf 	bl	8000e04 <SPI_TX_FUNC>
	RX_data = SPI_TX_FUNC(0);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff ffbc 	bl	8000e04 <SPI_TX_FUNC>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <SPI_RX_FUNC+0x50>)
 8000e92:	801a      	strh	r2, [r3, #0]

	GPIOE_CS_HIGH();
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SPI_RX_FUNC+0x4c>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <SPI_RX_FUNC+0x4c>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6153      	str	r3, [r2, #20]

	return RX_data;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <SPI_RX_FUNC+0x50>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	200001f2 	.word	0x200001f2

08000eb4 <LIS302SDL_write>:

// write data to a specified register over SPI
void LIS302SDL_write(uint8_t reg_addr, uint8_t data) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	71bb      	strb	r3, [r7, #6]

	GPIOE_CS_LOW();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <LIS302SDL_write+0x40>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LIS302SDL_write+0x40>)
 8000eca:	f023 0308 	bic.w	r3, r3, #8
 8000ece:	6153      	str	r3, [r2, #20]

	SPI_TX_FUNC(reg_addr);          // send register address
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff96 	bl	8000e04 <SPI_TX_FUNC>
	SPI_TX_FUNC(data);              // send data to register
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff92 	bl	8000e04 <SPI_TX_FUNC>

	GPIOE_CS_HIGH();
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <LIS302SDL_write+0x40>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <LIS302SDL_write+0x40>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6153      	str	r3, [r2, #20]
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <LIS302SDL_read_axis>:

// read acceleration data for X, Y, and Z axes
void LIS302SDL_read_axis() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	x_axis = SPI_RX_FUNC(LIS302SDL_OUT_X);
 8000efc:	2029      	movs	r0, #41	; 0x29
 8000efe:	f7ff ffaf 	bl	8000e60 <SPI_RX_FUNC>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <LIS302SDL_read_axis+0x34>)
 8000f08:	801a      	strh	r2, [r3, #0]
	y_axis = SPI_RX_FUNC(LIS302SDL_OUT_Y);
 8000f0a:	202b      	movs	r0, #43	; 0x2b
 8000f0c:	f7ff ffa8 	bl	8000e60 <SPI_RX_FUNC>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <LIS302SDL_read_axis+0x38>)
 8000f16:	801a      	strh	r2, [r3, #0]
	z_axis = SPI_RX_FUNC(LIS302SDL_OUT_Z);
 8000f18:	202d      	movs	r0, #45	; 0x2d
 8000f1a:	f7ff ffa1 	bl	8000e60 <SPI_RX_FUNC>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <LIS302SDL_read_axis+0x3c>)
 8000f24:	801a      	strh	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001f4 	.word	0x200001f4
 8000f30:	200001f6 	.word	0x200001f6
 8000f34:	200001f8 	.word	0x200001f8

08000f38 <Calibration>:

// convert raw data to calibrated acceleration value
int16_t Calibration(uint16_t val) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	// check if val is negative (if MSB=1 then negative)
	if ((val & 0x80) == 0x80) {
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d01a      	beq.n	8000f82 <Calibration+0x4a>
		// 2's compliment
		val = ~val;
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	80fb      	strh	r3, [r7, #6]
		val += 1;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	3301      	adds	r3, #1
 8000f56:	80fb      	strh	r3, [r7, #6]

		val &= 0x00FF; // mask to keep the last 8bits (output data registers are 8bit)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	80fb      	strh	r3, [r7, #6]

		val = (val * 2300) / 127;//measurement range: ±2.3g (between ±2g and ±8g) (*1000 for convenience)
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <Calibration+0x70>)
 8000f6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6e:	441a      	add	r2, r3
 8000f70:	1192      	asrs	r2, r2, #6
 8000f72:	17db      	asrs	r3, r3, #31
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	80fb      	strh	r3, [r7, #6]
								 // devide by 127 to normalize the outpout (8bit range: -127 to -0 and +0 to +127)
		return (-1 * val);
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	e00c      	b.n	8000f9c <Calibration+0x64>
	} else
		return ((val * 2300) / 127);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <Calibration+0x70>)
 8000f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f92:	441a      	add	r2, r3
 8000f94:	1192      	asrs	r2, r2, #6
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	b21b      	sxth	r3, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	81020409 	.word	0x81020409

08000fac <mdelay>:

// Simple delay function
void mdelay(uint32_t delayvalue) {
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < delayvalue * 4000; ++i) {
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e002      	b.n	8000fc0 <mdelay+0x14>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d3f4      	bcc.n	8000fba <mdelay+0xe>
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fe4:	f000 fbaa 	bl	800173c <HAL_Init>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fe8:	f000 f9a4 	bl	8001334 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000fec:	f000 f942 	bl	8001274 <MX_SPI1_Init>
	MX_I2C1_Init();
 8000ff0:	f000 f912 	bl	8001218 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 8000ff4:	f7ff fe6e 	bl	8000cd4 <lcd_init>
	lcd_put_cur(0, 0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fe4b 	bl	8000c96 <lcd_put_cur>
	lcd_send_string("LiS302DL_low_lvl");
 8001000:	4872      	ldr	r0, [pc, #456]	; (80011cc <main+0x1ec>)
 8001002:	f7ff fea4 	bl	8000d4e <lcd_send_string>
	lcd_put_cur(1, 0);
 8001006:	2100      	movs	r1, #0
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fe44 	bl	8000c96 <lcd_put_cur>
	lcd_send_string("By: Najd Elaoud");
 800100e:	4870      	ldr	r0, [pc, #448]	; (80011d0 <main+0x1f0>)
 8001010:	f7ff fe9d 	bl	8000d4e <lcd_send_string>
	mdelay(1000);
 8001014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001018:	f7ff ffc8 	bl	8000fac <mdelay>
	lcd_clear();
 800101c:	f7ff fe24 	bl	8000c68 <lcd_clear>

	// initialize acceleromter
	LIS302SDL_write(LIS302SDL_CTRL_REG1, 0x47);	// data rate = 400Hz + (x,y,z) axis enabled
 8001020:	2147      	movs	r1, #71	; 0x47
 8001022:	2020      	movs	r0, #32
 8001024:	f7ff ff46 	bl	8000eb4 <LIS302SDL_write>
	GPIOE_CS_LOW();
 8001028:	4b6a      	ldr	r3, [pc, #424]	; (80011d4 <main+0x1f4>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a69      	ldr	r2, [pc, #420]	; (80011d4 <main+0x1f4>)
 800102e:	f023 0308 	bic.w	r3, r3, #8
 8001032:	6153      	str	r3, [r2, #20]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		LIS302SDL_read_axis();
 8001034:	f7ff ff60 	bl	8000ef8 <LIS302SDL_read_axis>
		x_val = Calibration(x_axis);
 8001038:	4b67      	ldr	r3, [pc, #412]	; (80011d8 <main+0x1f8>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff7b 	bl	8000f38 <Calibration>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b65      	ldr	r3, [pc, #404]	; (80011dc <main+0x1fc>)
 8001048:	801a      	strh	r2, [r3, #0]
		y_val = Calibration(y_axis);
 800104a:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <main+0x200>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff72 	bl	8000f38 <Calibration>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b62      	ldr	r3, [pc, #392]	; (80011e4 <main+0x204>)
 800105a:	801a      	strh	r2, [r3, #0]
		z_val = Calibration(z_axis);
 800105c:	4b62      	ldr	r3, [pc, #392]	; (80011e8 <main+0x208>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff69 	bl	8000f38 <Calibration>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b60      	ldr	r3, [pc, #384]	; (80011ec <main+0x20c>)
 800106c:	801a      	strh	r2, [r3, #0]

		lcd_put_cur(0, 0);
 800106e:	2100      	movs	r1, #0
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fe10 	bl	8000c96 <lcd_put_cur>
		sprintf(disp, "x=%d", x_val);
 8001076:	4b59      	ldr	r3, [pc, #356]	; (80011dc <main+0x1fc>)
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	461a      	mov	r2, r3
 800107e:	495c      	ldr	r1, [pc, #368]	; (80011f0 <main+0x210>)
 8001080:	485c      	ldr	r0, [pc, #368]	; (80011f4 <main+0x214>)
 8001082:	f002 f807 	bl	8003094 <siprintf>
		lcd_send_string(disp);
 8001086:	485b      	ldr	r0, [pc, #364]	; (80011f4 <main+0x214>)
 8001088:	f7ff fe61 	bl	8000d4e <lcd_send_string>
		lcd_put_cur(0, 9);
 800108c:	2109      	movs	r1, #9
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fe01 	bl	8000c96 <lcd_put_cur>
		sprintf(disp, "y=%d", y_val);
 8001094:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <main+0x204>)
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	461a      	mov	r2, r3
 800109c:	4956      	ldr	r1, [pc, #344]	; (80011f8 <main+0x218>)
 800109e:	4855      	ldr	r0, [pc, #340]	; (80011f4 <main+0x214>)
 80010a0:	f001 fff8 	bl	8003094 <siprintf>
		lcd_send_string(disp);
 80010a4:	4853      	ldr	r0, [pc, #332]	; (80011f4 <main+0x214>)
 80010a6:	f7ff fe52 	bl	8000d4e <lcd_send_string>
		lcd_put_cur(1, 0);
 80010aa:	2100      	movs	r1, #0
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff fdf2 	bl	8000c96 <lcd_put_cur>
		sprintf(disp, "z=%d", z_val);
 80010b2:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <main+0x20c>)
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4950      	ldr	r1, [pc, #320]	; (80011fc <main+0x21c>)
 80010bc:	484d      	ldr	r0, [pc, #308]	; (80011f4 <main+0x214>)
 80010be:	f001 ffe9 	bl	8003094 <siprintf>
		lcd_send_string(disp);
 80010c2:	484c      	ldr	r0, [pc, #304]	; (80011f4 <main+0x214>)
 80010c4:	f7ff fe43 	bl	8000d4e <lcd_send_string>
		lcd_put_cur(1, 8);
 80010c8:	2108      	movs	r1, #8
 80010ca:	2001      	movs	r0, #1
 80010cc:	f7ff fde3 	bl	8000c96 <lcd_put_cur>
		lcd_send_string("Dir:");
 80010d0:	484b      	ldr	r0, [pc, #300]	; (8001200 <main+0x220>)
 80010d2:	f7ff fe3c 	bl	8000d4e <lcd_send_string>
		mdelay(50);
 80010d6:	2032      	movs	r0, #50	; 0x32
 80010d8:	f7ff ff68 	bl	8000fac <mdelay>

		// toggle LEDs based on acceleration value
		if ((x_val != 0) && (y_val != 0)) {
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <main+0x1fc>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d067      	beq.n	80011b6 <main+0x1d6>
 80010e6:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <main+0x204>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d062      	beq.n	80011b6 <main+0x1d6>
			if (x_val > 90) {
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <main+0x1fc>)
 80010f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f6:	2b5a      	cmp	r3, #90	; 0x5a
 80010f8:	dd12      	ble.n	8001120 <main+0x140>
				GPIOD->ODR |= (1 << 14);
 80010fa:	4b42      	ldr	r3, [pc, #264]	; (8001204 <main+0x224>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a41      	ldr	r2, [pc, #260]	; (8001204 <main+0x224>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~((1 << 12) | (1 << 13) | (1 << 15));
 8001106:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <main+0x224>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a3e      	ldr	r2, [pc, #248]	; (8001204 <main+0x224>)
 800110c:	f423 4330 	bic.w	r3, r3, #45056	; 0xb000
 8001110:	6153      	str	r3, [r2, #20]
				lcd_put_cur(1, 12);
 8001112:	210c      	movs	r1, #12
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fdbe 	bl	8000c96 <lcd_put_cur>
				lcd_send_string("Left");
 800111a:	483b      	ldr	r0, [pc, #236]	; (8001208 <main+0x228>)
 800111c:	f7ff fe17 	bl	8000d4e <lcd_send_string>
			}
			if (x_val < -90) {
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <main+0x1fc>)
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 800112a:	da12      	bge.n	8001152 <main+0x172>
				GPIOD->ODR |= (1 << 12);
 800112c:	4b35      	ldr	r3, [pc, #212]	; (8001204 <main+0x224>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	4a34      	ldr	r2, [pc, #208]	; (8001204 <main+0x224>)
 8001132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001136:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~((1 << 13) | (1 << 14) | (1 << 15));
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <main+0x224>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	4a31      	ldr	r2, [pc, #196]	; (8001204 <main+0x224>)
 800113e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001142:	6153      	str	r3, [r2, #20]
				lcd_put_cur(1, 12);
 8001144:	210c      	movs	r1, #12
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff fda5 	bl	8000c96 <lcd_put_cur>
				lcd_send_string("Right");
 800114c:	482f      	ldr	r0, [pc, #188]	; (800120c <main+0x22c>)
 800114e:	f7ff fdfe 	bl	8000d4e <lcd_send_string>
			}
			if (y_val > 90) {
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <main+0x204>)
 8001154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001158:	2b5a      	cmp	r3, #90	; 0x5a
 800115a:	dd12      	ble.n	8001182 <main+0x1a2>
				GPIOD->ODR |= (1 << 13);
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <main+0x224>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	4a28      	ldr	r2, [pc, #160]	; (8001204 <main+0x224>)
 8001162:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001166:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~((1 << 12) | (1 << 14) | (1 << 15));
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <main+0x224>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	4a25      	ldr	r2, [pc, #148]	; (8001204 <main+0x224>)
 800116e:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8001172:	6153      	str	r3, [r2, #20]
				lcd_put_cur(1, 12);
 8001174:	210c      	movs	r1, #12
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff fd8d 	bl	8000c96 <lcd_put_cur>
				lcd_send_string("Up  ");
 800117c:	4824      	ldr	r0, [pc, #144]	; (8001210 <main+0x230>)
 800117e:	f7ff fde6 	bl	8000d4e <lcd_send_string>
			}
			if (y_val < -90) {
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <main+0x204>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 800118c:	da19      	bge.n	80011c2 <main+0x1e2>
				GPIOD->ODR |= (1 << 15);
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <main+0x224>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <main+0x224>)
 8001194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001198:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~((1 << 12) | (1 << 13) | (1 << 14));
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <main+0x224>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <main+0x224>)
 80011a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011a4:	6153      	str	r3, [r2, #20]
				lcd_put_cur(1, 12);
 80011a6:	210c      	movs	r1, #12
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff fd74 	bl	8000c96 <lcd_put_cur>
				lcd_send_string("down");
 80011ae:	4819      	ldr	r0, [pc, #100]	; (8001214 <main+0x234>)
 80011b0:	f7ff fdcd 	bl	8000d4e <lcd_send_string>
			if (y_val < -90) {
 80011b4:	e005      	b.n	80011c2 <main+0x1e2>
			}
		} else {
			GPIOD->ODR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <main+0x224>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <main+0x224>)
 80011bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80011c0:	6153      	str	r3, [r2, #20]
		}

		mdelay(20);
 80011c2:	2014      	movs	r0, #20
 80011c4:	f7ff fef2 	bl	8000fac <mdelay>
		LIS302SDL_read_axis();
 80011c8:	e734      	b.n	8001034 <main+0x54>
 80011ca:	bf00      	nop
 80011cc:	08005368 	.word	0x08005368
 80011d0:	0800537c 	.word	0x0800537c
 80011d4:	40021000 	.word	0x40021000
 80011d8:	200001f4 	.word	0x200001f4
 80011dc:	200001fa 	.word	0x200001fa
 80011e0:	200001f6 	.word	0x200001f6
 80011e4:	200001fc 	.word	0x200001fc
 80011e8:	200001f8 	.word	0x200001f8
 80011ec:	200001fe 	.word	0x200001fe
 80011f0:	0800538c 	.word	0x0800538c
 80011f4:	20000200 	.word	0x20000200
 80011f8:	08005394 	.word	0x08005394
 80011fc:	0800539c 	.word	0x0800539c
 8001200:	080053a4 	.word	0x080053a4
 8001204:	40020c00 	.word	0x40020c00
 8001208:	080053ac 	.word	0x080053ac
 800120c:	080053b4 	.word	0x080053b4
 8001210:	080053bc 	.word	0x080053bc
 8001214:	080053c4 	.word	0x080053c4

08001218 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_I2C1_Init+0x50>)
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <MX_I2C1_Init+0x54>)
 8001220:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_I2C1_Init+0x50>)
 8001224:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_I2C1_Init+0x58>)
 8001226:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_I2C1_Init+0x50>)
 8001236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800123a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_I2C1_Init+0x50>)
 8001256:	f000 fd89 	bl	8001d6c <HAL_I2C_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001260:	f000 f8e6 	bl	8001430 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000220 	.word	0x20000220
 800126c:	40005400 	.word	0x40005400
 8001270:	000186a0 	.word	0x000186a0

08001274 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 0 */
	RCC->APB2ENR |= (1 << 12);             // Enable SPI1 clock
 8001278:	4b2c      	ldr	r3, [pc, #176]	; (800132c <MX_SPI1_Init+0xb8>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <MX_SPI1_Init+0xb8>)
 800127e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001282:	6453      	str	r3, [r2, #68]	; 0x44

	SPI1->CR1 |= (1 << 2);                 // Set SPI1 as master
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <MX_SPI1_Init+0xbc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a29      	ldr	r2, [pc, #164]	; (8001330 <MX_SPI1_Init+0xbc>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1 << 15);   // Enable 2-line unidirectional mode (BIDIMODE=0)
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <MX_SPI1_Init+0xbc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a26      	ldr	r2, [pc, #152]	; (8001330 <MX_SPI1_Init+0xbc>)
 8001296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800129a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1 << 10);               // Enable full duplex (RXONLY=0)
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <MX_SPI1_Init+0xbc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a23      	ldr	r2, [pc, #140]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012a6:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(1 << 11);               // Set 8-bit data format (DFF=0)
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a20      	ldr	r2, [pc, #128]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012b2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= ((1 << 8) | (1 << 9)); // Enable software slave management (SSI=1, SSM=1)
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012be:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(0b111 << 3);            // Clear baud rate bits
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012c6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80012ca:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (0b010 << 3);             // Set baud rate to fPCLK/8
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(1 << 7);                // Set MSB first (LSBFIRST=0)
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012e2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1 << 0);                // Set to first clock edge (CPHA=0)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1 << 1);           // Set clock polarity to idle low (CPOL=0)
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012f6:	f023 0302 	bic.w	r3, r3, #2
 80012fa:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= (1 << 13);                // Enable CRC calculation (CRCEN=1)
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPI1_Init+0xbc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <MX_SPI1_Init+0xbc>)
 8001302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001306:	6013      	str	r3, [r2, #0]

	SPI1->CR2 &= ~(1 << 4);              // Set frame format to Motorola (FRF=0)
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI1_Init+0xbc>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <MX_SPI1_Init+0xbc>)
 800130e:	f023 0310 	bic.w	r3, r3, #16
 8001312:	6053      	str	r3, [r2, #4]

	// Enable SPI peripheral
	SPI1->CR1 |= (1 << 6);                 // Enable SPI1 (SPE=1)
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI1_Init+0xbc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <MX_SPI1_Init+0xbc>)
 800131a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800131e:	6013      	str	r3, [r2, #0]
	/* SPI1 parameter configuration*/

	/* USER CODE BEGIN SPI1_Init 2 */
	/* USER CODE END SPI1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013000 	.word	0x40013000

08001334 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	RCC->AHB1ENR |= (1 << 0);	// enable clock for Port A
 8001338:	4b38      	ldr	r3, [pc, #224]	; (800141c <MX_GPIO_Init+0xe8>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a37      	ldr	r2, [pc, #220]	; (800141c <MX_GPIO_Init+0xe8>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 1);	// enable clock for Port B
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <MX_GPIO_Init+0xe8>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a34      	ldr	r2, [pc, #208]	; (800141c <MX_GPIO_Init+0xe8>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 3);	// enable clock for Port D
 8001350:	4b32      	ldr	r3, [pc, #200]	; (800141c <MX_GPIO_Init+0xe8>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	4a31      	ldr	r2, [pc, #196]	; (800141c <MX_GPIO_Init+0xe8>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 4);	// enable clock for Port E
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <MX_GPIO_Init+0xe8>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a2e      	ldr	r2, [pc, #184]	; (800141c <MX_GPIO_Init+0xe8>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6313      	str	r3, [r2, #48]	; 0x30

	// CS PE3 as output
	GPIOE->MODER |= (1 << (3 << 1));
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <MX_GPIO_Init+0xec>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2c      	ldr	r2, [pc, #176]	; (8001420 <MX_GPIO_Init+0xec>)
 800136e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001372:	6013      	str	r3, [r2, #0]

	// set PA5, PA6, PA7 as alternate function
	GPIOA->MODER |= ((2 << (5 << 1)) | (2 << (6 << 1)) | (2 << (7 << 1)));
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <MX_GPIO_Init+0xf0>)
 800137a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800137e:	6013      	str	r3, [r2, #0]
	// select AF5 for PA5, PA6, PA7 (AFRL)
	GPIOA->AFR[0] |= (0b0101 << 20);	// PA5
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001386:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800138a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0101 << 24);	// PA6
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <MX_GPIO_Init+0xf0>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001392:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8001396:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0b0101 << 28);	// PA7
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_GPIO_Init+0xf0>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <MX_GPIO_Init+0xf0>)
 800139e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80013a2:	6213      	str	r3, [r2, #32]
	// set port speed (HIGH-speed)
	GPIOA->OSPEEDR |= ((2 << (5 << 1)) | (2 << (6 << 1)) | (2 << (7 << 1)));
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_GPIO_Init+0xf0>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <MX_GPIO_Init+0xf0>)
 80013aa:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 80013ae:	6093      	str	r3, [r2, #8]
	// set PA5, PA6, PA7 OUT mode as pull up
	GPIOA->PUPDR |= ((2 << (5 << 1)) | (2 << (6 << 1)) | (2 << (7 << 1)));
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_GPIO_Init+0xf0>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <MX_GPIO_Init+0xf0>)
 80013b6:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 80013ba:	60d3      	str	r3, [r2, #12]

	// set LEDs as output
	GPIOD->MODER |= ((1 << (12 << 1)) | (1 << (13 << 1)) | (1 << (14 << 1))
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_GPIO_Init+0xf4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <MX_GPIO_Init+0xf4>)
 80013c2:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80013c6:	6013      	str	r3, [r2, #0]
			| (1 << (15 << 1)));

	// I2C setup
	// set PB6, PB7 as alternate function
	GPIOB->MODER |= ((2 << (6 << 1)) | (2 << (7 << 1)));
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_GPIO_Init+0xf8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <MX_GPIO_Init+0xf8>)
 80013ce:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80013d2:	6013      	str	r3, [r2, #0]
	// select AF4 for PB6, PB7 (AFRL)
	GPIOB->AFR[0] |= (0b0100 << 24);
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_GPIO_Init+0xf8>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <MX_GPIO_Init+0xf8>)
 80013da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013de:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0100 << 28);
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_GPIO_Init+0xf8>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <MX_GPIO_Init+0xf8>)
 80013e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013ea:	6213      	str	r3, [r2, #32]
	// set output as open drain
	GPIOB->OTYPER |= (1 << 6);
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_GPIO_Init+0xf8>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <MX_GPIO_Init+0xf8>)
 80013f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f6:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1 << 7);
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_GPIO_Init+0xf8>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <MX_GPIO_Init+0xf8>)
 80013fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001402:	6053      	str	r3, [r2, #4]
	// set port speed (HIGH-speed)
	GPIOB->OSPEEDR |= ((2 << (5 << 1)) | (2 << (6 << 1)) | (2 << (7 << 1)));
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_GPIO_Init+0xf8>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <MX_GPIO_Init+0xf8>)
 800140a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800140e:	6093      	str	r3, [r2, #8]

	/* GPIO Ports Clock Enable */

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40021000 	.word	0x40021000
 8001424:	40020000 	.word	0x40020000
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40020400 	.word	0x40020400

08001430 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_MspInit+0x4c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147a:	2007      	movs	r0, #7
 800147c:	f000 faa6 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_I2C_MspInit+0x84>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12b      	bne.n	8001506 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ca:	23c0      	movs	r3, #192	; 0xc0
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ce:	2312      	movs	r3, #18
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014da:	2304      	movs	r3, #4
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <HAL_I2C_MspInit+0x8c>)
 80014e6:	f000 faa5 	bl	8001a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40005400 	.word	0x40005400
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <NMI_Handler+0x4>

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f000 f93a 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_kill>:

int _kill(int pid, int sig)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158a:	f001 fe39 	bl	8003200 <__errno>
 800158e:	4603      	mov	r3, r0
 8001590:	2216      	movs	r2, #22
 8001592:	601a      	str	r2, [r3, #0]
  return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_exit>:

void _exit (int status)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffe7 	bl	8001580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b2:	e7fe      	b.n	80015b2 <_exit+0x12>

080015b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e00a      	b.n	80015dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c6:	f3af 8000 	nop.w
 80015ca:	4601      	mov	r1, r0
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	b2ca      	uxtb	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf0      	blt.n	80015c6 <_read+0x12>
  }

  return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001616:	605a      	str	r2, [r3, #4]
  return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_isatty>:

int _isatty(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f001 fdba 	bl	8003200 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20020000 	.word	0x20020000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	20000274 	.word	0x20000274
 80016c0:	200003c8 	.word	0x200003c8

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001704:	4c0b      	ldr	r4, [pc, #44]	; (8001734 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001712:	f7ff ffd7 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f001 fd79 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7ff fc61 	bl	8000fe0 <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800172c:	0800574c 	.word	0x0800574c
  ldr r2, =_sbss
 8001730:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001734:	200003c8 	.word	0x200003c8

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <HAL_Init+0x40>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_Init+0x40>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_Init+0x40>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f931 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fe64 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f93b 	bl	8001a1a <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f911 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008
 8001804:	20000278 	.word	0x20000278

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000278 	.word	0x20000278

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008

08001868 <__NVIC_SetPriorityGrouping>:
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_SetPriority>:
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff47 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff5c 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffb0 	bl	8001988 <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e16b      	b.n	8001d28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 815a 	bne.w	8001d22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d005      	beq.n	8001a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d130      	bne.n	8001ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 0201 	and.w	r2, r3, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d017      	beq.n	8001b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d123      	bne.n	8001b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80b4 	beq.w	8001d22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <HAL_GPIO_Init+0x30c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a5f      	ldr	r2, [pc, #380]	; (8001d40 <HAL_GPIO_Init+0x30c>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_GPIO_Init+0x30c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd6:	4a5b      	ldr	r2, [pc, #364]	; (8001d44 <HAL_GPIO_Init+0x310>)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_GPIO_Init+0x314>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02b      	beq.n	8001c5a <HAL_GPIO_Init+0x226>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <HAL_GPIO_Init+0x318>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x222>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <HAL_GPIO_Init+0x31c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x21e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4f      	ldr	r2, [pc, #316]	; (8001d54 <HAL_GPIO_Init+0x320>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x21a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <HAL_GPIO_Init+0x324>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x216>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <HAL_GPIO_Init+0x328>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4c      	ldr	r2, [pc, #304]	; (8001d60 <HAL_GPIO_Init+0x32c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4b      	ldr	r2, [pc, #300]	; (8001d64 <HAL_GPIO_Init+0x330>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x20a>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e00e      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c3e:	2308      	movs	r3, #8
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x228>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <HAL_GPIO_Init+0x310>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a32      	ldr	r2, [pc, #200]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a27      	ldr	r2, [pc, #156]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae90 	bls.w	8001a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e12b      	b.n	8001fd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fb7a 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	; 0x24
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd0:	f000 fc24 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8001dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4a81      	ldr	r2, [pc, #516]	; (8001fe0 <HAL_I2C_Init+0x274>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d807      	bhi.n	8001df0 <HAL_I2C_Init+0x84>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a80      	ldr	r2, [pc, #512]	; (8001fe4 <HAL_I2C_Init+0x278>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	bf94      	ite	ls
 8001de8:	2301      	movls	r3, #1
 8001dea:	2300      	movhi	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e006      	b.n	8001dfe <HAL_I2C_Init+0x92>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a7d      	ldr	r2, [pc, #500]	; (8001fe8 <HAL_I2C_Init+0x27c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	bf94      	ite	ls
 8001df8:	2301      	movls	r3, #1
 8001dfa:	2300      	movhi	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0e7      	b.n	8001fd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a78      	ldr	r2, [pc, #480]	; (8001fec <HAL_I2C_Init+0x280>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0c9b      	lsrs	r3, r3, #18
 8001e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <HAL_I2C_Init+0x274>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d802      	bhi.n	8001e40 <HAL_I2C_Init+0xd4>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	e009      	b.n	8001e54 <HAL_I2C_Init+0xe8>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	4a69      	ldr	r2, [pc, #420]	; (8001ff0 <HAL_I2C_Init+0x284>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	3301      	adds	r3, #1
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	495c      	ldr	r1, [pc, #368]	; (8001fe0 <HAL_I2C_Init+0x274>)
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d819      	bhi.n	8001ea8 <HAL_I2C_Init+0x13c>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1e59      	subs	r1, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e82:	1c59      	adds	r1, r3, #1
 8001e84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e88:	400b      	ands	r3, r1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_I2C_Init+0x138>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1e59      	subs	r1, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea2:	e051      	b.n	8001f48 <HAL_I2C_Init+0x1dc>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e04f      	b.n	8001f48 <HAL_I2C_Init+0x1dc>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d111      	bne.n	8001ed4 <HAL_I2C_Init+0x168>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e58      	subs	r0, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e012      	b.n	8001efa <HAL_I2C_Init+0x18e>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1e58      	subs	r0, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	0099      	lsls	r1, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x196>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e022      	b.n	8001f48 <HAL_I2C_Init+0x1dc>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10e      	bne.n	8001f28 <HAL_I2C_Init+0x1bc>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1e58      	subs	r0, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6859      	ldr	r1, [r3, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	440b      	add	r3, r1
 8001f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	e00f      	b.n	8001f48 <HAL_I2C_Init+0x1dc>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	0099      	lsls	r1, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	6809      	ldr	r1, [r1, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6911      	ldr	r1, [r2, #16]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68d2      	ldr	r2, [r2, #12]
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	000186a0 	.word	0x000186a0
 8001fe4:	001e847f 	.word	0x001e847f
 8001fe8:	003d08ff 	.word	0x003d08ff
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	10624dd3 	.word	0x10624dd3

08001ff4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	461a      	mov	r2, r3
 8002000:	460b      	mov	r3, r1
 8002002:	817b      	strh	r3, [r7, #10]
 8002004:	4613      	mov	r3, r2
 8002006:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fbfe 	bl	8001808 <HAL_GetTick>
 800200c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
 8002018:	f040 80e0 	bne.w	80021dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2319      	movs	r3, #25
 8002022:	2201      	movs	r2, #1
 8002024:	4970      	ldr	r1, [pc, #448]	; (80021e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f964 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	e0d3      	b.n	80021de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_I2C_Master_Transmit+0x50>
 8002040:	2302      	movs	r3, #2
 8002042:	e0cc      	b.n	80021de <HAL_I2C_Master_Transmit+0x1ea>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d007      	beq.n	800206a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002078:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2221      	movs	r2, #33	; 0x21
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2210      	movs	r2, #16
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	893a      	ldrh	r2, [r7, #8]
 800209a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a50      	ldr	r2, [pc, #320]	; (80021ec <HAL_I2C_Master_Transmit+0x1f8>)
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6a3a      	ldr	r2, [r7, #32]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f89c 	bl	80021f0 <I2C_MasterRequestWrite>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e08d      	b.n	80021de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020d8:	e066      	b.n	80021a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	6a39      	ldr	r1, [r7, #32]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f9de 	bl	80024a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d107      	bne.n	8002102 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06b      	b.n	80021de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d11b      	bne.n	800217c <HAL_I2C_Master_Transmit+0x188>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d017      	beq.n	800217c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	6a39      	ldr	r1, [r7, #32]
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f9ce 	bl	8002522 <I2C_WaitOnBTFFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	2b04      	cmp	r3, #4
 8002192:	d107      	bne.n	80021a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e01a      	b.n	80021de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d194      	bne.n	80020da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	00100002 	.word	0x00100002
 80021ec:	ffff0000 	.word	0xffff0000

080021f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d006      	beq.n	800221a <I2C_MasterRequestWrite+0x2a>
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d003      	beq.n	800221a <I2C_MasterRequestWrite+0x2a>
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002218:	d108      	bne.n	800222c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e00b      	b.n	8002244 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	2b12      	cmp	r3, #18
 8002232:	d107      	bne.n	8002244 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002242:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f84f 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00d      	beq.n	8002278 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226a:	d103      	bne.n	8002274 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e035      	b.n	80022e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002280:	d108      	bne.n	8002294 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002282:	897b      	ldrh	r3, [r7, #10]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002290:	611a      	str	r2, [r3, #16]
 8002292:	e01b      	b.n	80022cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002294:	897b      	ldrh	r3, [r7, #10]
 8002296:	11db      	asrs	r3, r3, #7
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f003 0306 	and.w	r3, r3, #6
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f063 030f 	orn	r3, r3, #15
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <I2C_MasterRequestWrite+0xfc>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f875 	bl	80023a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e010      	b.n	80022e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022c2:	897b      	ldrh	r3, [r7, #10]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4907      	ldr	r1, [pc, #28]	; (80022f0 <I2C_MasterRequestWrite+0x100>)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f865 	bl	80023a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	00010008 	.word	0x00010008
 80022f0:	00010002 	.word	0x00010002

080022f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002304:	e025      	b.n	8002352 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d021      	beq.n	8002352 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230e:	f7ff fa7b 	bl	8001808 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d302      	bcc.n	8002324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d116      	bne.n	8002352 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f043 0220 	orr.w	r2, r3, #32
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e023      	b.n	800239a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d10d      	bne.n	8002378 <I2C_WaitOnFlagUntilTimeout+0x84>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4013      	ands	r3, r2
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	e00c      	b.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4013      	ands	r3, r2
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	429a      	cmp	r2, r3
 8002396:	d0b6      	beq.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b0:	e051      	b.n	8002456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c0:	d123      	bne.n	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e046      	b.n	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d021      	beq.n	8002456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002412:	f7ff f9f9 	bl	8001808 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d302      	bcc.n	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f043 0220 	orr.w	r2, r3, #32
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e020      	b.n	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10c      	bne.n	800247a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	e00b      	b.n	8002492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	43da      	mvns	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4013      	ands	r3, r2
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d18d      	bne.n	80023b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ac:	e02d      	b.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f878 	bl	80025a4 <I2C_IsAcknowledgeFailed>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e02d      	b.n	800251a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d021      	beq.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c6:	f7ff f99f 	bl	8001808 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d116      	bne.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f043 0220 	orr.w	r2, r3, #32
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e007      	b.n	800251a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d1ca      	bne.n	80024ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800252e:	e02d      	b.n	800258c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f837 	bl	80025a4 <I2C_IsAcknowledgeFailed>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e02d      	b.n	800259c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d021      	beq.n	800258c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002548:	f7ff f95e 	bl	8001808 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d302      	bcc.n	800255e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e007      	b.n	800259c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d1ca      	bne.n	8002530 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ba:	d11b      	bne.n	80025f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f043 0204 	orr.w	r2, r3, #4
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_GetHCLKFreq+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000000 	.word	0x20000000

0800261c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002620:	f7ff fff0 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0a9b      	lsrs	r3, r3, #10
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	080053cc 	.word	0x080053cc

08002644 <__cvt>:
 8002644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002648:	ec55 4b10 	vmov	r4, r5, d0
 800264c:	2d00      	cmp	r5, #0
 800264e:	460e      	mov	r6, r1
 8002650:	4619      	mov	r1, r3
 8002652:	462b      	mov	r3, r5
 8002654:	bfbb      	ittet	lt
 8002656:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800265a:	461d      	movlt	r5, r3
 800265c:	2300      	movge	r3, #0
 800265e:	232d      	movlt	r3, #45	; 0x2d
 8002660:	700b      	strb	r3, [r1, #0]
 8002662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002664:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002668:	4691      	mov	r9, r2
 800266a:	f023 0820 	bic.w	r8, r3, #32
 800266e:	bfbc      	itt	lt
 8002670:	4622      	movlt	r2, r4
 8002672:	4614      	movlt	r4, r2
 8002674:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002678:	d005      	beq.n	8002686 <__cvt+0x42>
 800267a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800267e:	d100      	bne.n	8002682 <__cvt+0x3e>
 8002680:	3601      	adds	r6, #1
 8002682:	2102      	movs	r1, #2
 8002684:	e000      	b.n	8002688 <__cvt+0x44>
 8002686:	2103      	movs	r1, #3
 8002688:	ab03      	add	r3, sp, #12
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	ab02      	add	r3, sp, #8
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	ec45 4b10 	vmov	d0, r4, r5
 8002694:	4653      	mov	r3, sl
 8002696:	4632      	mov	r2, r6
 8002698:	f000 fe6a 	bl	8003370 <_dtoa_r>
 800269c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80026a0:	4607      	mov	r7, r0
 80026a2:	d102      	bne.n	80026aa <__cvt+0x66>
 80026a4:	f019 0f01 	tst.w	r9, #1
 80026a8:	d022      	beq.n	80026f0 <__cvt+0xac>
 80026aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80026ae:	eb07 0906 	add.w	r9, r7, r6
 80026b2:	d110      	bne.n	80026d6 <__cvt+0x92>
 80026b4:	783b      	ldrb	r3, [r7, #0]
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d10a      	bne.n	80026d0 <__cvt+0x8c>
 80026ba:	2200      	movs	r2, #0
 80026bc:	2300      	movs	r3, #0
 80026be:	4620      	mov	r0, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	f7fe fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 80026c6:	b918      	cbnz	r0, 80026d0 <__cvt+0x8c>
 80026c8:	f1c6 0601 	rsb	r6, r6, #1
 80026cc:	f8ca 6000 	str.w	r6, [sl]
 80026d0:	f8da 3000 	ldr.w	r3, [sl]
 80026d4:	4499      	add	r9, r3
 80026d6:	2200      	movs	r2, #0
 80026d8:	2300      	movs	r3, #0
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f7fe f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80026e2:	b108      	cbz	r0, 80026e8 <__cvt+0xa4>
 80026e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80026e8:	2230      	movs	r2, #48	; 0x30
 80026ea:	9b03      	ldr	r3, [sp, #12]
 80026ec:	454b      	cmp	r3, r9
 80026ee:	d307      	bcc.n	8002700 <__cvt+0xbc>
 80026f0:	9b03      	ldr	r3, [sp, #12]
 80026f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026f4:	1bdb      	subs	r3, r3, r7
 80026f6:	4638      	mov	r0, r7
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	b004      	add	sp, #16
 80026fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002700:	1c59      	adds	r1, r3, #1
 8002702:	9103      	str	r1, [sp, #12]
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e7f0      	b.n	80026ea <__cvt+0xa6>

08002708 <__exponent>:
 8002708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800270a:	4603      	mov	r3, r0
 800270c:	2900      	cmp	r1, #0
 800270e:	bfb8      	it	lt
 8002710:	4249      	neglt	r1, r1
 8002712:	f803 2b02 	strb.w	r2, [r3], #2
 8002716:	bfb4      	ite	lt
 8002718:	222d      	movlt	r2, #45	; 0x2d
 800271a:	222b      	movge	r2, #43	; 0x2b
 800271c:	2909      	cmp	r1, #9
 800271e:	7042      	strb	r2, [r0, #1]
 8002720:	dd2a      	ble.n	8002778 <__exponent+0x70>
 8002722:	f10d 0207 	add.w	r2, sp, #7
 8002726:	4617      	mov	r7, r2
 8002728:	260a      	movs	r6, #10
 800272a:	4694      	mov	ip, r2
 800272c:	fb91 f5f6 	sdiv	r5, r1, r6
 8002730:	fb06 1415 	mls	r4, r6, r5, r1
 8002734:	3430      	adds	r4, #48	; 0x30
 8002736:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800273a:	460c      	mov	r4, r1
 800273c:	2c63      	cmp	r4, #99	; 0x63
 800273e:	f102 32ff 	add.w	r2, r2, #4294967295
 8002742:	4629      	mov	r1, r5
 8002744:	dcf1      	bgt.n	800272a <__exponent+0x22>
 8002746:	3130      	adds	r1, #48	; 0x30
 8002748:	f1ac 0402 	sub.w	r4, ip, #2
 800274c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002750:	1c41      	adds	r1, r0, #1
 8002752:	4622      	mov	r2, r4
 8002754:	42ba      	cmp	r2, r7
 8002756:	d30a      	bcc.n	800276e <__exponent+0x66>
 8002758:	f10d 0209 	add.w	r2, sp, #9
 800275c:	eba2 020c 	sub.w	r2, r2, ip
 8002760:	42bc      	cmp	r4, r7
 8002762:	bf88      	it	hi
 8002764:	2200      	movhi	r2, #0
 8002766:	4413      	add	r3, r2
 8002768:	1a18      	subs	r0, r3, r0
 800276a:	b003      	add	sp, #12
 800276c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800276e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002772:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002776:	e7ed      	b.n	8002754 <__exponent+0x4c>
 8002778:	2330      	movs	r3, #48	; 0x30
 800277a:	3130      	adds	r1, #48	; 0x30
 800277c:	7083      	strb	r3, [r0, #2]
 800277e:	70c1      	strb	r1, [r0, #3]
 8002780:	1d03      	adds	r3, r0, #4
 8002782:	e7f1      	b.n	8002768 <__exponent+0x60>

08002784 <_printf_float>:
 8002784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002788:	ed2d 8b02 	vpush	{d8}
 800278c:	b08d      	sub	sp, #52	; 0x34
 800278e:	460c      	mov	r4, r1
 8002790:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002794:	4616      	mov	r6, r2
 8002796:	461f      	mov	r7, r3
 8002798:	4605      	mov	r5, r0
 800279a:	f000 fce7 	bl	800316c <_localeconv_r>
 800279e:	f8d0 a000 	ldr.w	sl, [r0]
 80027a2:	4650      	mov	r0, sl
 80027a4:	f7fd fd64 	bl	8000270 <strlen>
 80027a8:	2300      	movs	r3, #0
 80027aa:	930a      	str	r3, [sp, #40]	; 0x28
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	9305      	str	r3, [sp, #20]
 80027b0:	f8d8 3000 	ldr.w	r3, [r8]
 80027b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80027b8:	3307      	adds	r3, #7
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	f103 0208 	add.w	r2, r3, #8
 80027c2:	f8c8 2000 	str.w	r2, [r8]
 80027c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80027ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80027ce:	9307      	str	r3, [sp, #28]
 80027d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80027d4:	ee08 0a10 	vmov	s16, r0
 80027d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80027dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80027e0:	4b9e      	ldr	r3, [pc, #632]	; (8002a5c <_printf_float+0x2d8>)
 80027e2:	f04f 32ff 	mov.w	r2, #4294967295
 80027e6:	f7fe f9a1 	bl	8000b2c <__aeabi_dcmpun>
 80027ea:	bb88      	cbnz	r0, 8002850 <_printf_float+0xcc>
 80027ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80027f0:	4b9a      	ldr	r3, [pc, #616]	; (8002a5c <_printf_float+0x2d8>)
 80027f2:	f04f 32ff 	mov.w	r2, #4294967295
 80027f6:	f7fe f97b 	bl	8000af0 <__aeabi_dcmple>
 80027fa:	bb48      	cbnz	r0, 8002850 <_printf_float+0xcc>
 80027fc:	2200      	movs	r2, #0
 80027fe:	2300      	movs	r3, #0
 8002800:	4640      	mov	r0, r8
 8002802:	4649      	mov	r1, r9
 8002804:	f7fe f96a 	bl	8000adc <__aeabi_dcmplt>
 8002808:	b110      	cbz	r0, 8002810 <_printf_float+0x8c>
 800280a:	232d      	movs	r3, #45	; 0x2d
 800280c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002810:	4a93      	ldr	r2, [pc, #588]	; (8002a60 <_printf_float+0x2dc>)
 8002812:	4b94      	ldr	r3, [pc, #592]	; (8002a64 <_printf_float+0x2e0>)
 8002814:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002818:	bf94      	ite	ls
 800281a:	4690      	movls	r8, r2
 800281c:	4698      	movhi	r8, r3
 800281e:	2303      	movs	r3, #3
 8002820:	6123      	str	r3, [r4, #16]
 8002822:	9b05      	ldr	r3, [sp, #20]
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6023      	str	r3, [r4, #0]
 800282a:	f04f 0900 	mov.w	r9, #0
 800282e:	9700      	str	r7, [sp, #0]
 8002830:	4633      	mov	r3, r6
 8002832:	aa0b      	add	r2, sp, #44	; 0x2c
 8002834:	4621      	mov	r1, r4
 8002836:	4628      	mov	r0, r5
 8002838:	f000 f9da 	bl	8002bf0 <_printf_common>
 800283c:	3001      	adds	r0, #1
 800283e:	f040 8090 	bne.w	8002962 <_printf_float+0x1de>
 8002842:	f04f 30ff 	mov.w	r0, #4294967295
 8002846:	b00d      	add	sp, #52	; 0x34
 8002848:	ecbd 8b02 	vpop	{d8}
 800284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002850:	4642      	mov	r2, r8
 8002852:	464b      	mov	r3, r9
 8002854:	4640      	mov	r0, r8
 8002856:	4649      	mov	r1, r9
 8002858:	f7fe f968 	bl	8000b2c <__aeabi_dcmpun>
 800285c:	b140      	cbz	r0, 8002870 <_printf_float+0xec>
 800285e:	464b      	mov	r3, r9
 8002860:	2b00      	cmp	r3, #0
 8002862:	bfbc      	itt	lt
 8002864:	232d      	movlt	r3, #45	; 0x2d
 8002866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800286a:	4a7f      	ldr	r2, [pc, #508]	; (8002a68 <_printf_float+0x2e4>)
 800286c:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <_printf_float+0x2e8>)
 800286e:	e7d1      	b.n	8002814 <_printf_float+0x90>
 8002870:	6863      	ldr	r3, [r4, #4]
 8002872:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002876:	9206      	str	r2, [sp, #24]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	d13f      	bne.n	80028fc <_printf_float+0x178>
 800287c:	2306      	movs	r3, #6
 800287e:	6063      	str	r3, [r4, #4]
 8002880:	9b05      	ldr	r3, [sp, #20]
 8002882:	6861      	ldr	r1, [r4, #4]
 8002884:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002888:	2300      	movs	r3, #0
 800288a:	9303      	str	r3, [sp, #12]
 800288c:	ab0a      	add	r3, sp, #40	; 0x28
 800288e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002892:	ab09      	add	r3, sp, #36	; 0x24
 8002894:	ec49 8b10 	vmov	d0, r8, r9
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	6022      	str	r2, [r4, #0]
 800289c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80028a0:	4628      	mov	r0, r5
 80028a2:	f7ff fecf 	bl	8002644 <__cvt>
 80028a6:	9b06      	ldr	r3, [sp, #24]
 80028a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028aa:	2b47      	cmp	r3, #71	; 0x47
 80028ac:	4680      	mov	r8, r0
 80028ae:	d108      	bne.n	80028c2 <_printf_float+0x13e>
 80028b0:	1cc8      	adds	r0, r1, #3
 80028b2:	db02      	blt.n	80028ba <_printf_float+0x136>
 80028b4:	6863      	ldr	r3, [r4, #4]
 80028b6:	4299      	cmp	r1, r3
 80028b8:	dd41      	ble.n	800293e <_printf_float+0x1ba>
 80028ba:	f1ab 0302 	sub.w	r3, fp, #2
 80028be:	fa5f fb83 	uxtb.w	fp, r3
 80028c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80028c6:	d820      	bhi.n	800290a <_printf_float+0x186>
 80028c8:	3901      	subs	r1, #1
 80028ca:	465a      	mov	r2, fp
 80028cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80028d0:	9109      	str	r1, [sp, #36]	; 0x24
 80028d2:	f7ff ff19 	bl	8002708 <__exponent>
 80028d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80028d8:	1813      	adds	r3, r2, r0
 80028da:	2a01      	cmp	r2, #1
 80028dc:	4681      	mov	r9, r0
 80028de:	6123      	str	r3, [r4, #16]
 80028e0:	dc02      	bgt.n	80028e8 <_printf_float+0x164>
 80028e2:	6822      	ldr	r2, [r4, #0]
 80028e4:	07d2      	lsls	r2, r2, #31
 80028e6:	d501      	bpl.n	80028ec <_printf_float+0x168>
 80028e8:	3301      	adds	r3, #1
 80028ea:	6123      	str	r3, [r4, #16]
 80028ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d09c      	beq.n	800282e <_printf_float+0xaa>
 80028f4:	232d      	movs	r3, #45	; 0x2d
 80028f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028fa:	e798      	b.n	800282e <_printf_float+0xaa>
 80028fc:	9a06      	ldr	r2, [sp, #24]
 80028fe:	2a47      	cmp	r2, #71	; 0x47
 8002900:	d1be      	bne.n	8002880 <_printf_float+0xfc>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1bc      	bne.n	8002880 <_printf_float+0xfc>
 8002906:	2301      	movs	r3, #1
 8002908:	e7b9      	b.n	800287e <_printf_float+0xfa>
 800290a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800290e:	d118      	bne.n	8002942 <_printf_float+0x1be>
 8002910:	2900      	cmp	r1, #0
 8002912:	6863      	ldr	r3, [r4, #4]
 8002914:	dd0b      	ble.n	800292e <_printf_float+0x1aa>
 8002916:	6121      	str	r1, [r4, #16]
 8002918:	b913      	cbnz	r3, 8002920 <_printf_float+0x19c>
 800291a:	6822      	ldr	r2, [r4, #0]
 800291c:	07d0      	lsls	r0, r2, #31
 800291e:	d502      	bpl.n	8002926 <_printf_float+0x1a2>
 8002920:	3301      	adds	r3, #1
 8002922:	440b      	add	r3, r1
 8002924:	6123      	str	r3, [r4, #16]
 8002926:	65a1      	str	r1, [r4, #88]	; 0x58
 8002928:	f04f 0900 	mov.w	r9, #0
 800292c:	e7de      	b.n	80028ec <_printf_float+0x168>
 800292e:	b913      	cbnz	r3, 8002936 <_printf_float+0x1b2>
 8002930:	6822      	ldr	r2, [r4, #0]
 8002932:	07d2      	lsls	r2, r2, #31
 8002934:	d501      	bpl.n	800293a <_printf_float+0x1b6>
 8002936:	3302      	adds	r3, #2
 8002938:	e7f4      	b.n	8002924 <_printf_float+0x1a0>
 800293a:	2301      	movs	r3, #1
 800293c:	e7f2      	b.n	8002924 <_printf_float+0x1a0>
 800293e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002944:	4299      	cmp	r1, r3
 8002946:	db05      	blt.n	8002954 <_printf_float+0x1d0>
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	6121      	str	r1, [r4, #16]
 800294c:	07d8      	lsls	r0, r3, #31
 800294e:	d5ea      	bpl.n	8002926 <_printf_float+0x1a2>
 8002950:	1c4b      	adds	r3, r1, #1
 8002952:	e7e7      	b.n	8002924 <_printf_float+0x1a0>
 8002954:	2900      	cmp	r1, #0
 8002956:	bfd4      	ite	le
 8002958:	f1c1 0202 	rsble	r2, r1, #2
 800295c:	2201      	movgt	r2, #1
 800295e:	4413      	add	r3, r2
 8002960:	e7e0      	b.n	8002924 <_printf_float+0x1a0>
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	055a      	lsls	r2, r3, #21
 8002966:	d407      	bmi.n	8002978 <_printf_float+0x1f4>
 8002968:	6923      	ldr	r3, [r4, #16]
 800296a:	4642      	mov	r2, r8
 800296c:	4631      	mov	r1, r6
 800296e:	4628      	mov	r0, r5
 8002970:	47b8      	blx	r7
 8002972:	3001      	adds	r0, #1
 8002974:	d12c      	bne.n	80029d0 <_printf_float+0x24c>
 8002976:	e764      	b.n	8002842 <_printf_float+0xbe>
 8002978:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800297c:	f240 80e0 	bls.w	8002b40 <_printf_float+0x3bc>
 8002980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002984:	2200      	movs	r2, #0
 8002986:	2300      	movs	r3, #0
 8002988:	f7fe f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800298c:	2800      	cmp	r0, #0
 800298e:	d034      	beq.n	80029fa <_printf_float+0x276>
 8002990:	4a37      	ldr	r2, [pc, #220]	; (8002a70 <_printf_float+0x2ec>)
 8002992:	2301      	movs	r3, #1
 8002994:	4631      	mov	r1, r6
 8002996:	4628      	mov	r0, r5
 8002998:	47b8      	blx	r7
 800299a:	3001      	adds	r0, #1
 800299c:	f43f af51 	beq.w	8002842 <_printf_float+0xbe>
 80029a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029a4:	429a      	cmp	r2, r3
 80029a6:	db02      	blt.n	80029ae <_printf_float+0x22a>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	07d8      	lsls	r0, r3, #31
 80029ac:	d510      	bpl.n	80029d0 <_printf_float+0x24c>
 80029ae:	ee18 3a10 	vmov	r3, s16
 80029b2:	4652      	mov	r2, sl
 80029b4:	4631      	mov	r1, r6
 80029b6:	4628      	mov	r0, r5
 80029b8:	47b8      	blx	r7
 80029ba:	3001      	adds	r0, #1
 80029bc:	f43f af41 	beq.w	8002842 <_printf_float+0xbe>
 80029c0:	f04f 0800 	mov.w	r8, #0
 80029c4:	f104 091a 	add.w	r9, r4, #26
 80029c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	4543      	cmp	r3, r8
 80029ce:	dc09      	bgt.n	80029e4 <_printf_float+0x260>
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	079b      	lsls	r3, r3, #30
 80029d4:	f100 8107 	bmi.w	8002be6 <_printf_float+0x462>
 80029d8:	68e0      	ldr	r0, [r4, #12]
 80029da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80029dc:	4298      	cmp	r0, r3
 80029de:	bfb8      	it	lt
 80029e0:	4618      	movlt	r0, r3
 80029e2:	e730      	b.n	8002846 <_printf_float+0xc2>
 80029e4:	2301      	movs	r3, #1
 80029e6:	464a      	mov	r2, r9
 80029e8:	4631      	mov	r1, r6
 80029ea:	4628      	mov	r0, r5
 80029ec:	47b8      	blx	r7
 80029ee:	3001      	adds	r0, #1
 80029f0:	f43f af27 	beq.w	8002842 <_printf_float+0xbe>
 80029f4:	f108 0801 	add.w	r8, r8, #1
 80029f8:	e7e6      	b.n	80029c8 <_printf_float+0x244>
 80029fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	dc39      	bgt.n	8002a74 <_printf_float+0x2f0>
 8002a00:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <_printf_float+0x2ec>)
 8002a02:	2301      	movs	r3, #1
 8002a04:	4631      	mov	r1, r6
 8002a06:	4628      	mov	r0, r5
 8002a08:	47b8      	blx	r7
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	f43f af19 	beq.w	8002842 <_printf_float+0xbe>
 8002a10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002a14:	4313      	orrs	r3, r2
 8002a16:	d102      	bne.n	8002a1e <_printf_float+0x29a>
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	07d9      	lsls	r1, r3, #31
 8002a1c:	d5d8      	bpl.n	80029d0 <_printf_float+0x24c>
 8002a1e:	ee18 3a10 	vmov	r3, s16
 8002a22:	4652      	mov	r2, sl
 8002a24:	4631      	mov	r1, r6
 8002a26:	4628      	mov	r0, r5
 8002a28:	47b8      	blx	r7
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	f43f af09 	beq.w	8002842 <_printf_float+0xbe>
 8002a30:	f04f 0900 	mov.w	r9, #0
 8002a34:	f104 0a1a 	add.w	sl, r4, #26
 8002a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a3a:	425b      	negs	r3, r3
 8002a3c:	454b      	cmp	r3, r9
 8002a3e:	dc01      	bgt.n	8002a44 <_printf_float+0x2c0>
 8002a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a42:	e792      	b.n	800296a <_printf_float+0x1e6>
 8002a44:	2301      	movs	r3, #1
 8002a46:	4652      	mov	r2, sl
 8002a48:	4631      	mov	r1, r6
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	47b8      	blx	r7
 8002a4e:	3001      	adds	r0, #1
 8002a50:	f43f aef7 	beq.w	8002842 <_printf_float+0xbe>
 8002a54:	f109 0901 	add.w	r9, r9, #1
 8002a58:	e7ee      	b.n	8002a38 <_printf_float+0x2b4>
 8002a5a:	bf00      	nop
 8002a5c:	7fefffff 	.word	0x7fefffff
 8002a60:	080053d4 	.word	0x080053d4
 8002a64:	080053d8 	.word	0x080053d8
 8002a68:	080053dc 	.word	0x080053dc
 8002a6c:	080053e0 	.word	0x080053e0
 8002a70:	080053e4 	.word	0x080053e4
 8002a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	bfa8      	it	ge
 8002a7c:	461a      	movge	r2, r3
 8002a7e:	2a00      	cmp	r2, #0
 8002a80:	4691      	mov	r9, r2
 8002a82:	dc37      	bgt.n	8002af4 <_printf_float+0x370>
 8002a84:	f04f 0b00 	mov.w	fp, #0
 8002a88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002a8c:	f104 021a 	add.w	r2, r4, #26
 8002a90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a92:	9305      	str	r3, [sp, #20]
 8002a94:	eba3 0309 	sub.w	r3, r3, r9
 8002a98:	455b      	cmp	r3, fp
 8002a9a:	dc33      	bgt.n	8002b04 <_printf_float+0x380>
 8002a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	db3b      	blt.n	8002b1c <_printf_float+0x398>
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	07da      	lsls	r2, r3, #31
 8002aa8:	d438      	bmi.n	8002b1c <_printf_float+0x398>
 8002aaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002aae:	eba2 0903 	sub.w	r9, r2, r3
 8002ab2:	9b05      	ldr	r3, [sp, #20]
 8002ab4:	1ad2      	subs	r2, r2, r3
 8002ab6:	4591      	cmp	r9, r2
 8002ab8:	bfa8      	it	ge
 8002aba:	4691      	movge	r9, r2
 8002abc:	f1b9 0f00 	cmp.w	r9, #0
 8002ac0:	dc35      	bgt.n	8002b2e <_printf_float+0x3aa>
 8002ac2:	f04f 0800 	mov.w	r8, #0
 8002ac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002aca:	f104 0a1a 	add.w	sl, r4, #26
 8002ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	eba3 0309 	sub.w	r3, r3, r9
 8002ad8:	4543      	cmp	r3, r8
 8002ada:	f77f af79 	ble.w	80029d0 <_printf_float+0x24c>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	47b8      	blx	r7
 8002ae8:	3001      	adds	r0, #1
 8002aea:	f43f aeaa 	beq.w	8002842 <_printf_float+0xbe>
 8002aee:	f108 0801 	add.w	r8, r8, #1
 8002af2:	e7ec      	b.n	8002ace <_printf_float+0x34a>
 8002af4:	4613      	mov	r3, r2
 8002af6:	4631      	mov	r1, r6
 8002af8:	4642      	mov	r2, r8
 8002afa:	4628      	mov	r0, r5
 8002afc:	47b8      	blx	r7
 8002afe:	3001      	adds	r0, #1
 8002b00:	d1c0      	bne.n	8002a84 <_printf_float+0x300>
 8002b02:	e69e      	b.n	8002842 <_printf_float+0xbe>
 8002b04:	2301      	movs	r3, #1
 8002b06:	4631      	mov	r1, r6
 8002b08:	4628      	mov	r0, r5
 8002b0a:	9205      	str	r2, [sp, #20]
 8002b0c:	47b8      	blx	r7
 8002b0e:	3001      	adds	r0, #1
 8002b10:	f43f ae97 	beq.w	8002842 <_printf_float+0xbe>
 8002b14:	9a05      	ldr	r2, [sp, #20]
 8002b16:	f10b 0b01 	add.w	fp, fp, #1
 8002b1a:	e7b9      	b.n	8002a90 <_printf_float+0x30c>
 8002b1c:	ee18 3a10 	vmov	r3, s16
 8002b20:	4652      	mov	r2, sl
 8002b22:	4631      	mov	r1, r6
 8002b24:	4628      	mov	r0, r5
 8002b26:	47b8      	blx	r7
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d1be      	bne.n	8002aaa <_printf_float+0x326>
 8002b2c:	e689      	b.n	8002842 <_printf_float+0xbe>
 8002b2e:	9a05      	ldr	r2, [sp, #20]
 8002b30:	464b      	mov	r3, r9
 8002b32:	4442      	add	r2, r8
 8002b34:	4631      	mov	r1, r6
 8002b36:	4628      	mov	r0, r5
 8002b38:	47b8      	blx	r7
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	d1c1      	bne.n	8002ac2 <_printf_float+0x33e>
 8002b3e:	e680      	b.n	8002842 <_printf_float+0xbe>
 8002b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b42:	2a01      	cmp	r2, #1
 8002b44:	dc01      	bgt.n	8002b4a <_printf_float+0x3c6>
 8002b46:	07db      	lsls	r3, r3, #31
 8002b48:	d53a      	bpl.n	8002bc0 <_printf_float+0x43c>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	4642      	mov	r2, r8
 8002b4e:	4631      	mov	r1, r6
 8002b50:	4628      	mov	r0, r5
 8002b52:	47b8      	blx	r7
 8002b54:	3001      	adds	r0, #1
 8002b56:	f43f ae74 	beq.w	8002842 <_printf_float+0xbe>
 8002b5a:	ee18 3a10 	vmov	r3, s16
 8002b5e:	4652      	mov	r2, sl
 8002b60:	4631      	mov	r1, r6
 8002b62:	4628      	mov	r0, r5
 8002b64:	47b8      	blx	r7
 8002b66:	3001      	adds	r0, #1
 8002b68:	f43f ae6b 	beq.w	8002842 <_printf_float+0xbe>
 8002b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b70:	2200      	movs	r2, #0
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8002b78:	f7fd ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b7c:	b9d8      	cbnz	r0, 8002bb6 <_printf_float+0x432>
 8002b7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002b82:	f108 0201 	add.w	r2, r8, #1
 8002b86:	4631      	mov	r1, r6
 8002b88:	4628      	mov	r0, r5
 8002b8a:	47b8      	blx	r7
 8002b8c:	3001      	adds	r0, #1
 8002b8e:	d10e      	bne.n	8002bae <_printf_float+0x42a>
 8002b90:	e657      	b.n	8002842 <_printf_float+0xbe>
 8002b92:	2301      	movs	r3, #1
 8002b94:	4652      	mov	r2, sl
 8002b96:	4631      	mov	r1, r6
 8002b98:	4628      	mov	r0, r5
 8002b9a:	47b8      	blx	r7
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	f43f ae50 	beq.w	8002842 <_printf_float+0xbe>
 8002ba2:	f108 0801 	add.w	r8, r8, #1
 8002ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	4543      	cmp	r3, r8
 8002bac:	dcf1      	bgt.n	8002b92 <_printf_float+0x40e>
 8002bae:	464b      	mov	r3, r9
 8002bb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002bb4:	e6da      	b.n	800296c <_printf_float+0x1e8>
 8002bb6:	f04f 0800 	mov.w	r8, #0
 8002bba:	f104 0a1a 	add.w	sl, r4, #26
 8002bbe:	e7f2      	b.n	8002ba6 <_printf_float+0x422>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	4642      	mov	r2, r8
 8002bc4:	e7df      	b.n	8002b86 <_printf_float+0x402>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	464a      	mov	r2, r9
 8002bca:	4631      	mov	r1, r6
 8002bcc:	4628      	mov	r0, r5
 8002bce:	47b8      	blx	r7
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	f43f ae36 	beq.w	8002842 <_printf_float+0xbe>
 8002bd6:	f108 0801 	add.w	r8, r8, #1
 8002bda:	68e3      	ldr	r3, [r4, #12]
 8002bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bde:	1a5b      	subs	r3, r3, r1
 8002be0:	4543      	cmp	r3, r8
 8002be2:	dcf0      	bgt.n	8002bc6 <_printf_float+0x442>
 8002be4:	e6f8      	b.n	80029d8 <_printf_float+0x254>
 8002be6:	f04f 0800 	mov.w	r8, #0
 8002bea:	f104 0919 	add.w	r9, r4, #25
 8002bee:	e7f4      	b.n	8002bda <_printf_float+0x456>

08002bf0 <_printf_common>:
 8002bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf4:	4616      	mov	r6, r2
 8002bf6:	4699      	mov	r9, r3
 8002bf8:	688a      	ldr	r2, [r1, #8]
 8002bfa:	690b      	ldr	r3, [r1, #16]
 8002bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bfb8      	it	lt
 8002c04:	4613      	movlt	r3, r2
 8002c06:	6033      	str	r3, [r6, #0]
 8002c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c0c:	4607      	mov	r7, r0
 8002c0e:	460c      	mov	r4, r1
 8002c10:	b10a      	cbz	r2, 8002c16 <_printf_common+0x26>
 8002c12:	3301      	adds	r3, #1
 8002c14:	6033      	str	r3, [r6, #0]
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	0699      	lsls	r1, r3, #26
 8002c1a:	bf42      	ittt	mi
 8002c1c:	6833      	ldrmi	r3, [r6, #0]
 8002c1e:	3302      	addmi	r3, #2
 8002c20:	6033      	strmi	r3, [r6, #0]
 8002c22:	6825      	ldr	r5, [r4, #0]
 8002c24:	f015 0506 	ands.w	r5, r5, #6
 8002c28:	d106      	bne.n	8002c38 <_printf_common+0x48>
 8002c2a:	f104 0a19 	add.w	sl, r4, #25
 8002c2e:	68e3      	ldr	r3, [r4, #12]
 8002c30:	6832      	ldr	r2, [r6, #0]
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	42ab      	cmp	r3, r5
 8002c36:	dc26      	bgt.n	8002c86 <_printf_common+0x96>
 8002c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c3c:	1e13      	subs	r3, r2, #0
 8002c3e:	6822      	ldr	r2, [r4, #0]
 8002c40:	bf18      	it	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	0692      	lsls	r2, r2, #26
 8002c46:	d42b      	bmi.n	8002ca0 <_printf_common+0xb0>
 8002c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	4638      	mov	r0, r7
 8002c50:	47c0      	blx	r8
 8002c52:	3001      	adds	r0, #1
 8002c54:	d01e      	beq.n	8002c94 <_printf_common+0xa4>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	6922      	ldr	r2, [r4, #16]
 8002c5a:	f003 0306 	and.w	r3, r3, #6
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	bf02      	ittt	eq
 8002c62:	68e5      	ldreq	r5, [r4, #12]
 8002c64:	6833      	ldreq	r3, [r6, #0]
 8002c66:	1aed      	subeq	r5, r5, r3
 8002c68:	68a3      	ldr	r3, [r4, #8]
 8002c6a:	bf0c      	ite	eq
 8002c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c70:	2500      	movne	r5, #0
 8002c72:	4293      	cmp	r3, r2
 8002c74:	bfc4      	itt	gt
 8002c76:	1a9b      	subgt	r3, r3, r2
 8002c78:	18ed      	addgt	r5, r5, r3
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	341a      	adds	r4, #26
 8002c7e:	42b5      	cmp	r5, r6
 8002c80:	d11a      	bne.n	8002cb8 <_printf_common+0xc8>
 8002c82:	2000      	movs	r0, #0
 8002c84:	e008      	b.n	8002c98 <_printf_common+0xa8>
 8002c86:	2301      	movs	r3, #1
 8002c88:	4652      	mov	r2, sl
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	4638      	mov	r0, r7
 8002c8e:	47c0      	blx	r8
 8002c90:	3001      	adds	r0, #1
 8002c92:	d103      	bne.n	8002c9c <_printf_common+0xac>
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c9c:	3501      	adds	r5, #1
 8002c9e:	e7c6      	b.n	8002c2e <_printf_common+0x3e>
 8002ca0:	18e1      	adds	r1, r4, r3
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	2030      	movs	r0, #48	; 0x30
 8002ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002caa:	4422      	add	r2, r4
 8002cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	e7c7      	b.n	8002c48 <_printf_common+0x58>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	4622      	mov	r2, r4
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	4638      	mov	r0, r7
 8002cc0:	47c0      	blx	r8
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	d0e6      	beq.n	8002c94 <_printf_common+0xa4>
 8002cc6:	3601      	adds	r6, #1
 8002cc8:	e7d9      	b.n	8002c7e <_printf_common+0x8e>
	...

08002ccc <_printf_i>:
 8002ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd0:	7e0f      	ldrb	r7, [r1, #24]
 8002cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cd4:	2f78      	cmp	r7, #120	; 0x78
 8002cd6:	4691      	mov	r9, r2
 8002cd8:	4680      	mov	r8, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	469a      	mov	sl, r3
 8002cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ce2:	d807      	bhi.n	8002cf4 <_printf_i+0x28>
 8002ce4:	2f62      	cmp	r7, #98	; 0x62
 8002ce6:	d80a      	bhi.n	8002cfe <_printf_i+0x32>
 8002ce8:	2f00      	cmp	r7, #0
 8002cea:	f000 80d4 	beq.w	8002e96 <_printf_i+0x1ca>
 8002cee:	2f58      	cmp	r7, #88	; 0x58
 8002cf0:	f000 80c0 	beq.w	8002e74 <_printf_i+0x1a8>
 8002cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cfc:	e03a      	b.n	8002d74 <_printf_i+0xa8>
 8002cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d02:	2b15      	cmp	r3, #21
 8002d04:	d8f6      	bhi.n	8002cf4 <_printf_i+0x28>
 8002d06:	a101      	add	r1, pc, #4	; (adr r1, 8002d0c <_printf_i+0x40>)
 8002d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d0c:	08002d65 	.word	0x08002d65
 8002d10:	08002d79 	.word	0x08002d79
 8002d14:	08002cf5 	.word	0x08002cf5
 8002d18:	08002cf5 	.word	0x08002cf5
 8002d1c:	08002cf5 	.word	0x08002cf5
 8002d20:	08002cf5 	.word	0x08002cf5
 8002d24:	08002d79 	.word	0x08002d79
 8002d28:	08002cf5 	.word	0x08002cf5
 8002d2c:	08002cf5 	.word	0x08002cf5
 8002d30:	08002cf5 	.word	0x08002cf5
 8002d34:	08002cf5 	.word	0x08002cf5
 8002d38:	08002e7d 	.word	0x08002e7d
 8002d3c:	08002da5 	.word	0x08002da5
 8002d40:	08002e37 	.word	0x08002e37
 8002d44:	08002cf5 	.word	0x08002cf5
 8002d48:	08002cf5 	.word	0x08002cf5
 8002d4c:	08002e9f 	.word	0x08002e9f
 8002d50:	08002cf5 	.word	0x08002cf5
 8002d54:	08002da5 	.word	0x08002da5
 8002d58:	08002cf5 	.word	0x08002cf5
 8002d5c:	08002cf5 	.word	0x08002cf5
 8002d60:	08002e3f 	.word	0x08002e3f
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	1d1a      	adds	r2, r3, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	602a      	str	r2, [r5, #0]
 8002d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d74:	2301      	movs	r3, #1
 8002d76:	e09f      	b.n	8002eb8 <_printf_i+0x1ec>
 8002d78:	6820      	ldr	r0, [r4, #0]
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	0607      	lsls	r7, r0, #24
 8002d7e:	f103 0104 	add.w	r1, r3, #4
 8002d82:	6029      	str	r1, [r5, #0]
 8002d84:	d501      	bpl.n	8002d8a <_printf_i+0xbe>
 8002d86:	681e      	ldr	r6, [r3, #0]
 8002d88:	e003      	b.n	8002d92 <_printf_i+0xc6>
 8002d8a:	0646      	lsls	r6, r0, #25
 8002d8c:	d5fb      	bpl.n	8002d86 <_printf_i+0xba>
 8002d8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d92:	2e00      	cmp	r6, #0
 8002d94:	da03      	bge.n	8002d9e <_printf_i+0xd2>
 8002d96:	232d      	movs	r3, #45	; 0x2d
 8002d98:	4276      	negs	r6, r6
 8002d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d9e:	485a      	ldr	r0, [pc, #360]	; (8002f08 <_printf_i+0x23c>)
 8002da0:	230a      	movs	r3, #10
 8002da2:	e012      	b.n	8002dca <_printf_i+0xfe>
 8002da4:	682b      	ldr	r3, [r5, #0]
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1d19      	adds	r1, r3, #4
 8002daa:	6029      	str	r1, [r5, #0]
 8002dac:	0605      	lsls	r5, r0, #24
 8002dae:	d501      	bpl.n	8002db4 <_printf_i+0xe8>
 8002db0:	681e      	ldr	r6, [r3, #0]
 8002db2:	e002      	b.n	8002dba <_printf_i+0xee>
 8002db4:	0641      	lsls	r1, r0, #25
 8002db6:	d5fb      	bpl.n	8002db0 <_printf_i+0xe4>
 8002db8:	881e      	ldrh	r6, [r3, #0]
 8002dba:	4853      	ldr	r0, [pc, #332]	; (8002f08 <_printf_i+0x23c>)
 8002dbc:	2f6f      	cmp	r7, #111	; 0x6f
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2308      	moveq	r3, #8
 8002dc2:	230a      	movne	r3, #10
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dca:	6865      	ldr	r5, [r4, #4]
 8002dcc:	60a5      	str	r5, [r4, #8]
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	bfa2      	ittt	ge
 8002dd2:	6821      	ldrge	r1, [r4, #0]
 8002dd4:	f021 0104 	bicge.w	r1, r1, #4
 8002dd8:	6021      	strge	r1, [r4, #0]
 8002dda:	b90e      	cbnz	r6, 8002de0 <_printf_i+0x114>
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	d04b      	beq.n	8002e78 <_printf_i+0x1ac>
 8002de0:	4615      	mov	r5, r2
 8002de2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002de6:	fb03 6711 	mls	r7, r3, r1, r6
 8002dea:	5dc7      	ldrb	r7, [r0, r7]
 8002dec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002df0:	4637      	mov	r7, r6
 8002df2:	42bb      	cmp	r3, r7
 8002df4:	460e      	mov	r6, r1
 8002df6:	d9f4      	bls.n	8002de2 <_printf_i+0x116>
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d10b      	bne.n	8002e14 <_printf_i+0x148>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	07de      	lsls	r6, r3, #31
 8002e00:	d508      	bpl.n	8002e14 <_printf_i+0x148>
 8002e02:	6923      	ldr	r3, [r4, #16]
 8002e04:	6861      	ldr	r1, [r4, #4]
 8002e06:	4299      	cmp	r1, r3
 8002e08:	bfde      	ittt	le
 8002e0a:	2330      	movle	r3, #48	; 0x30
 8002e0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e14:	1b52      	subs	r2, r2, r5
 8002e16:	6122      	str	r2, [r4, #16]
 8002e18:	f8cd a000 	str.w	sl, [sp]
 8002e1c:	464b      	mov	r3, r9
 8002e1e:	aa03      	add	r2, sp, #12
 8002e20:	4621      	mov	r1, r4
 8002e22:	4640      	mov	r0, r8
 8002e24:	f7ff fee4 	bl	8002bf0 <_printf_common>
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d14a      	bne.n	8002ec2 <_printf_i+0x1f6>
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	b004      	add	sp, #16
 8002e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	f043 0320 	orr.w	r3, r3, #32
 8002e3c:	6023      	str	r3, [r4, #0]
 8002e3e:	4833      	ldr	r0, [pc, #204]	; (8002f0c <_printf_i+0x240>)
 8002e40:	2778      	movs	r7, #120	; 0x78
 8002e42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	6829      	ldr	r1, [r5, #0]
 8002e4a:	061f      	lsls	r7, r3, #24
 8002e4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e50:	d402      	bmi.n	8002e58 <_printf_i+0x18c>
 8002e52:	065f      	lsls	r7, r3, #25
 8002e54:	bf48      	it	mi
 8002e56:	b2b6      	uxthmi	r6, r6
 8002e58:	07df      	lsls	r7, r3, #31
 8002e5a:	bf48      	it	mi
 8002e5c:	f043 0320 	orrmi.w	r3, r3, #32
 8002e60:	6029      	str	r1, [r5, #0]
 8002e62:	bf48      	it	mi
 8002e64:	6023      	strmi	r3, [r4, #0]
 8002e66:	b91e      	cbnz	r6, 8002e70 <_printf_i+0x1a4>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	f023 0320 	bic.w	r3, r3, #32
 8002e6e:	6023      	str	r3, [r4, #0]
 8002e70:	2310      	movs	r3, #16
 8002e72:	e7a7      	b.n	8002dc4 <_printf_i+0xf8>
 8002e74:	4824      	ldr	r0, [pc, #144]	; (8002f08 <_printf_i+0x23c>)
 8002e76:	e7e4      	b.n	8002e42 <_printf_i+0x176>
 8002e78:	4615      	mov	r5, r2
 8002e7a:	e7bd      	b.n	8002df8 <_printf_i+0x12c>
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	6826      	ldr	r6, [r4, #0]
 8002e80:	6961      	ldr	r1, [r4, #20]
 8002e82:	1d18      	adds	r0, r3, #4
 8002e84:	6028      	str	r0, [r5, #0]
 8002e86:	0635      	lsls	r5, r6, #24
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	d501      	bpl.n	8002e90 <_printf_i+0x1c4>
 8002e8c:	6019      	str	r1, [r3, #0]
 8002e8e:	e002      	b.n	8002e96 <_printf_i+0x1ca>
 8002e90:	0670      	lsls	r0, r6, #25
 8002e92:	d5fb      	bpl.n	8002e8c <_printf_i+0x1c0>
 8002e94:	8019      	strh	r1, [r3, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	6123      	str	r3, [r4, #16]
 8002e9a:	4615      	mov	r5, r2
 8002e9c:	e7bc      	b.n	8002e18 <_printf_i+0x14c>
 8002e9e:	682b      	ldr	r3, [r5, #0]
 8002ea0:	1d1a      	adds	r2, r3, #4
 8002ea2:	602a      	str	r2, [r5, #0]
 8002ea4:	681d      	ldr	r5, [r3, #0]
 8002ea6:	6862      	ldr	r2, [r4, #4]
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f7fd f990 	bl	80001d0 <memchr>
 8002eb0:	b108      	cbz	r0, 8002eb6 <_printf_i+0x1ea>
 8002eb2:	1b40      	subs	r0, r0, r5
 8002eb4:	6060      	str	r0, [r4, #4]
 8002eb6:	6863      	ldr	r3, [r4, #4]
 8002eb8:	6123      	str	r3, [r4, #16]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ec0:	e7aa      	b.n	8002e18 <_printf_i+0x14c>
 8002ec2:	6923      	ldr	r3, [r4, #16]
 8002ec4:	462a      	mov	r2, r5
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	4640      	mov	r0, r8
 8002eca:	47d0      	blx	sl
 8002ecc:	3001      	adds	r0, #1
 8002ece:	d0ad      	beq.n	8002e2c <_printf_i+0x160>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	079b      	lsls	r3, r3, #30
 8002ed4:	d413      	bmi.n	8002efe <_printf_i+0x232>
 8002ed6:	68e0      	ldr	r0, [r4, #12]
 8002ed8:	9b03      	ldr	r3, [sp, #12]
 8002eda:	4298      	cmp	r0, r3
 8002edc:	bfb8      	it	lt
 8002ede:	4618      	movlt	r0, r3
 8002ee0:	e7a6      	b.n	8002e30 <_printf_i+0x164>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	4632      	mov	r2, r6
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	4640      	mov	r0, r8
 8002eea:	47d0      	blx	sl
 8002eec:	3001      	adds	r0, #1
 8002eee:	d09d      	beq.n	8002e2c <_printf_i+0x160>
 8002ef0:	3501      	adds	r5, #1
 8002ef2:	68e3      	ldr	r3, [r4, #12]
 8002ef4:	9903      	ldr	r1, [sp, #12]
 8002ef6:	1a5b      	subs	r3, r3, r1
 8002ef8:	42ab      	cmp	r3, r5
 8002efa:	dcf2      	bgt.n	8002ee2 <_printf_i+0x216>
 8002efc:	e7eb      	b.n	8002ed6 <_printf_i+0x20a>
 8002efe:	2500      	movs	r5, #0
 8002f00:	f104 0619 	add.w	r6, r4, #25
 8002f04:	e7f5      	b.n	8002ef2 <_printf_i+0x226>
 8002f06:	bf00      	nop
 8002f08:	080053e6 	.word	0x080053e6
 8002f0c:	080053f7 	.word	0x080053f7

08002f10 <std>:
 8002f10:	2300      	movs	r3, #0
 8002f12:	b510      	push	{r4, lr}
 8002f14:	4604      	mov	r4, r0
 8002f16:	e9c0 3300 	strd	r3, r3, [r0]
 8002f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f1e:	6083      	str	r3, [r0, #8]
 8002f20:	8181      	strh	r1, [r0, #12]
 8002f22:	6643      	str	r3, [r0, #100]	; 0x64
 8002f24:	81c2      	strh	r2, [r0, #14]
 8002f26:	6183      	str	r3, [r0, #24]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	305c      	adds	r0, #92	; 0x5c
 8002f2e:	f000 f914 	bl	800315a <memset>
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <std+0x58>)
 8002f34:	6263      	str	r3, [r4, #36]	; 0x24
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <std+0x5c>)
 8002f38:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <std+0x60>)
 8002f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <std+0x64>)
 8002f40:	6323      	str	r3, [r4, #48]	; 0x30
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <std+0x68>)
 8002f44:	6224      	str	r4, [r4, #32]
 8002f46:	429c      	cmp	r4, r3
 8002f48:	d006      	beq.n	8002f58 <std+0x48>
 8002f4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f4e:	4294      	cmp	r4, r2
 8002f50:	d002      	beq.n	8002f58 <std+0x48>
 8002f52:	33d0      	adds	r3, #208	; 0xd0
 8002f54:	429c      	cmp	r4, r3
 8002f56:	d105      	bne.n	8002f64 <std+0x54>
 8002f58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f60:	f000 b978 	b.w	8003254 <__retarget_lock_init_recursive>
 8002f64:	bd10      	pop	{r4, pc}
 8002f66:	bf00      	nop
 8002f68:	080030d5 	.word	0x080030d5
 8002f6c:	080030f7 	.word	0x080030f7
 8002f70:	0800312f 	.word	0x0800312f
 8002f74:	08003153 	.word	0x08003153
 8002f78:	2000027c 	.word	0x2000027c

08002f7c <stdio_exit_handler>:
 8002f7c:	4a02      	ldr	r2, [pc, #8]	; (8002f88 <stdio_exit_handler+0xc>)
 8002f7e:	4903      	ldr	r1, [pc, #12]	; (8002f8c <stdio_exit_handler+0x10>)
 8002f80:	4803      	ldr	r0, [pc, #12]	; (8002f90 <stdio_exit_handler+0x14>)
 8002f82:	f000 b869 	b.w	8003058 <_fwalk_sglue>
 8002f86:	bf00      	nop
 8002f88:	2000000c 	.word	0x2000000c
 8002f8c:	08004c09 	.word	0x08004c09
 8002f90:	20000018 	.word	0x20000018

08002f94 <cleanup_stdio>:
 8002f94:	6841      	ldr	r1, [r0, #4]
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <cleanup_stdio+0x34>)
 8002f98:	4299      	cmp	r1, r3
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	d001      	beq.n	8002fa4 <cleanup_stdio+0x10>
 8002fa0:	f001 fe32 	bl	8004c08 <_fflush_r>
 8002fa4:	68a1      	ldr	r1, [r4, #8]
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <cleanup_stdio+0x38>)
 8002fa8:	4299      	cmp	r1, r3
 8002faa:	d002      	beq.n	8002fb2 <cleanup_stdio+0x1e>
 8002fac:	4620      	mov	r0, r4
 8002fae:	f001 fe2b 	bl	8004c08 <_fflush_r>
 8002fb2:	68e1      	ldr	r1, [r4, #12]
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <cleanup_stdio+0x3c>)
 8002fb6:	4299      	cmp	r1, r3
 8002fb8:	d004      	beq.n	8002fc4 <cleanup_stdio+0x30>
 8002fba:	4620      	mov	r0, r4
 8002fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc0:	f001 be22 	b.w	8004c08 <_fflush_r>
 8002fc4:	bd10      	pop	{r4, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000027c 	.word	0x2000027c
 8002fcc:	200002e4 	.word	0x200002e4
 8002fd0:	2000034c 	.word	0x2000034c

08002fd4 <global_stdio_init.part.0>:
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <global_stdio_init.part.0+0x30>)
 8002fd8:	4c0b      	ldr	r4, [pc, #44]	; (8003008 <global_stdio_init.part.0+0x34>)
 8002fda:	4a0c      	ldr	r2, [pc, #48]	; (800300c <global_stdio_init.part.0+0x38>)
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	4620      	mov	r0, r4
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	f7ff ff94 	bl	8002f10 <std>
 8002fe8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fec:	2201      	movs	r2, #1
 8002fee:	2109      	movs	r1, #9
 8002ff0:	f7ff ff8e 	bl	8002f10 <std>
 8002ff4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ffe:	2112      	movs	r1, #18
 8003000:	f7ff bf86 	b.w	8002f10 <std>
 8003004:	200003b4 	.word	0x200003b4
 8003008:	2000027c 	.word	0x2000027c
 800300c:	08002f7d 	.word	0x08002f7d

08003010 <__sfp_lock_acquire>:
 8003010:	4801      	ldr	r0, [pc, #4]	; (8003018 <__sfp_lock_acquire+0x8>)
 8003012:	f000 b920 	b.w	8003256 <__retarget_lock_acquire_recursive>
 8003016:	bf00      	nop
 8003018:	200003bd 	.word	0x200003bd

0800301c <__sfp_lock_release>:
 800301c:	4801      	ldr	r0, [pc, #4]	; (8003024 <__sfp_lock_release+0x8>)
 800301e:	f000 b91b 	b.w	8003258 <__retarget_lock_release_recursive>
 8003022:	bf00      	nop
 8003024:	200003bd 	.word	0x200003bd

08003028 <__sinit>:
 8003028:	b510      	push	{r4, lr}
 800302a:	4604      	mov	r4, r0
 800302c:	f7ff fff0 	bl	8003010 <__sfp_lock_acquire>
 8003030:	6a23      	ldr	r3, [r4, #32]
 8003032:	b11b      	cbz	r3, 800303c <__sinit+0x14>
 8003034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003038:	f7ff bff0 	b.w	800301c <__sfp_lock_release>
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__sinit+0x28>)
 800303e:	6223      	str	r3, [r4, #32]
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__sinit+0x2c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f5      	bne.n	8003034 <__sinit+0xc>
 8003048:	f7ff ffc4 	bl	8002fd4 <global_stdio_init.part.0>
 800304c:	e7f2      	b.n	8003034 <__sinit+0xc>
 800304e:	bf00      	nop
 8003050:	08002f95 	.word	0x08002f95
 8003054:	200003b4 	.word	0x200003b4

08003058 <_fwalk_sglue>:
 8003058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800305c:	4607      	mov	r7, r0
 800305e:	4688      	mov	r8, r1
 8003060:	4614      	mov	r4, r2
 8003062:	2600      	movs	r6, #0
 8003064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003068:	f1b9 0901 	subs.w	r9, r9, #1
 800306c:	d505      	bpl.n	800307a <_fwalk_sglue+0x22>
 800306e:	6824      	ldr	r4, [r4, #0]
 8003070:	2c00      	cmp	r4, #0
 8003072:	d1f7      	bne.n	8003064 <_fwalk_sglue+0xc>
 8003074:	4630      	mov	r0, r6
 8003076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800307a:	89ab      	ldrh	r3, [r5, #12]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d907      	bls.n	8003090 <_fwalk_sglue+0x38>
 8003080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003084:	3301      	adds	r3, #1
 8003086:	d003      	beq.n	8003090 <_fwalk_sglue+0x38>
 8003088:	4629      	mov	r1, r5
 800308a:	4638      	mov	r0, r7
 800308c:	47c0      	blx	r8
 800308e:	4306      	orrs	r6, r0
 8003090:	3568      	adds	r5, #104	; 0x68
 8003092:	e7e9      	b.n	8003068 <_fwalk_sglue+0x10>

08003094 <siprintf>:
 8003094:	b40e      	push	{r1, r2, r3}
 8003096:	b500      	push	{lr}
 8003098:	b09c      	sub	sp, #112	; 0x70
 800309a:	ab1d      	add	r3, sp, #116	; 0x74
 800309c:	9002      	str	r0, [sp, #8]
 800309e:	9006      	str	r0, [sp, #24]
 80030a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030a4:	4809      	ldr	r0, [pc, #36]	; (80030cc <siprintf+0x38>)
 80030a6:	9107      	str	r1, [sp, #28]
 80030a8:	9104      	str	r1, [sp, #16]
 80030aa:	4909      	ldr	r1, [pc, #36]	; (80030d0 <siprintf+0x3c>)
 80030ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80030b0:	9105      	str	r1, [sp, #20]
 80030b2:	6800      	ldr	r0, [r0, #0]
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	a902      	add	r1, sp, #8
 80030b8:	f001 fc22 	bl	8004900 <_svfiprintf_r>
 80030bc:	9b02      	ldr	r3, [sp, #8]
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	b01c      	add	sp, #112	; 0x70
 80030c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030c8:	b003      	add	sp, #12
 80030ca:	4770      	bx	lr
 80030cc:	20000064 	.word	0x20000064
 80030d0:	ffff0208 	.word	0xffff0208

080030d4 <__sread>:
 80030d4:	b510      	push	{r4, lr}
 80030d6:	460c      	mov	r4, r1
 80030d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030dc:	f000 f86c 	bl	80031b8 <_read_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	bfab      	itete	ge
 80030e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030e6:	89a3      	ldrhlt	r3, [r4, #12]
 80030e8:	181b      	addge	r3, r3, r0
 80030ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030ee:	bfac      	ite	ge
 80030f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80030f2:	81a3      	strhlt	r3, [r4, #12]
 80030f4:	bd10      	pop	{r4, pc}

080030f6 <__swrite>:
 80030f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fa:	461f      	mov	r7, r3
 80030fc:	898b      	ldrh	r3, [r1, #12]
 80030fe:	05db      	lsls	r3, r3, #23
 8003100:	4605      	mov	r5, r0
 8003102:	460c      	mov	r4, r1
 8003104:	4616      	mov	r6, r2
 8003106:	d505      	bpl.n	8003114 <__swrite+0x1e>
 8003108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800310c:	2302      	movs	r3, #2
 800310e:	2200      	movs	r2, #0
 8003110:	f000 f840 	bl	8003194 <_lseek_r>
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800311a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800311e:	81a3      	strh	r3, [r4, #12]
 8003120:	4632      	mov	r2, r6
 8003122:	463b      	mov	r3, r7
 8003124:	4628      	mov	r0, r5
 8003126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800312a:	f000 b857 	b.w	80031dc <_write_r>

0800312e <__sseek>:
 800312e:	b510      	push	{r4, lr}
 8003130:	460c      	mov	r4, r1
 8003132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003136:	f000 f82d 	bl	8003194 <_lseek_r>
 800313a:	1c43      	adds	r3, r0, #1
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	bf15      	itete	ne
 8003140:	6560      	strne	r0, [r4, #84]	; 0x54
 8003142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800314a:	81a3      	strheq	r3, [r4, #12]
 800314c:	bf18      	it	ne
 800314e:	81a3      	strhne	r3, [r4, #12]
 8003150:	bd10      	pop	{r4, pc}

08003152 <__sclose>:
 8003152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003156:	f000 b80d 	b.w	8003174 <_close_r>

0800315a <memset>:
 800315a:	4402      	add	r2, r0
 800315c:	4603      	mov	r3, r0
 800315e:	4293      	cmp	r3, r2
 8003160:	d100      	bne.n	8003164 <memset+0xa>
 8003162:	4770      	bx	lr
 8003164:	f803 1b01 	strb.w	r1, [r3], #1
 8003168:	e7f9      	b.n	800315e <memset+0x4>
	...

0800316c <_localeconv_r>:
 800316c:	4800      	ldr	r0, [pc, #0]	; (8003170 <_localeconv_r+0x4>)
 800316e:	4770      	bx	lr
 8003170:	20000158 	.word	0x20000158

08003174 <_close_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4d06      	ldr	r5, [pc, #24]	; (8003190 <_close_r+0x1c>)
 8003178:	2300      	movs	r3, #0
 800317a:	4604      	mov	r4, r0
 800317c:	4608      	mov	r0, r1
 800317e:	602b      	str	r3, [r5, #0]
 8003180:	f7fe fa35 	bl	80015ee <_close>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_close_r+0x1a>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_close_r+0x1a>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	200003b8 	.word	0x200003b8

08003194 <_lseek_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	4d07      	ldr	r5, [pc, #28]	; (80031b4 <_lseek_r+0x20>)
 8003198:	4604      	mov	r4, r0
 800319a:	4608      	mov	r0, r1
 800319c:	4611      	mov	r1, r2
 800319e:	2200      	movs	r2, #0
 80031a0:	602a      	str	r2, [r5, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f7fe fa4a 	bl	800163c <_lseek>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d102      	bne.n	80031b2 <_lseek_r+0x1e>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	b103      	cbz	r3, 80031b2 <_lseek_r+0x1e>
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	200003b8 	.word	0x200003b8

080031b8 <_read_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4d07      	ldr	r5, [pc, #28]	; (80031d8 <_read_r+0x20>)
 80031bc:	4604      	mov	r4, r0
 80031be:	4608      	mov	r0, r1
 80031c0:	4611      	mov	r1, r2
 80031c2:	2200      	movs	r2, #0
 80031c4:	602a      	str	r2, [r5, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f7fe f9f4 	bl	80015b4 <_read>
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d102      	bne.n	80031d6 <_read_r+0x1e>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	b103      	cbz	r3, 80031d6 <_read_r+0x1e>
 80031d4:	6023      	str	r3, [r4, #0]
 80031d6:	bd38      	pop	{r3, r4, r5, pc}
 80031d8:	200003b8 	.word	0x200003b8

080031dc <_write_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4d07      	ldr	r5, [pc, #28]	; (80031fc <_write_r+0x20>)
 80031e0:	4604      	mov	r4, r0
 80031e2:	4608      	mov	r0, r1
 80031e4:	4611      	mov	r1, r2
 80031e6:	2200      	movs	r2, #0
 80031e8:	602a      	str	r2, [r5, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f7fd fdeb 	bl	8000dc6 <_write>
 80031f0:	1c43      	adds	r3, r0, #1
 80031f2:	d102      	bne.n	80031fa <_write_r+0x1e>
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	b103      	cbz	r3, 80031fa <_write_r+0x1e>
 80031f8:	6023      	str	r3, [r4, #0]
 80031fa:	bd38      	pop	{r3, r4, r5, pc}
 80031fc:	200003b8 	.word	0x200003b8

08003200 <__errno>:
 8003200:	4b01      	ldr	r3, [pc, #4]	; (8003208 <__errno+0x8>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000064 	.word	0x20000064

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	4d0d      	ldr	r5, [pc, #52]	; (8003244 <__libc_init_array+0x38>)
 8003210:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003212:	1b64      	subs	r4, r4, r5
 8003214:	10a4      	asrs	r4, r4, #2
 8003216:	2600      	movs	r6, #0
 8003218:	42a6      	cmp	r6, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	4d0b      	ldr	r5, [pc, #44]	; (800324c <__libc_init_array+0x40>)
 800321e:	4c0c      	ldr	r4, [pc, #48]	; (8003250 <__libc_init_array+0x44>)
 8003220:	f002 f896 	bl	8005350 <_init>
 8003224:	1b64      	subs	r4, r4, r5
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	2600      	movs	r6, #0
 800322a:	42a6      	cmp	r6, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f855 3b04 	ldr.w	r3, [r5], #4
 8003234:	4798      	blx	r3
 8003236:	3601      	adds	r6, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f855 3b04 	ldr.w	r3, [r5], #4
 800323e:	4798      	blx	r3
 8003240:	3601      	adds	r6, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08005744 	.word	0x08005744
 8003248:	08005744 	.word	0x08005744
 800324c:	08005744 	.word	0x08005744
 8003250:	08005748 	.word	0x08005748

08003254 <__retarget_lock_init_recursive>:
 8003254:	4770      	bx	lr

08003256 <__retarget_lock_acquire_recursive>:
 8003256:	4770      	bx	lr

08003258 <__retarget_lock_release_recursive>:
 8003258:	4770      	bx	lr

0800325a <quorem>:
 800325a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325e:	6903      	ldr	r3, [r0, #16]
 8003260:	690c      	ldr	r4, [r1, #16]
 8003262:	42a3      	cmp	r3, r4
 8003264:	4607      	mov	r7, r0
 8003266:	db7e      	blt.n	8003366 <quorem+0x10c>
 8003268:	3c01      	subs	r4, #1
 800326a:	f101 0814 	add.w	r8, r1, #20
 800326e:	f100 0514 	add.w	r5, r0, #20
 8003272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800327c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003280:	3301      	adds	r3, #1
 8003282:	429a      	cmp	r2, r3
 8003284:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003288:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800328c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003290:	d331      	bcc.n	80032f6 <quorem+0x9c>
 8003292:	f04f 0e00 	mov.w	lr, #0
 8003296:	4640      	mov	r0, r8
 8003298:	46ac      	mov	ip, r5
 800329a:	46f2      	mov	sl, lr
 800329c:	f850 2b04 	ldr.w	r2, [r0], #4
 80032a0:	b293      	uxth	r3, r2
 80032a2:	fb06 e303 	mla	r3, r6, r3, lr
 80032a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80032aa:	0c1a      	lsrs	r2, r3, #16
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	ebaa 0303 	sub.w	r3, sl, r3
 80032b2:	f8dc a000 	ldr.w	sl, [ip]
 80032b6:	fa13 f38a 	uxtah	r3, r3, sl
 80032ba:	fb06 220e 	mla	r2, r6, lr, r2
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	9b00      	ldr	r3, [sp, #0]
 80032c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80032c6:	b292      	uxth	r2, r2
 80032c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80032cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80032d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80032d4:	4581      	cmp	r9, r0
 80032d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032da:	f84c 3b04 	str.w	r3, [ip], #4
 80032de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80032e2:	d2db      	bcs.n	800329c <quorem+0x42>
 80032e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80032e8:	b92b      	cbnz	r3, 80032f6 <quorem+0x9c>
 80032ea:	9b01      	ldr	r3, [sp, #4]
 80032ec:	3b04      	subs	r3, #4
 80032ee:	429d      	cmp	r5, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	d32c      	bcc.n	800334e <quorem+0xf4>
 80032f4:	613c      	str	r4, [r7, #16]
 80032f6:	4638      	mov	r0, r7
 80032f8:	f001 f9a8 	bl	800464c <__mcmp>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	db22      	blt.n	8003346 <quorem+0xec>
 8003300:	3601      	adds	r6, #1
 8003302:	4629      	mov	r1, r5
 8003304:	2000      	movs	r0, #0
 8003306:	f858 2b04 	ldr.w	r2, [r8], #4
 800330a:	f8d1 c000 	ldr.w	ip, [r1]
 800330e:	b293      	uxth	r3, r2
 8003310:	1ac3      	subs	r3, r0, r3
 8003312:	0c12      	lsrs	r2, r2, #16
 8003314:	fa13 f38c 	uxtah	r3, r3, ip
 8003318:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800331c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003320:	b29b      	uxth	r3, r3
 8003322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003326:	45c1      	cmp	r9, r8
 8003328:	f841 3b04 	str.w	r3, [r1], #4
 800332c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003330:	d2e9      	bcs.n	8003306 <quorem+0xac>
 8003332:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800333a:	b922      	cbnz	r2, 8003346 <quorem+0xec>
 800333c:	3b04      	subs	r3, #4
 800333e:	429d      	cmp	r5, r3
 8003340:	461a      	mov	r2, r3
 8003342:	d30a      	bcc.n	800335a <quorem+0x100>
 8003344:	613c      	str	r4, [r7, #16]
 8003346:	4630      	mov	r0, r6
 8003348:	b003      	add	sp, #12
 800334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	3b04      	subs	r3, #4
 8003352:	2a00      	cmp	r2, #0
 8003354:	d1ce      	bne.n	80032f4 <quorem+0x9a>
 8003356:	3c01      	subs	r4, #1
 8003358:	e7c9      	b.n	80032ee <quorem+0x94>
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	3b04      	subs	r3, #4
 800335e:	2a00      	cmp	r2, #0
 8003360:	d1f0      	bne.n	8003344 <quorem+0xea>
 8003362:	3c01      	subs	r4, #1
 8003364:	e7eb      	b.n	800333e <quorem+0xe4>
 8003366:	2000      	movs	r0, #0
 8003368:	e7ee      	b.n	8003348 <quorem+0xee>
 800336a:	0000      	movs	r0, r0
 800336c:	0000      	movs	r0, r0
	...

08003370 <_dtoa_r>:
 8003370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	ed2d 8b04 	vpush	{d8-d9}
 8003378:	69c5      	ldr	r5, [r0, #28]
 800337a:	b093      	sub	sp, #76	; 0x4c
 800337c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003380:	ec57 6b10 	vmov	r6, r7, d0
 8003384:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003388:	9107      	str	r1, [sp, #28]
 800338a:	4604      	mov	r4, r0
 800338c:	920a      	str	r2, [sp, #40]	; 0x28
 800338e:	930d      	str	r3, [sp, #52]	; 0x34
 8003390:	b975      	cbnz	r5, 80033b0 <_dtoa_r+0x40>
 8003392:	2010      	movs	r0, #16
 8003394:	f000 fe2a 	bl	8003fec <malloc>
 8003398:	4602      	mov	r2, r0
 800339a:	61e0      	str	r0, [r4, #28]
 800339c:	b920      	cbnz	r0, 80033a8 <_dtoa_r+0x38>
 800339e:	4bae      	ldr	r3, [pc, #696]	; (8003658 <_dtoa_r+0x2e8>)
 80033a0:	21ef      	movs	r1, #239	; 0xef
 80033a2:	48ae      	ldr	r0, [pc, #696]	; (800365c <_dtoa_r+0x2ec>)
 80033a4:	f001 fc90 	bl	8004cc8 <__assert_func>
 80033a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80033ac:	6005      	str	r5, [r0, #0]
 80033ae:	60c5      	str	r5, [r0, #12]
 80033b0:	69e3      	ldr	r3, [r4, #28]
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	b151      	cbz	r1, 80033cc <_dtoa_r+0x5c>
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	604a      	str	r2, [r1, #4]
 80033ba:	2301      	movs	r3, #1
 80033bc:	4093      	lsls	r3, r2
 80033be:	608b      	str	r3, [r1, #8]
 80033c0:	4620      	mov	r0, r4
 80033c2:	f000 ff07 	bl	80041d4 <_Bfree>
 80033c6:	69e3      	ldr	r3, [r4, #28]
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	1e3b      	subs	r3, r7, #0
 80033ce:	bfbb      	ittet	lt
 80033d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80033d4:	9303      	strlt	r3, [sp, #12]
 80033d6:	2300      	movge	r3, #0
 80033d8:	2201      	movlt	r2, #1
 80033da:	bfac      	ite	ge
 80033dc:	f8c8 3000 	strge.w	r3, [r8]
 80033e0:	f8c8 2000 	strlt.w	r2, [r8]
 80033e4:	4b9e      	ldr	r3, [pc, #632]	; (8003660 <_dtoa_r+0x2f0>)
 80033e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80033ea:	ea33 0308 	bics.w	r3, r3, r8
 80033ee:	d11b      	bne.n	8003428 <_dtoa_r+0xb8>
 80033f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80033f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80033fc:	4333      	orrs	r3, r6
 80033fe:	f000 8593 	beq.w	8003f28 <_dtoa_r+0xbb8>
 8003402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003404:	b963      	cbnz	r3, 8003420 <_dtoa_r+0xb0>
 8003406:	4b97      	ldr	r3, [pc, #604]	; (8003664 <_dtoa_r+0x2f4>)
 8003408:	e027      	b.n	800345a <_dtoa_r+0xea>
 800340a:	4b97      	ldr	r3, [pc, #604]	; (8003668 <_dtoa_r+0x2f8>)
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	3308      	adds	r3, #8
 8003410:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	9800      	ldr	r0, [sp, #0]
 8003416:	b013      	add	sp, #76	; 0x4c
 8003418:	ecbd 8b04 	vpop	{d8-d9}
 800341c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003420:	4b90      	ldr	r3, [pc, #576]	; (8003664 <_dtoa_r+0x2f4>)
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	3303      	adds	r3, #3
 8003426:	e7f3      	b.n	8003410 <_dtoa_r+0xa0>
 8003428:	ed9d 7b02 	vldr	d7, [sp, #8]
 800342c:	2200      	movs	r2, #0
 800342e:	ec51 0b17 	vmov	r0, r1, d7
 8003432:	eeb0 8a47 	vmov.f32	s16, s14
 8003436:	eef0 8a67 	vmov.f32	s17, s15
 800343a:	2300      	movs	r3, #0
 800343c:	f7fd fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8003440:	4681      	mov	r9, r0
 8003442:	b160      	cbz	r0, 800345e <_dtoa_r+0xee>
 8003444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003446:	2301      	movs	r3, #1
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8568 	beq.w	8003f22 <_dtoa_r+0xbb2>
 8003452:	4b86      	ldr	r3, [pc, #536]	; (800366c <_dtoa_r+0x2fc>)
 8003454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	3b01      	subs	r3, #1
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	e7da      	b.n	8003414 <_dtoa_r+0xa4>
 800345e:	aa10      	add	r2, sp, #64	; 0x40
 8003460:	a911      	add	r1, sp, #68	; 0x44
 8003462:	4620      	mov	r0, r4
 8003464:	eeb0 0a48 	vmov.f32	s0, s16
 8003468:	eef0 0a68 	vmov.f32	s1, s17
 800346c:	f001 f994 	bl	8004798 <__d2b>
 8003470:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003474:	4682      	mov	sl, r0
 8003476:	2d00      	cmp	r5, #0
 8003478:	d07f      	beq.n	800357a <_dtoa_r+0x20a>
 800347a:	ee18 3a90 	vmov	r3, s17
 800347e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003482:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003486:	ec51 0b18 	vmov	r0, r1, d8
 800348a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800348e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003492:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003496:	4619      	mov	r1, r3
 8003498:	2200      	movs	r2, #0
 800349a:	4b75      	ldr	r3, [pc, #468]	; (8003670 <_dtoa_r+0x300>)
 800349c:	f7fc fef4 	bl	8000288 <__aeabi_dsub>
 80034a0:	a367      	add	r3, pc, #412	; (adr r3, 8003640 <_dtoa_r+0x2d0>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fd f8a7 	bl	80005f8 <__aeabi_dmul>
 80034aa:	a367      	add	r3, pc, #412	; (adr r3, 8003648 <_dtoa_r+0x2d8>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fc feec 	bl	800028c <__adddf3>
 80034b4:	4606      	mov	r6, r0
 80034b6:	4628      	mov	r0, r5
 80034b8:	460f      	mov	r7, r1
 80034ba:	f7fd f833 	bl	8000524 <__aeabi_i2d>
 80034be:	a364      	add	r3, pc, #400	; (adr r3, 8003650 <_dtoa_r+0x2e0>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fd f898 	bl	80005f8 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4630      	mov	r0, r6
 80034ce:	4639      	mov	r1, r7
 80034d0:	f7fc fedc 	bl	800028c <__adddf3>
 80034d4:	4606      	mov	r6, r0
 80034d6:	460f      	mov	r7, r1
 80034d8:	f7fd fb3e 	bl	8000b58 <__aeabi_d2iz>
 80034dc:	2200      	movs	r2, #0
 80034de:	4683      	mov	fp, r0
 80034e0:	2300      	movs	r3, #0
 80034e2:	4630      	mov	r0, r6
 80034e4:	4639      	mov	r1, r7
 80034e6:	f7fd faf9 	bl	8000adc <__aeabi_dcmplt>
 80034ea:	b148      	cbz	r0, 8003500 <_dtoa_r+0x190>
 80034ec:	4658      	mov	r0, fp
 80034ee:	f7fd f819 	bl	8000524 <__aeabi_i2d>
 80034f2:	4632      	mov	r2, r6
 80034f4:	463b      	mov	r3, r7
 80034f6:	f7fd fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 80034fa:	b908      	cbnz	r0, 8003500 <_dtoa_r+0x190>
 80034fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003500:	f1bb 0f16 	cmp.w	fp, #22
 8003504:	d857      	bhi.n	80035b6 <_dtoa_r+0x246>
 8003506:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <_dtoa_r+0x304>)
 8003508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	ec51 0b18 	vmov	r0, r1, d8
 8003514:	f7fd fae2 	bl	8000adc <__aeabi_dcmplt>
 8003518:	2800      	cmp	r0, #0
 800351a:	d04e      	beq.n	80035ba <_dtoa_r+0x24a>
 800351c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003520:	2300      	movs	r3, #0
 8003522:	930c      	str	r3, [sp, #48]	; 0x30
 8003524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003526:	1b5b      	subs	r3, r3, r5
 8003528:	1e5a      	subs	r2, r3, #1
 800352a:	bf45      	ittet	mi
 800352c:	f1c3 0301 	rsbmi	r3, r3, #1
 8003530:	9305      	strmi	r3, [sp, #20]
 8003532:	2300      	movpl	r3, #0
 8003534:	2300      	movmi	r3, #0
 8003536:	9206      	str	r2, [sp, #24]
 8003538:	bf54      	ite	pl
 800353a:	9305      	strpl	r3, [sp, #20]
 800353c:	9306      	strmi	r3, [sp, #24]
 800353e:	f1bb 0f00 	cmp.w	fp, #0
 8003542:	db3c      	blt.n	80035be <_dtoa_r+0x24e>
 8003544:	9b06      	ldr	r3, [sp, #24]
 8003546:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800354a:	445b      	add	r3, fp
 800354c:	9306      	str	r3, [sp, #24]
 800354e:	2300      	movs	r3, #0
 8003550:	9308      	str	r3, [sp, #32]
 8003552:	9b07      	ldr	r3, [sp, #28]
 8003554:	2b09      	cmp	r3, #9
 8003556:	d868      	bhi.n	800362a <_dtoa_r+0x2ba>
 8003558:	2b05      	cmp	r3, #5
 800355a:	bfc4      	itt	gt
 800355c:	3b04      	subgt	r3, #4
 800355e:	9307      	strgt	r3, [sp, #28]
 8003560:	9b07      	ldr	r3, [sp, #28]
 8003562:	f1a3 0302 	sub.w	r3, r3, #2
 8003566:	bfcc      	ite	gt
 8003568:	2500      	movgt	r5, #0
 800356a:	2501      	movle	r5, #1
 800356c:	2b03      	cmp	r3, #3
 800356e:	f200 8085 	bhi.w	800367c <_dtoa_r+0x30c>
 8003572:	e8df f003 	tbb	[pc, r3]
 8003576:	3b2e      	.short	0x3b2e
 8003578:	5839      	.short	0x5839
 800357a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800357e:	441d      	add	r5, r3
 8003580:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003584:	2b20      	cmp	r3, #32
 8003586:	bfc1      	itttt	gt
 8003588:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800358c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003590:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003594:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003598:	bfd6      	itet	le
 800359a:	f1c3 0320 	rsble	r3, r3, #32
 800359e:	ea48 0003 	orrgt.w	r0, r8, r3
 80035a2:	fa06 f003 	lslle.w	r0, r6, r3
 80035a6:	f7fc ffad 	bl	8000504 <__aeabi_ui2d>
 80035aa:	2201      	movs	r2, #1
 80035ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80035b0:	3d01      	subs	r5, #1
 80035b2:	920e      	str	r2, [sp, #56]	; 0x38
 80035b4:	e76f      	b.n	8003496 <_dtoa_r+0x126>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e7b3      	b.n	8003522 <_dtoa_r+0x1b2>
 80035ba:	900c      	str	r0, [sp, #48]	; 0x30
 80035bc:	e7b2      	b.n	8003524 <_dtoa_r+0x1b4>
 80035be:	9b05      	ldr	r3, [sp, #20]
 80035c0:	eba3 030b 	sub.w	r3, r3, fp
 80035c4:	9305      	str	r3, [sp, #20]
 80035c6:	f1cb 0300 	rsb	r3, fp, #0
 80035ca:	9308      	str	r3, [sp, #32]
 80035cc:	2300      	movs	r3, #0
 80035ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80035d0:	e7bf      	b.n	8003552 <_dtoa_r+0x1e2>
 80035d2:	2300      	movs	r3, #0
 80035d4:	9309      	str	r3, [sp, #36]	; 0x24
 80035d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	dc52      	bgt.n	8003682 <_dtoa_r+0x312>
 80035dc:	2301      	movs	r3, #1
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	9304      	str	r3, [sp, #16]
 80035e2:	461a      	mov	r2, r3
 80035e4:	920a      	str	r2, [sp, #40]	; 0x28
 80035e6:	e00b      	b.n	8003600 <_dtoa_r+0x290>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e7f3      	b.n	80035d4 <_dtoa_r+0x264>
 80035ec:	2300      	movs	r3, #0
 80035ee:	9309      	str	r3, [sp, #36]	; 0x24
 80035f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035f2:	445b      	add	r3, fp
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	3301      	adds	r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	9304      	str	r3, [sp, #16]
 80035fc:	bfb8      	it	lt
 80035fe:	2301      	movlt	r3, #1
 8003600:	69e0      	ldr	r0, [r4, #28]
 8003602:	2100      	movs	r1, #0
 8003604:	2204      	movs	r2, #4
 8003606:	f102 0614 	add.w	r6, r2, #20
 800360a:	429e      	cmp	r6, r3
 800360c:	d93d      	bls.n	800368a <_dtoa_r+0x31a>
 800360e:	6041      	str	r1, [r0, #4]
 8003610:	4620      	mov	r0, r4
 8003612:	f000 fd9f 	bl	8004154 <_Balloc>
 8003616:	9000      	str	r0, [sp, #0]
 8003618:	2800      	cmp	r0, #0
 800361a:	d139      	bne.n	8003690 <_dtoa_r+0x320>
 800361c:	4b16      	ldr	r3, [pc, #88]	; (8003678 <_dtoa_r+0x308>)
 800361e:	4602      	mov	r2, r0
 8003620:	f240 11af 	movw	r1, #431	; 0x1af
 8003624:	e6bd      	b.n	80033a2 <_dtoa_r+0x32>
 8003626:	2301      	movs	r3, #1
 8003628:	e7e1      	b.n	80035ee <_dtoa_r+0x27e>
 800362a:	2501      	movs	r5, #1
 800362c:	2300      	movs	r3, #0
 800362e:	9307      	str	r3, [sp, #28]
 8003630:	9509      	str	r5, [sp, #36]	; 0x24
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	9304      	str	r3, [sp, #16]
 800363a:	2200      	movs	r2, #0
 800363c:	2312      	movs	r3, #18
 800363e:	e7d1      	b.n	80035e4 <_dtoa_r+0x274>
 8003640:	636f4361 	.word	0x636f4361
 8003644:	3fd287a7 	.word	0x3fd287a7
 8003648:	8b60c8b3 	.word	0x8b60c8b3
 800364c:	3fc68a28 	.word	0x3fc68a28
 8003650:	509f79fb 	.word	0x509f79fb
 8003654:	3fd34413 	.word	0x3fd34413
 8003658:	08005415 	.word	0x08005415
 800365c:	0800542c 	.word	0x0800542c
 8003660:	7ff00000 	.word	0x7ff00000
 8003664:	08005411 	.word	0x08005411
 8003668:	08005408 	.word	0x08005408
 800366c:	080053e5 	.word	0x080053e5
 8003670:	3ff80000 	.word	0x3ff80000
 8003674:	08005518 	.word	0x08005518
 8003678:	08005484 	.word	0x08005484
 800367c:	2301      	movs	r3, #1
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
 8003680:	e7d7      	b.n	8003632 <_dtoa_r+0x2c2>
 8003682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	9304      	str	r3, [sp, #16]
 8003688:	e7ba      	b.n	8003600 <_dtoa_r+0x290>
 800368a:	3101      	adds	r1, #1
 800368c:	0052      	lsls	r2, r2, #1
 800368e:	e7ba      	b.n	8003606 <_dtoa_r+0x296>
 8003690:	69e3      	ldr	r3, [r4, #28]
 8003692:	9a00      	ldr	r2, [sp, #0]
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	9b04      	ldr	r3, [sp, #16]
 8003698:	2b0e      	cmp	r3, #14
 800369a:	f200 80a8 	bhi.w	80037ee <_dtoa_r+0x47e>
 800369e:	2d00      	cmp	r5, #0
 80036a0:	f000 80a5 	beq.w	80037ee <_dtoa_r+0x47e>
 80036a4:	f1bb 0f00 	cmp.w	fp, #0
 80036a8:	dd38      	ble.n	800371c <_dtoa_r+0x3ac>
 80036aa:	4bc0      	ldr	r3, [pc, #768]	; (80039ac <_dtoa_r+0x63c>)
 80036ac:	f00b 020f 	and.w	r2, fp, #15
 80036b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80036b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80036bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80036c0:	d019      	beq.n	80036f6 <_dtoa_r+0x386>
 80036c2:	4bbb      	ldr	r3, [pc, #748]	; (80039b0 <_dtoa_r+0x640>)
 80036c4:	ec51 0b18 	vmov	r0, r1, d8
 80036c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036cc:	f7fd f8be 	bl	800084c <__aeabi_ddiv>
 80036d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036d4:	f008 080f 	and.w	r8, r8, #15
 80036d8:	2503      	movs	r5, #3
 80036da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80039b0 <_dtoa_r+0x640>
 80036de:	f1b8 0f00 	cmp.w	r8, #0
 80036e2:	d10a      	bne.n	80036fa <_dtoa_r+0x38a>
 80036e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036e8:	4632      	mov	r2, r6
 80036ea:	463b      	mov	r3, r7
 80036ec:	f7fd f8ae 	bl	800084c <__aeabi_ddiv>
 80036f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036f4:	e02b      	b.n	800374e <_dtoa_r+0x3de>
 80036f6:	2502      	movs	r5, #2
 80036f8:	e7ef      	b.n	80036da <_dtoa_r+0x36a>
 80036fa:	f018 0f01 	tst.w	r8, #1
 80036fe:	d008      	beq.n	8003712 <_dtoa_r+0x3a2>
 8003700:	4630      	mov	r0, r6
 8003702:	4639      	mov	r1, r7
 8003704:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003708:	f7fc ff76 	bl	80005f8 <__aeabi_dmul>
 800370c:	3501      	adds	r5, #1
 800370e:	4606      	mov	r6, r0
 8003710:	460f      	mov	r7, r1
 8003712:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003716:	f109 0908 	add.w	r9, r9, #8
 800371a:	e7e0      	b.n	80036de <_dtoa_r+0x36e>
 800371c:	f000 809f 	beq.w	800385e <_dtoa_r+0x4ee>
 8003720:	f1cb 0600 	rsb	r6, fp, #0
 8003724:	4ba1      	ldr	r3, [pc, #644]	; (80039ac <_dtoa_r+0x63c>)
 8003726:	4fa2      	ldr	r7, [pc, #648]	; (80039b0 <_dtoa_r+0x640>)
 8003728:	f006 020f 	and.w	r2, r6, #15
 800372c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	ec51 0b18 	vmov	r0, r1, d8
 8003738:	f7fc ff5e 	bl	80005f8 <__aeabi_dmul>
 800373c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003740:	1136      	asrs	r6, r6, #4
 8003742:	2300      	movs	r3, #0
 8003744:	2502      	movs	r5, #2
 8003746:	2e00      	cmp	r6, #0
 8003748:	d17e      	bne.n	8003848 <_dtoa_r+0x4d8>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1d0      	bne.n	80036f0 <_dtoa_r+0x380>
 800374e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003750:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8084 	beq.w	8003862 <_dtoa_r+0x4f2>
 800375a:	4b96      	ldr	r3, [pc, #600]	; (80039b4 <_dtoa_r+0x644>)
 800375c:	2200      	movs	r2, #0
 800375e:	4640      	mov	r0, r8
 8003760:	4649      	mov	r1, r9
 8003762:	f7fd f9bb 	bl	8000adc <__aeabi_dcmplt>
 8003766:	2800      	cmp	r0, #0
 8003768:	d07b      	beq.n	8003862 <_dtoa_r+0x4f2>
 800376a:	9b04      	ldr	r3, [sp, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d078      	beq.n	8003862 <_dtoa_r+0x4f2>
 8003770:	9b01      	ldr	r3, [sp, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	dd39      	ble.n	80037ea <_dtoa_r+0x47a>
 8003776:	4b90      	ldr	r3, [pc, #576]	; (80039b8 <_dtoa_r+0x648>)
 8003778:	2200      	movs	r2, #0
 800377a:	4640      	mov	r0, r8
 800377c:	4649      	mov	r1, r9
 800377e:	f7fc ff3b 	bl	80005f8 <__aeabi_dmul>
 8003782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003786:	9e01      	ldr	r6, [sp, #4]
 8003788:	f10b 37ff 	add.w	r7, fp, #4294967295
 800378c:	3501      	adds	r5, #1
 800378e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003792:	4628      	mov	r0, r5
 8003794:	f7fc fec6 	bl	8000524 <__aeabi_i2d>
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	f7fc ff2c 	bl	80005f8 <__aeabi_dmul>
 80037a0:	4b86      	ldr	r3, [pc, #536]	; (80039bc <_dtoa_r+0x64c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	f7fc fd72 	bl	800028c <__adddf3>
 80037a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80037ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	2e00      	cmp	r6, #0
 80037b4:	d158      	bne.n	8003868 <_dtoa_r+0x4f8>
 80037b6:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <_dtoa_r+0x650>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	4640      	mov	r0, r8
 80037bc:	4649      	mov	r1, r9
 80037be:	f7fc fd63 	bl	8000288 <__aeabi_dsub>
 80037c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037c6:	4680      	mov	r8, r0
 80037c8:	4689      	mov	r9, r1
 80037ca:	f7fd f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 80037ce:	2800      	cmp	r0, #0
 80037d0:	f040 8296 	bne.w	8003d00 <_dtoa_r+0x990>
 80037d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80037d8:	4640      	mov	r0, r8
 80037da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80037de:	4649      	mov	r1, r9
 80037e0:	f7fd f97c 	bl	8000adc <__aeabi_dcmplt>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	f040 8289 	bne.w	8003cfc <_dtoa_r+0x98c>
 80037ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80037ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f2c0 814e 	blt.w	8003a92 <_dtoa_r+0x722>
 80037f6:	f1bb 0f0e 	cmp.w	fp, #14
 80037fa:	f300 814a 	bgt.w	8003a92 <_dtoa_r+0x722>
 80037fe:	4b6b      	ldr	r3, [pc, #428]	; (80039ac <_dtoa_r+0x63c>)
 8003800:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003804:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800380a:	2b00      	cmp	r3, #0
 800380c:	f280 80dc 	bge.w	80039c8 <_dtoa_r+0x658>
 8003810:	9b04      	ldr	r3, [sp, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f300 80d8 	bgt.w	80039c8 <_dtoa_r+0x658>
 8003818:	f040 826f 	bne.w	8003cfa <_dtoa_r+0x98a>
 800381c:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <_dtoa_r+0x650>)
 800381e:	2200      	movs	r2, #0
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fc fee8 	bl	80005f8 <__aeabi_dmul>
 8003828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800382c:	f7fd f96a 	bl	8000b04 <__aeabi_dcmpge>
 8003830:	9e04      	ldr	r6, [sp, #16]
 8003832:	4637      	mov	r7, r6
 8003834:	2800      	cmp	r0, #0
 8003836:	f040 8245 	bne.w	8003cc4 <_dtoa_r+0x954>
 800383a:	9d00      	ldr	r5, [sp, #0]
 800383c:	2331      	movs	r3, #49	; 0x31
 800383e:	f805 3b01 	strb.w	r3, [r5], #1
 8003842:	f10b 0b01 	add.w	fp, fp, #1
 8003846:	e241      	b.n	8003ccc <_dtoa_r+0x95c>
 8003848:	07f2      	lsls	r2, r6, #31
 800384a:	d505      	bpl.n	8003858 <_dtoa_r+0x4e8>
 800384c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003850:	f7fc fed2 	bl	80005f8 <__aeabi_dmul>
 8003854:	3501      	adds	r5, #1
 8003856:	2301      	movs	r3, #1
 8003858:	1076      	asrs	r6, r6, #1
 800385a:	3708      	adds	r7, #8
 800385c:	e773      	b.n	8003746 <_dtoa_r+0x3d6>
 800385e:	2502      	movs	r5, #2
 8003860:	e775      	b.n	800374e <_dtoa_r+0x3de>
 8003862:	9e04      	ldr	r6, [sp, #16]
 8003864:	465f      	mov	r7, fp
 8003866:	e792      	b.n	800378e <_dtoa_r+0x41e>
 8003868:	9900      	ldr	r1, [sp, #0]
 800386a:	4b50      	ldr	r3, [pc, #320]	; (80039ac <_dtoa_r+0x63c>)
 800386c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003870:	4431      	add	r1, r6
 8003872:	9102      	str	r1, [sp, #8]
 8003874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003876:	eeb0 9a47 	vmov.f32	s18, s14
 800387a:	eef0 9a67 	vmov.f32	s19, s15
 800387e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003882:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003886:	2900      	cmp	r1, #0
 8003888:	d044      	beq.n	8003914 <_dtoa_r+0x5a4>
 800388a:	494e      	ldr	r1, [pc, #312]	; (80039c4 <_dtoa_r+0x654>)
 800388c:	2000      	movs	r0, #0
 800388e:	f7fc ffdd 	bl	800084c <__aeabi_ddiv>
 8003892:	ec53 2b19 	vmov	r2, r3, d9
 8003896:	f7fc fcf7 	bl	8000288 <__aeabi_dsub>
 800389a:	9d00      	ldr	r5, [sp, #0]
 800389c:	ec41 0b19 	vmov	d9, r0, r1
 80038a0:	4649      	mov	r1, r9
 80038a2:	4640      	mov	r0, r8
 80038a4:	f7fd f958 	bl	8000b58 <__aeabi_d2iz>
 80038a8:	4606      	mov	r6, r0
 80038aa:	f7fc fe3b 	bl	8000524 <__aeabi_i2d>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4640      	mov	r0, r8
 80038b4:	4649      	mov	r1, r9
 80038b6:	f7fc fce7 	bl	8000288 <__aeabi_dsub>
 80038ba:	3630      	adds	r6, #48	; 0x30
 80038bc:	f805 6b01 	strb.w	r6, [r5], #1
 80038c0:	ec53 2b19 	vmov	r2, r3, d9
 80038c4:	4680      	mov	r8, r0
 80038c6:	4689      	mov	r9, r1
 80038c8:	f7fd f908 	bl	8000adc <__aeabi_dcmplt>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d164      	bne.n	800399a <_dtoa_r+0x62a>
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	4937      	ldr	r1, [pc, #220]	; (80039b4 <_dtoa_r+0x644>)
 80038d6:	2000      	movs	r0, #0
 80038d8:	f7fc fcd6 	bl	8000288 <__aeabi_dsub>
 80038dc:	ec53 2b19 	vmov	r2, r3, d9
 80038e0:	f7fd f8fc 	bl	8000adc <__aeabi_dcmplt>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	f040 80b6 	bne.w	8003a56 <_dtoa_r+0x6e6>
 80038ea:	9b02      	ldr	r3, [sp, #8]
 80038ec:	429d      	cmp	r5, r3
 80038ee:	f43f af7c 	beq.w	80037ea <_dtoa_r+0x47a>
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <_dtoa_r+0x648>)
 80038f4:	ec51 0b19 	vmov	r0, r1, d9
 80038f8:	2200      	movs	r2, #0
 80038fa:	f7fc fe7d 	bl	80005f8 <__aeabi_dmul>
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <_dtoa_r+0x648>)
 8003900:	ec41 0b19 	vmov	d9, r0, r1
 8003904:	2200      	movs	r2, #0
 8003906:	4640      	mov	r0, r8
 8003908:	4649      	mov	r1, r9
 800390a:	f7fc fe75 	bl	80005f8 <__aeabi_dmul>
 800390e:	4680      	mov	r8, r0
 8003910:	4689      	mov	r9, r1
 8003912:	e7c5      	b.n	80038a0 <_dtoa_r+0x530>
 8003914:	ec51 0b17 	vmov	r0, r1, d7
 8003918:	f7fc fe6e 	bl	80005f8 <__aeabi_dmul>
 800391c:	9b02      	ldr	r3, [sp, #8]
 800391e:	9d00      	ldr	r5, [sp, #0]
 8003920:	930f      	str	r3, [sp, #60]	; 0x3c
 8003922:	ec41 0b19 	vmov	d9, r0, r1
 8003926:	4649      	mov	r1, r9
 8003928:	4640      	mov	r0, r8
 800392a:	f7fd f915 	bl	8000b58 <__aeabi_d2iz>
 800392e:	4606      	mov	r6, r0
 8003930:	f7fc fdf8 	bl	8000524 <__aeabi_i2d>
 8003934:	3630      	adds	r6, #48	; 0x30
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4640      	mov	r0, r8
 800393c:	4649      	mov	r1, r9
 800393e:	f7fc fca3 	bl	8000288 <__aeabi_dsub>
 8003942:	f805 6b01 	strb.w	r6, [r5], #1
 8003946:	9b02      	ldr	r3, [sp, #8]
 8003948:	429d      	cmp	r5, r3
 800394a:	4680      	mov	r8, r0
 800394c:	4689      	mov	r9, r1
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	d124      	bne.n	800399e <_dtoa_r+0x62e>
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <_dtoa_r+0x654>)
 8003956:	ec51 0b19 	vmov	r0, r1, d9
 800395a:	f7fc fc97 	bl	800028c <__adddf3>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4640      	mov	r0, r8
 8003964:	4649      	mov	r1, r9
 8003966:	f7fd f8d7 	bl	8000b18 <__aeabi_dcmpgt>
 800396a:	2800      	cmp	r0, #0
 800396c:	d173      	bne.n	8003a56 <_dtoa_r+0x6e6>
 800396e:	ec53 2b19 	vmov	r2, r3, d9
 8003972:	4914      	ldr	r1, [pc, #80]	; (80039c4 <_dtoa_r+0x654>)
 8003974:	2000      	movs	r0, #0
 8003976:	f7fc fc87 	bl	8000288 <__aeabi_dsub>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4640      	mov	r0, r8
 8003980:	4649      	mov	r1, r9
 8003982:	f7fd f8ab 	bl	8000adc <__aeabi_dcmplt>
 8003986:	2800      	cmp	r0, #0
 8003988:	f43f af2f 	beq.w	80037ea <_dtoa_r+0x47a>
 800398c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800398e:	1e6b      	subs	r3, r5, #1
 8003990:	930f      	str	r3, [sp, #60]	; 0x3c
 8003992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003996:	2b30      	cmp	r3, #48	; 0x30
 8003998:	d0f8      	beq.n	800398c <_dtoa_r+0x61c>
 800399a:	46bb      	mov	fp, r7
 800399c:	e04a      	b.n	8003a34 <_dtoa_r+0x6c4>
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <_dtoa_r+0x648>)
 80039a0:	f7fc fe2a 	bl	80005f8 <__aeabi_dmul>
 80039a4:	4680      	mov	r8, r0
 80039a6:	4689      	mov	r9, r1
 80039a8:	e7bd      	b.n	8003926 <_dtoa_r+0x5b6>
 80039aa:	bf00      	nop
 80039ac:	08005518 	.word	0x08005518
 80039b0:	080054f0 	.word	0x080054f0
 80039b4:	3ff00000 	.word	0x3ff00000
 80039b8:	40240000 	.word	0x40240000
 80039bc:	401c0000 	.word	0x401c0000
 80039c0:	40140000 	.word	0x40140000
 80039c4:	3fe00000 	.word	0x3fe00000
 80039c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80039cc:	9d00      	ldr	r5, [sp, #0]
 80039ce:	4642      	mov	r2, r8
 80039d0:	464b      	mov	r3, r9
 80039d2:	4630      	mov	r0, r6
 80039d4:	4639      	mov	r1, r7
 80039d6:	f7fc ff39 	bl	800084c <__aeabi_ddiv>
 80039da:	f7fd f8bd 	bl	8000b58 <__aeabi_d2iz>
 80039de:	9001      	str	r0, [sp, #4]
 80039e0:	f7fc fda0 	bl	8000524 <__aeabi_i2d>
 80039e4:	4642      	mov	r2, r8
 80039e6:	464b      	mov	r3, r9
 80039e8:	f7fc fe06 	bl	80005f8 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4630      	mov	r0, r6
 80039f2:	4639      	mov	r1, r7
 80039f4:	f7fc fc48 	bl	8000288 <__aeabi_dsub>
 80039f8:	9e01      	ldr	r6, [sp, #4]
 80039fa:	9f04      	ldr	r7, [sp, #16]
 80039fc:	3630      	adds	r6, #48	; 0x30
 80039fe:	f805 6b01 	strb.w	r6, [r5], #1
 8003a02:	9e00      	ldr	r6, [sp, #0]
 8003a04:	1bae      	subs	r6, r5, r6
 8003a06:	42b7      	cmp	r7, r6
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	d134      	bne.n	8003a78 <_dtoa_r+0x708>
 8003a0e:	f7fc fc3d 	bl	800028c <__adddf3>
 8003a12:	4642      	mov	r2, r8
 8003a14:	464b      	mov	r3, r9
 8003a16:	4606      	mov	r6, r0
 8003a18:	460f      	mov	r7, r1
 8003a1a:	f7fd f87d 	bl	8000b18 <__aeabi_dcmpgt>
 8003a1e:	b9c8      	cbnz	r0, 8003a54 <_dtoa_r+0x6e4>
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	4630      	mov	r0, r6
 8003a26:	4639      	mov	r1, r7
 8003a28:	f7fd f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a2c:	b110      	cbz	r0, 8003a34 <_dtoa_r+0x6c4>
 8003a2e:	9b01      	ldr	r3, [sp, #4]
 8003a30:	07db      	lsls	r3, r3, #31
 8003a32:	d40f      	bmi.n	8003a54 <_dtoa_r+0x6e4>
 8003a34:	4651      	mov	r1, sl
 8003a36:	4620      	mov	r0, r4
 8003a38:	f000 fbcc 	bl	80041d4 <_Bfree>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a40:	702b      	strb	r3, [r5, #0]
 8003a42:	f10b 0301 	add.w	r3, fp, #1
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f43f ace2 	beq.w	8003414 <_dtoa_r+0xa4>
 8003a50:	601d      	str	r5, [r3, #0]
 8003a52:	e4df      	b.n	8003414 <_dtoa_r+0xa4>
 8003a54:	465f      	mov	r7, fp
 8003a56:	462b      	mov	r3, r5
 8003a58:	461d      	mov	r5, r3
 8003a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003a5e:	2a39      	cmp	r2, #57	; 0x39
 8003a60:	d106      	bne.n	8003a70 <_dtoa_r+0x700>
 8003a62:	9a00      	ldr	r2, [sp, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1f7      	bne.n	8003a58 <_dtoa_r+0x6e8>
 8003a68:	9900      	ldr	r1, [sp, #0]
 8003a6a:	2230      	movs	r2, #48	; 0x30
 8003a6c:	3701      	adds	r7, #1
 8003a6e:	700a      	strb	r2, [r1, #0]
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	3201      	adds	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e790      	b.n	800399a <_dtoa_r+0x62a>
 8003a78:	4ba3      	ldr	r3, [pc, #652]	; (8003d08 <_dtoa_r+0x998>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f7fc fdbc 	bl	80005f8 <__aeabi_dmul>
 8003a80:	2200      	movs	r2, #0
 8003a82:	2300      	movs	r3, #0
 8003a84:	4606      	mov	r6, r0
 8003a86:	460f      	mov	r7, r1
 8003a88:	f7fd f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d09e      	beq.n	80039ce <_dtoa_r+0x65e>
 8003a90:	e7d0      	b.n	8003a34 <_dtoa_r+0x6c4>
 8003a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a94:	2a00      	cmp	r2, #0
 8003a96:	f000 80ca 	beq.w	8003c2e <_dtoa_r+0x8be>
 8003a9a:	9a07      	ldr	r2, [sp, #28]
 8003a9c:	2a01      	cmp	r2, #1
 8003a9e:	f300 80ad 	bgt.w	8003bfc <_dtoa_r+0x88c>
 8003aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	f000 80a5 	beq.w	8003bf4 <_dtoa_r+0x884>
 8003aaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003aae:	9e08      	ldr	r6, [sp, #32]
 8003ab0:	9d05      	ldr	r5, [sp, #20]
 8003ab2:	9a05      	ldr	r2, [sp, #20]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	9205      	str	r2, [sp, #20]
 8003ab8:	9a06      	ldr	r2, [sp, #24]
 8003aba:	2101      	movs	r1, #1
 8003abc:	441a      	add	r2, r3
 8003abe:	4620      	mov	r0, r4
 8003ac0:	9206      	str	r2, [sp, #24]
 8003ac2:	f000 fc3d 	bl	8004340 <__i2b>
 8003ac6:	4607      	mov	r7, r0
 8003ac8:	b165      	cbz	r5, 8003ae4 <_dtoa_r+0x774>
 8003aca:	9b06      	ldr	r3, [sp, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	dd09      	ble.n	8003ae4 <_dtoa_r+0x774>
 8003ad0:	42ab      	cmp	r3, r5
 8003ad2:	9a05      	ldr	r2, [sp, #20]
 8003ad4:	bfa8      	it	ge
 8003ad6:	462b      	movge	r3, r5
 8003ad8:	1ad2      	subs	r2, r2, r3
 8003ada:	9205      	str	r2, [sp, #20]
 8003adc:	9a06      	ldr	r2, [sp, #24]
 8003ade:	1aed      	subs	r5, r5, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	9306      	str	r3, [sp, #24]
 8003ae4:	9b08      	ldr	r3, [sp, #32]
 8003ae6:	b1f3      	cbz	r3, 8003b26 <_dtoa_r+0x7b6>
 8003ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80a3 	beq.w	8003c36 <_dtoa_r+0x8c6>
 8003af0:	2e00      	cmp	r6, #0
 8003af2:	dd10      	ble.n	8003b16 <_dtoa_r+0x7a6>
 8003af4:	4639      	mov	r1, r7
 8003af6:	4632      	mov	r2, r6
 8003af8:	4620      	mov	r0, r4
 8003afa:	f000 fce1 	bl	80044c0 <__pow5mult>
 8003afe:	4652      	mov	r2, sl
 8003b00:	4601      	mov	r1, r0
 8003b02:	4607      	mov	r7, r0
 8003b04:	4620      	mov	r0, r4
 8003b06:	f000 fc31 	bl	800436c <__multiply>
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f000 fb60 	bl	80041d4 <_Bfree>
 8003b14:	46c2      	mov	sl, r8
 8003b16:	9b08      	ldr	r3, [sp, #32]
 8003b18:	1b9a      	subs	r2, r3, r6
 8003b1a:	d004      	beq.n	8003b26 <_dtoa_r+0x7b6>
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f000 fcce 	bl	80044c0 <__pow5mult>
 8003b24:	4682      	mov	sl, r0
 8003b26:	2101      	movs	r1, #1
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f000 fc09 	bl	8004340 <__i2b>
 8003b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	4606      	mov	r6, r0
 8003b34:	f340 8081 	ble.w	8003c3a <_dtoa_r+0x8ca>
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f000 fcbf 	bl	80044c0 <__pow5mult>
 8003b42:	9b07      	ldr	r3, [sp, #28]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	4606      	mov	r6, r0
 8003b48:	dd7a      	ble.n	8003c40 <_dtoa_r+0x8d0>
 8003b4a:	f04f 0800 	mov.w	r8, #0
 8003b4e:	6933      	ldr	r3, [r6, #16]
 8003b50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003b54:	6918      	ldr	r0, [r3, #16]
 8003b56:	f000 fba5 	bl	80042a4 <__hi0bits>
 8003b5a:	f1c0 0020 	rsb	r0, r0, #32
 8003b5e:	9b06      	ldr	r3, [sp, #24]
 8003b60:	4418      	add	r0, r3
 8003b62:	f010 001f 	ands.w	r0, r0, #31
 8003b66:	f000 8094 	beq.w	8003c92 <_dtoa_r+0x922>
 8003b6a:	f1c0 0320 	rsb	r3, r0, #32
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	f340 8085 	ble.w	8003c7e <_dtoa_r+0x90e>
 8003b74:	9b05      	ldr	r3, [sp, #20]
 8003b76:	f1c0 001c 	rsb	r0, r0, #28
 8003b7a:	4403      	add	r3, r0
 8003b7c:	9305      	str	r3, [sp, #20]
 8003b7e:	9b06      	ldr	r3, [sp, #24]
 8003b80:	4403      	add	r3, r0
 8003b82:	4405      	add	r5, r0
 8003b84:	9306      	str	r3, [sp, #24]
 8003b86:	9b05      	ldr	r3, [sp, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	dd05      	ble.n	8003b98 <_dtoa_r+0x828>
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 fcef 	bl	8004574 <__lshift>
 8003b96:	4682      	mov	sl, r0
 8003b98:	9b06      	ldr	r3, [sp, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	dd05      	ble.n	8003baa <_dtoa_r+0x83a>
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f000 fce6 	bl	8004574 <__lshift>
 8003ba8:	4606      	mov	r6, r0
 8003baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d072      	beq.n	8003c96 <_dtoa_r+0x926>
 8003bb0:	4631      	mov	r1, r6
 8003bb2:	4650      	mov	r0, sl
 8003bb4:	f000 fd4a 	bl	800464c <__mcmp>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	da6c      	bge.n	8003c96 <_dtoa_r+0x926>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4651      	mov	r1, sl
 8003bc0:	220a      	movs	r2, #10
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f000 fb28 	bl	8004218 <__multadd>
 8003bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003bce:	4682      	mov	sl, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 81b0 	beq.w	8003f36 <_dtoa_r+0xbc6>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	4639      	mov	r1, r7
 8003bda:	220a      	movs	r2, #10
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 fb1b 	bl	8004218 <__multadd>
 8003be2:	9b01      	ldr	r3, [sp, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	4607      	mov	r7, r0
 8003be8:	f300 8096 	bgt.w	8003d18 <_dtoa_r+0x9a8>
 8003bec:	9b07      	ldr	r3, [sp, #28]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	dc59      	bgt.n	8003ca6 <_dtoa_r+0x936>
 8003bf2:	e091      	b.n	8003d18 <_dtoa_r+0x9a8>
 8003bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003bfa:	e758      	b.n	8003aae <_dtoa_r+0x73e>
 8003bfc:	9b04      	ldr	r3, [sp, #16]
 8003bfe:	1e5e      	subs	r6, r3, #1
 8003c00:	9b08      	ldr	r3, [sp, #32]
 8003c02:	42b3      	cmp	r3, r6
 8003c04:	bfbf      	itttt	lt
 8003c06:	9b08      	ldrlt	r3, [sp, #32]
 8003c08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003c0a:	9608      	strlt	r6, [sp, #32]
 8003c0c:	1af3      	sublt	r3, r6, r3
 8003c0e:	bfb4      	ite	lt
 8003c10:	18d2      	addlt	r2, r2, r3
 8003c12:	1b9e      	subge	r6, r3, r6
 8003c14:	9b04      	ldr	r3, [sp, #16]
 8003c16:	bfbc      	itt	lt
 8003c18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003c1a:	2600      	movlt	r6, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bfb7      	itett	lt
 8003c20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8003c24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003c28:	1a9d      	sublt	r5, r3, r2
 8003c2a:	2300      	movlt	r3, #0
 8003c2c:	e741      	b.n	8003ab2 <_dtoa_r+0x742>
 8003c2e:	9e08      	ldr	r6, [sp, #32]
 8003c30:	9d05      	ldr	r5, [sp, #20]
 8003c32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003c34:	e748      	b.n	8003ac8 <_dtoa_r+0x758>
 8003c36:	9a08      	ldr	r2, [sp, #32]
 8003c38:	e770      	b.n	8003b1c <_dtoa_r+0x7ac>
 8003c3a:	9b07      	ldr	r3, [sp, #28]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	dc19      	bgt.n	8003c74 <_dtoa_r+0x904>
 8003c40:	9b02      	ldr	r3, [sp, #8]
 8003c42:	b9bb      	cbnz	r3, 8003c74 <_dtoa_r+0x904>
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c4a:	b99b      	cbnz	r3, 8003c74 <_dtoa_r+0x904>
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c52:	0d1b      	lsrs	r3, r3, #20
 8003c54:	051b      	lsls	r3, r3, #20
 8003c56:	b183      	cbz	r3, 8003c7a <_dtoa_r+0x90a>
 8003c58:	9b05      	ldr	r3, [sp, #20]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	9305      	str	r3, [sp, #20]
 8003c5e:	9b06      	ldr	r3, [sp, #24]
 8003c60:	3301      	adds	r3, #1
 8003c62:	9306      	str	r3, [sp, #24]
 8003c64:	f04f 0801 	mov.w	r8, #1
 8003c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f47f af6f 	bne.w	8003b4e <_dtoa_r+0x7de>
 8003c70:	2001      	movs	r0, #1
 8003c72:	e774      	b.n	8003b5e <_dtoa_r+0x7ee>
 8003c74:	f04f 0800 	mov.w	r8, #0
 8003c78:	e7f6      	b.n	8003c68 <_dtoa_r+0x8f8>
 8003c7a:	4698      	mov	r8, r3
 8003c7c:	e7f4      	b.n	8003c68 <_dtoa_r+0x8f8>
 8003c7e:	d082      	beq.n	8003b86 <_dtoa_r+0x816>
 8003c80:	9a05      	ldr	r2, [sp, #20]
 8003c82:	331c      	adds	r3, #28
 8003c84:	441a      	add	r2, r3
 8003c86:	9205      	str	r2, [sp, #20]
 8003c88:	9a06      	ldr	r2, [sp, #24]
 8003c8a:	441a      	add	r2, r3
 8003c8c:	441d      	add	r5, r3
 8003c8e:	9206      	str	r2, [sp, #24]
 8003c90:	e779      	b.n	8003b86 <_dtoa_r+0x816>
 8003c92:	4603      	mov	r3, r0
 8003c94:	e7f4      	b.n	8003c80 <_dtoa_r+0x910>
 8003c96:	9b04      	ldr	r3, [sp, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dc37      	bgt.n	8003d0c <_dtoa_r+0x99c>
 8003c9c:	9b07      	ldr	r3, [sp, #28]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	dd34      	ble.n	8003d0c <_dtoa_r+0x99c>
 8003ca2:	9b04      	ldr	r3, [sp, #16]
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	9b01      	ldr	r3, [sp, #4]
 8003ca8:	b963      	cbnz	r3, 8003cc4 <_dtoa_r+0x954>
 8003caa:	4631      	mov	r1, r6
 8003cac:	2205      	movs	r2, #5
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f000 fab2 	bl	8004218 <__multadd>
 8003cb4:	4601      	mov	r1, r0
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	4650      	mov	r0, sl
 8003cba:	f000 fcc7 	bl	800464c <__mcmp>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	f73f adbb 	bgt.w	800383a <_dtoa_r+0x4ca>
 8003cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cc6:	9d00      	ldr	r5, [sp, #0]
 8003cc8:	ea6f 0b03 	mvn.w	fp, r3
 8003ccc:	f04f 0800 	mov.w	r8, #0
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f000 fa7e 	bl	80041d4 <_Bfree>
 8003cd8:	2f00      	cmp	r7, #0
 8003cda:	f43f aeab 	beq.w	8003a34 <_dtoa_r+0x6c4>
 8003cde:	f1b8 0f00 	cmp.w	r8, #0
 8003ce2:	d005      	beq.n	8003cf0 <_dtoa_r+0x980>
 8003ce4:	45b8      	cmp	r8, r7
 8003ce6:	d003      	beq.n	8003cf0 <_dtoa_r+0x980>
 8003ce8:	4641      	mov	r1, r8
 8003cea:	4620      	mov	r0, r4
 8003cec:	f000 fa72 	bl	80041d4 <_Bfree>
 8003cf0:	4639      	mov	r1, r7
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 fa6e 	bl	80041d4 <_Bfree>
 8003cf8:	e69c      	b.n	8003a34 <_dtoa_r+0x6c4>
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	4637      	mov	r7, r6
 8003cfe:	e7e1      	b.n	8003cc4 <_dtoa_r+0x954>
 8003d00:	46bb      	mov	fp, r7
 8003d02:	4637      	mov	r7, r6
 8003d04:	e599      	b.n	800383a <_dtoa_r+0x4ca>
 8003d06:	bf00      	nop
 8003d08:	40240000 	.word	0x40240000
 8003d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80c8 	beq.w	8003ea4 <_dtoa_r+0xb34>
 8003d14:	9b04      	ldr	r3, [sp, #16]
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	dd05      	ble.n	8003d28 <_dtoa_r+0x9b8>
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	462a      	mov	r2, r5
 8003d20:	4620      	mov	r0, r4
 8003d22:	f000 fc27 	bl	8004574 <__lshift>
 8003d26:	4607      	mov	r7, r0
 8003d28:	f1b8 0f00 	cmp.w	r8, #0
 8003d2c:	d05b      	beq.n	8003de6 <_dtoa_r+0xa76>
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 fa0f 	bl	8004154 <_Balloc>
 8003d36:	4605      	mov	r5, r0
 8003d38:	b928      	cbnz	r0, 8003d46 <_dtoa_r+0x9d6>
 8003d3a:	4b83      	ldr	r3, [pc, #524]	; (8003f48 <_dtoa_r+0xbd8>)
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003d42:	f7ff bb2e 	b.w	80033a2 <_dtoa_r+0x32>
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	3202      	adds	r2, #2
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	f107 010c 	add.w	r1, r7, #12
 8003d50:	300c      	adds	r0, #12
 8003d52:	f000 ffab 	bl	8004cac <memcpy>
 8003d56:	2201      	movs	r2, #1
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f000 fc0a 	bl	8004574 <__lshift>
 8003d60:	9b00      	ldr	r3, [sp, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	9304      	str	r3, [sp, #16]
 8003d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	9308      	str	r3, [sp, #32]
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	46b8      	mov	r8, r7
 8003d76:	9306      	str	r3, [sp, #24]
 8003d78:	4607      	mov	r7, r0
 8003d7a:	9b04      	ldr	r3, [sp, #16]
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	4650      	mov	r0, sl
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	f7ff fa69 	bl	800325a <quorem>
 8003d88:	4641      	mov	r1, r8
 8003d8a:	9002      	str	r0, [sp, #8]
 8003d8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003d90:	4650      	mov	r0, sl
 8003d92:	f000 fc5b 	bl	800464c <__mcmp>
 8003d96:	463a      	mov	r2, r7
 8003d98:	9005      	str	r0, [sp, #20]
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f000 fc71 	bl	8004684 <__mdiff>
 8003da2:	68c2      	ldr	r2, [r0, #12]
 8003da4:	4605      	mov	r5, r0
 8003da6:	bb02      	cbnz	r2, 8003dea <_dtoa_r+0xa7a>
 8003da8:	4601      	mov	r1, r0
 8003daa:	4650      	mov	r0, sl
 8003dac:	f000 fc4e 	bl	800464c <__mcmp>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4629      	mov	r1, r5
 8003db4:	4620      	mov	r0, r4
 8003db6:	9209      	str	r2, [sp, #36]	; 0x24
 8003db8:	f000 fa0c 	bl	80041d4 <_Bfree>
 8003dbc:	9b07      	ldr	r3, [sp, #28]
 8003dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dc0:	9d04      	ldr	r5, [sp, #16]
 8003dc2:	ea43 0102 	orr.w	r1, r3, r2
 8003dc6:	9b06      	ldr	r3, [sp, #24]
 8003dc8:	4319      	orrs	r1, r3
 8003dca:	d110      	bne.n	8003dee <_dtoa_r+0xa7e>
 8003dcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003dd0:	d029      	beq.n	8003e26 <_dtoa_r+0xab6>
 8003dd2:	9b05      	ldr	r3, [sp, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	dd02      	ble.n	8003dde <_dtoa_r+0xa6e>
 8003dd8:	9b02      	ldr	r3, [sp, #8]
 8003dda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	f883 9000 	strb.w	r9, [r3]
 8003de4:	e774      	b.n	8003cd0 <_dtoa_r+0x960>
 8003de6:	4638      	mov	r0, r7
 8003de8:	e7ba      	b.n	8003d60 <_dtoa_r+0x9f0>
 8003dea:	2201      	movs	r2, #1
 8003dec:	e7e1      	b.n	8003db2 <_dtoa_r+0xa42>
 8003dee:	9b05      	ldr	r3, [sp, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	db04      	blt.n	8003dfe <_dtoa_r+0xa8e>
 8003df4:	9907      	ldr	r1, [sp, #28]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	9906      	ldr	r1, [sp, #24]
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	d120      	bne.n	8003e40 <_dtoa_r+0xad0>
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	dded      	ble.n	8003dde <_dtoa_r+0xa6e>
 8003e02:	4651      	mov	r1, sl
 8003e04:	2201      	movs	r2, #1
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 fbb4 	bl	8004574 <__lshift>
 8003e0c:	4631      	mov	r1, r6
 8003e0e:	4682      	mov	sl, r0
 8003e10:	f000 fc1c 	bl	800464c <__mcmp>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	dc03      	bgt.n	8003e20 <_dtoa_r+0xab0>
 8003e18:	d1e1      	bne.n	8003dde <_dtoa_r+0xa6e>
 8003e1a:	f019 0f01 	tst.w	r9, #1
 8003e1e:	d0de      	beq.n	8003dde <_dtoa_r+0xa6e>
 8003e20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003e24:	d1d8      	bne.n	8003dd8 <_dtoa_r+0xa68>
 8003e26:	9a01      	ldr	r2, [sp, #4]
 8003e28:	2339      	movs	r3, #57	; 0x39
 8003e2a:	7013      	strb	r3, [r2, #0]
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	461d      	mov	r5, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003e36:	2a39      	cmp	r2, #57	; 0x39
 8003e38:	d06c      	beq.n	8003f14 <_dtoa_r+0xba4>
 8003e3a:	3201      	adds	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e747      	b.n	8003cd0 <_dtoa_r+0x960>
 8003e40:	2a00      	cmp	r2, #0
 8003e42:	dd07      	ble.n	8003e54 <_dtoa_r+0xae4>
 8003e44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003e48:	d0ed      	beq.n	8003e26 <_dtoa_r+0xab6>
 8003e4a:	9a01      	ldr	r2, [sp, #4]
 8003e4c:	f109 0301 	add.w	r3, r9, #1
 8003e50:	7013      	strb	r3, [r2, #0]
 8003e52:	e73d      	b.n	8003cd0 <_dtoa_r+0x960>
 8003e54:	9b04      	ldr	r3, [sp, #16]
 8003e56:	9a08      	ldr	r2, [sp, #32]
 8003e58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d043      	beq.n	8003ee8 <_dtoa_r+0xb78>
 8003e60:	4651      	mov	r1, sl
 8003e62:	2300      	movs	r3, #0
 8003e64:	220a      	movs	r2, #10
 8003e66:	4620      	mov	r0, r4
 8003e68:	f000 f9d6 	bl	8004218 <__multadd>
 8003e6c:	45b8      	cmp	r8, r7
 8003e6e:	4682      	mov	sl, r0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	f04f 020a 	mov.w	r2, #10
 8003e78:	4641      	mov	r1, r8
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	d107      	bne.n	8003e8e <_dtoa_r+0xb1e>
 8003e7e:	f000 f9cb 	bl	8004218 <__multadd>
 8003e82:	4680      	mov	r8, r0
 8003e84:	4607      	mov	r7, r0
 8003e86:	9b04      	ldr	r3, [sp, #16]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	e775      	b.n	8003d7a <_dtoa_r+0xa0a>
 8003e8e:	f000 f9c3 	bl	8004218 <__multadd>
 8003e92:	4639      	mov	r1, r7
 8003e94:	4680      	mov	r8, r0
 8003e96:	2300      	movs	r3, #0
 8003e98:	220a      	movs	r2, #10
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f000 f9bc 	bl	8004218 <__multadd>
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	e7f0      	b.n	8003e86 <_dtoa_r+0xb16>
 8003ea4:	9b04      	ldr	r3, [sp, #16]
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	9d00      	ldr	r5, [sp, #0]
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4650      	mov	r0, sl
 8003eae:	f7ff f9d4 	bl	800325a <quorem>
 8003eb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003eb6:	9b00      	ldr	r3, [sp, #0]
 8003eb8:	f805 9b01 	strb.w	r9, [r5], #1
 8003ebc:	1aea      	subs	r2, r5, r3
 8003ebe:	9b01      	ldr	r3, [sp, #4]
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	dd07      	ble.n	8003ed4 <_dtoa_r+0xb64>
 8003ec4:	4651      	mov	r1, sl
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	220a      	movs	r2, #10
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 f9a4 	bl	8004218 <__multadd>
 8003ed0:	4682      	mov	sl, r0
 8003ed2:	e7ea      	b.n	8003eaa <_dtoa_r+0xb3a>
 8003ed4:	9b01      	ldr	r3, [sp, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfc8      	it	gt
 8003eda:	461d      	movgt	r5, r3
 8003edc:	9b00      	ldr	r3, [sp, #0]
 8003ede:	bfd8      	it	le
 8003ee0:	2501      	movle	r5, #1
 8003ee2:	441d      	add	r5, r3
 8003ee4:	f04f 0800 	mov.w	r8, #0
 8003ee8:	4651      	mov	r1, sl
 8003eea:	2201      	movs	r2, #1
 8003eec:	4620      	mov	r0, r4
 8003eee:	f000 fb41 	bl	8004574 <__lshift>
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	4682      	mov	sl, r0
 8003ef6:	f000 fba9 	bl	800464c <__mcmp>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	dc96      	bgt.n	8003e2c <_dtoa_r+0xabc>
 8003efe:	d102      	bne.n	8003f06 <_dtoa_r+0xb96>
 8003f00:	f019 0f01 	tst.w	r9, #1
 8003f04:	d192      	bne.n	8003e2c <_dtoa_r+0xabc>
 8003f06:	462b      	mov	r3, r5
 8003f08:	461d      	mov	r5, r3
 8003f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f0e:	2a30      	cmp	r2, #48	; 0x30
 8003f10:	d0fa      	beq.n	8003f08 <_dtoa_r+0xb98>
 8003f12:	e6dd      	b.n	8003cd0 <_dtoa_r+0x960>
 8003f14:	9a00      	ldr	r2, [sp, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d189      	bne.n	8003e2e <_dtoa_r+0xabe>
 8003f1a:	f10b 0b01 	add.w	fp, fp, #1
 8003f1e:	2331      	movs	r3, #49	; 0x31
 8003f20:	e796      	b.n	8003e50 <_dtoa_r+0xae0>
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <_dtoa_r+0xbdc>)
 8003f24:	f7ff ba99 	b.w	800345a <_dtoa_r+0xea>
 8003f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f47f aa6d 	bne.w	800340a <_dtoa_r+0x9a>
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <_dtoa_r+0xbe0>)
 8003f32:	f7ff ba92 	b.w	800345a <_dtoa_r+0xea>
 8003f36:	9b01      	ldr	r3, [sp, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dcb5      	bgt.n	8003ea8 <_dtoa_r+0xb38>
 8003f3c:	9b07      	ldr	r3, [sp, #28]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	f73f aeb1 	bgt.w	8003ca6 <_dtoa_r+0x936>
 8003f44:	e7b0      	b.n	8003ea8 <_dtoa_r+0xb38>
 8003f46:	bf00      	nop
 8003f48:	08005484 	.word	0x08005484
 8003f4c:	080053e4 	.word	0x080053e4
 8003f50:	08005408 	.word	0x08005408

08003f54 <_free_r>:
 8003f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f56:	2900      	cmp	r1, #0
 8003f58:	d044      	beq.n	8003fe4 <_free_r+0x90>
 8003f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f5e:	9001      	str	r0, [sp, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f1a1 0404 	sub.w	r4, r1, #4
 8003f66:	bfb8      	it	lt
 8003f68:	18e4      	addlt	r4, r4, r3
 8003f6a:	f000 f8e7 	bl	800413c <__malloc_lock>
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <_free_r+0x94>)
 8003f70:	9801      	ldr	r0, [sp, #4]
 8003f72:	6813      	ldr	r3, [r2, #0]
 8003f74:	b933      	cbnz	r3, 8003f84 <_free_r+0x30>
 8003f76:	6063      	str	r3, [r4, #4]
 8003f78:	6014      	str	r4, [r2, #0]
 8003f7a:	b003      	add	sp, #12
 8003f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f80:	f000 b8e2 	b.w	8004148 <__malloc_unlock>
 8003f84:	42a3      	cmp	r3, r4
 8003f86:	d908      	bls.n	8003f9a <_free_r+0x46>
 8003f88:	6825      	ldr	r5, [r4, #0]
 8003f8a:	1961      	adds	r1, r4, r5
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	bf01      	itttt	eq
 8003f90:	6819      	ldreq	r1, [r3, #0]
 8003f92:	685b      	ldreq	r3, [r3, #4]
 8003f94:	1949      	addeq	r1, r1, r5
 8003f96:	6021      	streq	r1, [r4, #0]
 8003f98:	e7ed      	b.n	8003f76 <_free_r+0x22>
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	b10b      	cbz	r3, 8003fa4 <_free_r+0x50>
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	d9fa      	bls.n	8003f9a <_free_r+0x46>
 8003fa4:	6811      	ldr	r1, [r2, #0]
 8003fa6:	1855      	adds	r5, r2, r1
 8003fa8:	42a5      	cmp	r5, r4
 8003faa:	d10b      	bne.n	8003fc4 <_free_r+0x70>
 8003fac:	6824      	ldr	r4, [r4, #0]
 8003fae:	4421      	add	r1, r4
 8003fb0:	1854      	adds	r4, r2, r1
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	6011      	str	r1, [r2, #0]
 8003fb6:	d1e0      	bne.n	8003f7a <_free_r+0x26>
 8003fb8:	681c      	ldr	r4, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	6053      	str	r3, [r2, #4]
 8003fbe:	440c      	add	r4, r1
 8003fc0:	6014      	str	r4, [r2, #0]
 8003fc2:	e7da      	b.n	8003f7a <_free_r+0x26>
 8003fc4:	d902      	bls.n	8003fcc <_free_r+0x78>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	6003      	str	r3, [r0, #0]
 8003fca:	e7d6      	b.n	8003f7a <_free_r+0x26>
 8003fcc:	6825      	ldr	r5, [r4, #0]
 8003fce:	1961      	adds	r1, r4, r5
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	bf04      	itt	eq
 8003fd4:	6819      	ldreq	r1, [r3, #0]
 8003fd6:	685b      	ldreq	r3, [r3, #4]
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	bf04      	itt	eq
 8003fdc:	1949      	addeq	r1, r1, r5
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	6054      	str	r4, [r2, #4]
 8003fe2:	e7ca      	b.n	8003f7a <_free_r+0x26>
 8003fe4:	b003      	add	sp, #12
 8003fe6:	bd30      	pop	{r4, r5, pc}
 8003fe8:	200003c0 	.word	0x200003c0

08003fec <malloc>:
 8003fec:	4b02      	ldr	r3, [pc, #8]	; (8003ff8 <malloc+0xc>)
 8003fee:	4601      	mov	r1, r0
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	f000 b823 	b.w	800403c <_malloc_r>
 8003ff6:	bf00      	nop
 8003ff8:	20000064 	.word	0x20000064

08003ffc <sbrk_aligned>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4e0e      	ldr	r6, [pc, #56]	; (8004038 <sbrk_aligned+0x3c>)
 8004000:	460c      	mov	r4, r1
 8004002:	6831      	ldr	r1, [r6, #0]
 8004004:	4605      	mov	r5, r0
 8004006:	b911      	cbnz	r1, 800400e <sbrk_aligned+0x12>
 8004008:	f000 fe40 	bl	8004c8c <_sbrk_r>
 800400c:	6030      	str	r0, [r6, #0]
 800400e:	4621      	mov	r1, r4
 8004010:	4628      	mov	r0, r5
 8004012:	f000 fe3b 	bl	8004c8c <_sbrk_r>
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	d00a      	beq.n	8004030 <sbrk_aligned+0x34>
 800401a:	1cc4      	adds	r4, r0, #3
 800401c:	f024 0403 	bic.w	r4, r4, #3
 8004020:	42a0      	cmp	r0, r4
 8004022:	d007      	beq.n	8004034 <sbrk_aligned+0x38>
 8004024:	1a21      	subs	r1, r4, r0
 8004026:	4628      	mov	r0, r5
 8004028:	f000 fe30 	bl	8004c8c <_sbrk_r>
 800402c:	3001      	adds	r0, #1
 800402e:	d101      	bne.n	8004034 <sbrk_aligned+0x38>
 8004030:	f04f 34ff 	mov.w	r4, #4294967295
 8004034:	4620      	mov	r0, r4
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	200003c4 	.word	0x200003c4

0800403c <_malloc_r>:
 800403c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004040:	1ccd      	adds	r5, r1, #3
 8004042:	f025 0503 	bic.w	r5, r5, #3
 8004046:	3508      	adds	r5, #8
 8004048:	2d0c      	cmp	r5, #12
 800404a:	bf38      	it	cc
 800404c:	250c      	movcc	r5, #12
 800404e:	2d00      	cmp	r5, #0
 8004050:	4607      	mov	r7, r0
 8004052:	db01      	blt.n	8004058 <_malloc_r+0x1c>
 8004054:	42a9      	cmp	r1, r5
 8004056:	d905      	bls.n	8004064 <_malloc_r+0x28>
 8004058:	230c      	movs	r3, #12
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	2600      	movs	r6, #0
 800405e:	4630      	mov	r0, r6
 8004060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004064:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004138 <_malloc_r+0xfc>
 8004068:	f000 f868 	bl	800413c <__malloc_lock>
 800406c:	f8d8 3000 	ldr.w	r3, [r8]
 8004070:	461c      	mov	r4, r3
 8004072:	bb5c      	cbnz	r4, 80040cc <_malloc_r+0x90>
 8004074:	4629      	mov	r1, r5
 8004076:	4638      	mov	r0, r7
 8004078:	f7ff ffc0 	bl	8003ffc <sbrk_aligned>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	4604      	mov	r4, r0
 8004080:	d155      	bne.n	800412e <_malloc_r+0xf2>
 8004082:	f8d8 4000 	ldr.w	r4, [r8]
 8004086:	4626      	mov	r6, r4
 8004088:	2e00      	cmp	r6, #0
 800408a:	d145      	bne.n	8004118 <_malloc_r+0xdc>
 800408c:	2c00      	cmp	r4, #0
 800408e:	d048      	beq.n	8004122 <_malloc_r+0xe6>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	4631      	mov	r1, r6
 8004094:	4638      	mov	r0, r7
 8004096:	eb04 0903 	add.w	r9, r4, r3
 800409a:	f000 fdf7 	bl	8004c8c <_sbrk_r>
 800409e:	4581      	cmp	r9, r0
 80040a0:	d13f      	bne.n	8004122 <_malloc_r+0xe6>
 80040a2:	6821      	ldr	r1, [r4, #0]
 80040a4:	1a6d      	subs	r5, r5, r1
 80040a6:	4629      	mov	r1, r5
 80040a8:	4638      	mov	r0, r7
 80040aa:	f7ff ffa7 	bl	8003ffc <sbrk_aligned>
 80040ae:	3001      	adds	r0, #1
 80040b0:	d037      	beq.n	8004122 <_malloc_r+0xe6>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	442b      	add	r3, r5
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	f8d8 3000 	ldr.w	r3, [r8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d038      	beq.n	8004132 <_malloc_r+0xf6>
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	42a2      	cmp	r2, r4
 80040c4:	d12b      	bne.n	800411e <_malloc_r+0xe2>
 80040c6:	2200      	movs	r2, #0
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	e00f      	b.n	80040ec <_malloc_r+0xb0>
 80040cc:	6822      	ldr	r2, [r4, #0]
 80040ce:	1b52      	subs	r2, r2, r5
 80040d0:	d41f      	bmi.n	8004112 <_malloc_r+0xd6>
 80040d2:	2a0b      	cmp	r2, #11
 80040d4:	d917      	bls.n	8004106 <_malloc_r+0xca>
 80040d6:	1961      	adds	r1, r4, r5
 80040d8:	42a3      	cmp	r3, r4
 80040da:	6025      	str	r5, [r4, #0]
 80040dc:	bf18      	it	ne
 80040de:	6059      	strne	r1, [r3, #4]
 80040e0:	6863      	ldr	r3, [r4, #4]
 80040e2:	bf08      	it	eq
 80040e4:	f8c8 1000 	streq.w	r1, [r8]
 80040e8:	5162      	str	r2, [r4, r5]
 80040ea:	604b      	str	r3, [r1, #4]
 80040ec:	4638      	mov	r0, r7
 80040ee:	f104 060b 	add.w	r6, r4, #11
 80040f2:	f000 f829 	bl	8004148 <__malloc_unlock>
 80040f6:	f026 0607 	bic.w	r6, r6, #7
 80040fa:	1d23      	adds	r3, r4, #4
 80040fc:	1af2      	subs	r2, r6, r3
 80040fe:	d0ae      	beq.n	800405e <_malloc_r+0x22>
 8004100:	1b9b      	subs	r3, r3, r6
 8004102:	50a3      	str	r3, [r4, r2]
 8004104:	e7ab      	b.n	800405e <_malloc_r+0x22>
 8004106:	42a3      	cmp	r3, r4
 8004108:	6862      	ldr	r2, [r4, #4]
 800410a:	d1dd      	bne.n	80040c8 <_malloc_r+0x8c>
 800410c:	f8c8 2000 	str.w	r2, [r8]
 8004110:	e7ec      	b.n	80040ec <_malloc_r+0xb0>
 8004112:	4623      	mov	r3, r4
 8004114:	6864      	ldr	r4, [r4, #4]
 8004116:	e7ac      	b.n	8004072 <_malloc_r+0x36>
 8004118:	4634      	mov	r4, r6
 800411a:	6876      	ldr	r6, [r6, #4]
 800411c:	e7b4      	b.n	8004088 <_malloc_r+0x4c>
 800411e:	4613      	mov	r3, r2
 8004120:	e7cc      	b.n	80040bc <_malloc_r+0x80>
 8004122:	230c      	movs	r3, #12
 8004124:	603b      	str	r3, [r7, #0]
 8004126:	4638      	mov	r0, r7
 8004128:	f000 f80e 	bl	8004148 <__malloc_unlock>
 800412c:	e797      	b.n	800405e <_malloc_r+0x22>
 800412e:	6025      	str	r5, [r4, #0]
 8004130:	e7dc      	b.n	80040ec <_malloc_r+0xb0>
 8004132:	605b      	str	r3, [r3, #4]
 8004134:	deff      	udf	#255	; 0xff
 8004136:	bf00      	nop
 8004138:	200003c0 	.word	0x200003c0

0800413c <__malloc_lock>:
 800413c:	4801      	ldr	r0, [pc, #4]	; (8004144 <__malloc_lock+0x8>)
 800413e:	f7ff b88a 	b.w	8003256 <__retarget_lock_acquire_recursive>
 8004142:	bf00      	nop
 8004144:	200003bc 	.word	0x200003bc

08004148 <__malloc_unlock>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__malloc_unlock+0x8>)
 800414a:	f7ff b885 	b.w	8003258 <__retarget_lock_release_recursive>
 800414e:	bf00      	nop
 8004150:	200003bc 	.word	0x200003bc

08004154 <_Balloc>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	69c6      	ldr	r6, [r0, #28]
 8004158:	4604      	mov	r4, r0
 800415a:	460d      	mov	r5, r1
 800415c:	b976      	cbnz	r6, 800417c <_Balloc+0x28>
 800415e:	2010      	movs	r0, #16
 8004160:	f7ff ff44 	bl	8003fec <malloc>
 8004164:	4602      	mov	r2, r0
 8004166:	61e0      	str	r0, [r4, #28]
 8004168:	b920      	cbnz	r0, 8004174 <_Balloc+0x20>
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <_Balloc+0x78>)
 800416c:	4818      	ldr	r0, [pc, #96]	; (80041d0 <_Balloc+0x7c>)
 800416e:	216b      	movs	r1, #107	; 0x6b
 8004170:	f000 fdaa 	bl	8004cc8 <__assert_func>
 8004174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004178:	6006      	str	r6, [r0, #0]
 800417a:	60c6      	str	r6, [r0, #12]
 800417c:	69e6      	ldr	r6, [r4, #28]
 800417e:	68f3      	ldr	r3, [r6, #12]
 8004180:	b183      	cbz	r3, 80041a4 <_Balloc+0x50>
 8004182:	69e3      	ldr	r3, [r4, #28]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800418a:	b9b8      	cbnz	r0, 80041bc <_Balloc+0x68>
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f605 	lsl.w	r6, r1, r5
 8004192:	1d72      	adds	r2, r6, #5
 8004194:	0092      	lsls	r2, r2, #2
 8004196:	4620      	mov	r0, r4
 8004198:	f000 fdb4 	bl	8004d04 <_calloc_r>
 800419c:	b160      	cbz	r0, 80041b8 <_Balloc+0x64>
 800419e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80041a2:	e00e      	b.n	80041c2 <_Balloc+0x6e>
 80041a4:	2221      	movs	r2, #33	; 0x21
 80041a6:	2104      	movs	r1, #4
 80041a8:	4620      	mov	r0, r4
 80041aa:	f000 fdab 	bl	8004d04 <_calloc_r>
 80041ae:	69e3      	ldr	r3, [r4, #28]
 80041b0:	60f0      	str	r0, [r6, #12]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e4      	bne.n	8004182 <_Balloc+0x2e>
 80041b8:	2000      	movs	r0, #0
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	6802      	ldr	r2, [r0, #0]
 80041be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80041c2:	2300      	movs	r3, #0
 80041c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80041c8:	e7f7      	b.n	80041ba <_Balloc+0x66>
 80041ca:	bf00      	nop
 80041cc:	08005415 	.word	0x08005415
 80041d0:	08005495 	.word	0x08005495

080041d4 <_Bfree>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	69c6      	ldr	r6, [r0, #28]
 80041d8:	4605      	mov	r5, r0
 80041da:	460c      	mov	r4, r1
 80041dc:	b976      	cbnz	r6, 80041fc <_Bfree+0x28>
 80041de:	2010      	movs	r0, #16
 80041e0:	f7ff ff04 	bl	8003fec <malloc>
 80041e4:	4602      	mov	r2, r0
 80041e6:	61e8      	str	r0, [r5, #28]
 80041e8:	b920      	cbnz	r0, 80041f4 <_Bfree+0x20>
 80041ea:	4b09      	ldr	r3, [pc, #36]	; (8004210 <_Bfree+0x3c>)
 80041ec:	4809      	ldr	r0, [pc, #36]	; (8004214 <_Bfree+0x40>)
 80041ee:	218f      	movs	r1, #143	; 0x8f
 80041f0:	f000 fd6a 	bl	8004cc8 <__assert_func>
 80041f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80041f8:	6006      	str	r6, [r0, #0]
 80041fa:	60c6      	str	r6, [r0, #12]
 80041fc:	b13c      	cbz	r4, 800420e <_Bfree+0x3a>
 80041fe:	69eb      	ldr	r3, [r5, #28]
 8004200:	6862      	ldr	r2, [r4, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004208:	6021      	str	r1, [r4, #0]
 800420a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	08005415 	.word	0x08005415
 8004214:	08005495 	.word	0x08005495

08004218 <__multadd>:
 8004218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421c:	690d      	ldr	r5, [r1, #16]
 800421e:	4607      	mov	r7, r0
 8004220:	460c      	mov	r4, r1
 8004222:	461e      	mov	r6, r3
 8004224:	f101 0c14 	add.w	ip, r1, #20
 8004228:	2000      	movs	r0, #0
 800422a:	f8dc 3000 	ldr.w	r3, [ip]
 800422e:	b299      	uxth	r1, r3
 8004230:	fb02 6101 	mla	r1, r2, r1, r6
 8004234:	0c1e      	lsrs	r6, r3, #16
 8004236:	0c0b      	lsrs	r3, r1, #16
 8004238:	fb02 3306 	mla	r3, r2, r6, r3
 800423c:	b289      	uxth	r1, r1
 800423e:	3001      	adds	r0, #1
 8004240:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004244:	4285      	cmp	r5, r0
 8004246:	f84c 1b04 	str.w	r1, [ip], #4
 800424a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800424e:	dcec      	bgt.n	800422a <__multadd+0x12>
 8004250:	b30e      	cbz	r6, 8004296 <__multadd+0x7e>
 8004252:	68a3      	ldr	r3, [r4, #8]
 8004254:	42ab      	cmp	r3, r5
 8004256:	dc19      	bgt.n	800428c <__multadd+0x74>
 8004258:	6861      	ldr	r1, [r4, #4]
 800425a:	4638      	mov	r0, r7
 800425c:	3101      	adds	r1, #1
 800425e:	f7ff ff79 	bl	8004154 <_Balloc>
 8004262:	4680      	mov	r8, r0
 8004264:	b928      	cbnz	r0, 8004272 <__multadd+0x5a>
 8004266:	4602      	mov	r2, r0
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <__multadd+0x84>)
 800426a:	480d      	ldr	r0, [pc, #52]	; (80042a0 <__multadd+0x88>)
 800426c:	21ba      	movs	r1, #186	; 0xba
 800426e:	f000 fd2b 	bl	8004cc8 <__assert_func>
 8004272:	6922      	ldr	r2, [r4, #16]
 8004274:	3202      	adds	r2, #2
 8004276:	f104 010c 	add.w	r1, r4, #12
 800427a:	0092      	lsls	r2, r2, #2
 800427c:	300c      	adds	r0, #12
 800427e:	f000 fd15 	bl	8004cac <memcpy>
 8004282:	4621      	mov	r1, r4
 8004284:	4638      	mov	r0, r7
 8004286:	f7ff ffa5 	bl	80041d4 <_Bfree>
 800428a:	4644      	mov	r4, r8
 800428c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004290:	3501      	adds	r5, #1
 8004292:	615e      	str	r6, [r3, #20]
 8004294:	6125      	str	r5, [r4, #16]
 8004296:	4620      	mov	r0, r4
 8004298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800429c:	08005484 	.word	0x08005484
 80042a0:	08005495 	.word	0x08005495

080042a4 <__hi0bits>:
 80042a4:	0c03      	lsrs	r3, r0, #16
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	b9d3      	cbnz	r3, 80042e0 <__hi0bits+0x3c>
 80042aa:	0400      	lsls	r0, r0, #16
 80042ac:	2310      	movs	r3, #16
 80042ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80042b2:	bf04      	itt	eq
 80042b4:	0200      	lsleq	r0, r0, #8
 80042b6:	3308      	addeq	r3, #8
 80042b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80042bc:	bf04      	itt	eq
 80042be:	0100      	lsleq	r0, r0, #4
 80042c0:	3304      	addeq	r3, #4
 80042c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80042c6:	bf04      	itt	eq
 80042c8:	0080      	lsleq	r0, r0, #2
 80042ca:	3302      	addeq	r3, #2
 80042cc:	2800      	cmp	r0, #0
 80042ce:	db05      	blt.n	80042dc <__hi0bits+0x38>
 80042d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80042d4:	f103 0301 	add.w	r3, r3, #1
 80042d8:	bf08      	it	eq
 80042da:	2320      	moveq	r3, #32
 80042dc:	4618      	mov	r0, r3
 80042de:	4770      	bx	lr
 80042e0:	2300      	movs	r3, #0
 80042e2:	e7e4      	b.n	80042ae <__hi0bits+0xa>

080042e4 <__lo0bits>:
 80042e4:	6803      	ldr	r3, [r0, #0]
 80042e6:	f013 0207 	ands.w	r2, r3, #7
 80042ea:	d00c      	beq.n	8004306 <__lo0bits+0x22>
 80042ec:	07d9      	lsls	r1, r3, #31
 80042ee:	d422      	bmi.n	8004336 <__lo0bits+0x52>
 80042f0:	079a      	lsls	r2, r3, #30
 80042f2:	bf49      	itett	mi
 80042f4:	085b      	lsrmi	r3, r3, #1
 80042f6:	089b      	lsrpl	r3, r3, #2
 80042f8:	6003      	strmi	r3, [r0, #0]
 80042fa:	2201      	movmi	r2, #1
 80042fc:	bf5c      	itt	pl
 80042fe:	6003      	strpl	r3, [r0, #0]
 8004300:	2202      	movpl	r2, #2
 8004302:	4610      	mov	r0, r2
 8004304:	4770      	bx	lr
 8004306:	b299      	uxth	r1, r3
 8004308:	b909      	cbnz	r1, 800430e <__lo0bits+0x2a>
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	2210      	movs	r2, #16
 800430e:	b2d9      	uxtb	r1, r3
 8004310:	b909      	cbnz	r1, 8004316 <__lo0bits+0x32>
 8004312:	3208      	adds	r2, #8
 8004314:	0a1b      	lsrs	r3, r3, #8
 8004316:	0719      	lsls	r1, r3, #28
 8004318:	bf04      	itt	eq
 800431a:	091b      	lsreq	r3, r3, #4
 800431c:	3204      	addeq	r2, #4
 800431e:	0799      	lsls	r1, r3, #30
 8004320:	bf04      	itt	eq
 8004322:	089b      	lsreq	r3, r3, #2
 8004324:	3202      	addeq	r2, #2
 8004326:	07d9      	lsls	r1, r3, #31
 8004328:	d403      	bmi.n	8004332 <__lo0bits+0x4e>
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	f102 0201 	add.w	r2, r2, #1
 8004330:	d003      	beq.n	800433a <__lo0bits+0x56>
 8004332:	6003      	str	r3, [r0, #0]
 8004334:	e7e5      	b.n	8004302 <__lo0bits+0x1e>
 8004336:	2200      	movs	r2, #0
 8004338:	e7e3      	b.n	8004302 <__lo0bits+0x1e>
 800433a:	2220      	movs	r2, #32
 800433c:	e7e1      	b.n	8004302 <__lo0bits+0x1e>
	...

08004340 <__i2b>:
 8004340:	b510      	push	{r4, lr}
 8004342:	460c      	mov	r4, r1
 8004344:	2101      	movs	r1, #1
 8004346:	f7ff ff05 	bl	8004154 <_Balloc>
 800434a:	4602      	mov	r2, r0
 800434c:	b928      	cbnz	r0, 800435a <__i2b+0x1a>
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <__i2b+0x24>)
 8004350:	4805      	ldr	r0, [pc, #20]	; (8004368 <__i2b+0x28>)
 8004352:	f240 1145 	movw	r1, #325	; 0x145
 8004356:	f000 fcb7 	bl	8004cc8 <__assert_func>
 800435a:	2301      	movs	r3, #1
 800435c:	6144      	str	r4, [r0, #20]
 800435e:	6103      	str	r3, [r0, #16]
 8004360:	bd10      	pop	{r4, pc}
 8004362:	bf00      	nop
 8004364:	08005484 	.word	0x08005484
 8004368:	08005495 	.word	0x08005495

0800436c <__multiply>:
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	4691      	mov	r9, r2
 8004372:	690a      	ldr	r2, [r1, #16]
 8004374:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	bfb8      	it	lt
 800437c:	460b      	movlt	r3, r1
 800437e:	460c      	mov	r4, r1
 8004380:	bfbc      	itt	lt
 8004382:	464c      	movlt	r4, r9
 8004384:	4699      	movlt	r9, r3
 8004386:	6927      	ldr	r7, [r4, #16]
 8004388:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800438c:	68a3      	ldr	r3, [r4, #8]
 800438e:	6861      	ldr	r1, [r4, #4]
 8004390:	eb07 060a 	add.w	r6, r7, sl
 8004394:	42b3      	cmp	r3, r6
 8004396:	b085      	sub	sp, #20
 8004398:	bfb8      	it	lt
 800439a:	3101      	addlt	r1, #1
 800439c:	f7ff feda 	bl	8004154 <_Balloc>
 80043a0:	b930      	cbnz	r0, 80043b0 <__multiply+0x44>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b44      	ldr	r3, [pc, #272]	; (80044b8 <__multiply+0x14c>)
 80043a6:	4845      	ldr	r0, [pc, #276]	; (80044bc <__multiply+0x150>)
 80043a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80043ac:	f000 fc8c 	bl	8004cc8 <__assert_func>
 80043b0:	f100 0514 	add.w	r5, r0, #20
 80043b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80043b8:	462b      	mov	r3, r5
 80043ba:	2200      	movs	r2, #0
 80043bc:	4543      	cmp	r3, r8
 80043be:	d321      	bcc.n	8004404 <__multiply+0x98>
 80043c0:	f104 0314 	add.w	r3, r4, #20
 80043c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80043c8:	f109 0314 	add.w	r3, r9, #20
 80043cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80043d0:	9202      	str	r2, [sp, #8]
 80043d2:	1b3a      	subs	r2, r7, r4
 80043d4:	3a15      	subs	r2, #21
 80043d6:	f022 0203 	bic.w	r2, r2, #3
 80043da:	3204      	adds	r2, #4
 80043dc:	f104 0115 	add.w	r1, r4, #21
 80043e0:	428f      	cmp	r7, r1
 80043e2:	bf38      	it	cc
 80043e4:	2204      	movcc	r2, #4
 80043e6:	9201      	str	r2, [sp, #4]
 80043e8:	9a02      	ldr	r2, [sp, #8]
 80043ea:	9303      	str	r3, [sp, #12]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d80c      	bhi.n	800440a <__multiply+0x9e>
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	dd03      	ble.n	80043fc <__multiply+0x90>
 80043f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d05b      	beq.n	80044b4 <__multiply+0x148>
 80043fc:	6106      	str	r6, [r0, #16]
 80043fe:	b005      	add	sp, #20
 8004400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004404:	f843 2b04 	str.w	r2, [r3], #4
 8004408:	e7d8      	b.n	80043bc <__multiply+0x50>
 800440a:	f8b3 a000 	ldrh.w	sl, [r3]
 800440e:	f1ba 0f00 	cmp.w	sl, #0
 8004412:	d024      	beq.n	800445e <__multiply+0xf2>
 8004414:	f104 0e14 	add.w	lr, r4, #20
 8004418:	46a9      	mov	r9, r5
 800441a:	f04f 0c00 	mov.w	ip, #0
 800441e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004422:	f8d9 1000 	ldr.w	r1, [r9]
 8004426:	fa1f fb82 	uxth.w	fp, r2
 800442a:	b289      	uxth	r1, r1
 800442c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004430:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004434:	f8d9 2000 	ldr.w	r2, [r9]
 8004438:	4461      	add	r1, ip
 800443a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800443e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004446:	b289      	uxth	r1, r1
 8004448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800444c:	4577      	cmp	r7, lr
 800444e:	f849 1b04 	str.w	r1, [r9], #4
 8004452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004456:	d8e2      	bhi.n	800441e <__multiply+0xb2>
 8004458:	9a01      	ldr	r2, [sp, #4]
 800445a:	f845 c002 	str.w	ip, [r5, r2]
 800445e:	9a03      	ldr	r2, [sp, #12]
 8004460:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004464:	3304      	adds	r3, #4
 8004466:	f1b9 0f00 	cmp.w	r9, #0
 800446a:	d021      	beq.n	80044b0 <__multiply+0x144>
 800446c:	6829      	ldr	r1, [r5, #0]
 800446e:	f104 0c14 	add.w	ip, r4, #20
 8004472:	46ae      	mov	lr, r5
 8004474:	f04f 0a00 	mov.w	sl, #0
 8004478:	f8bc b000 	ldrh.w	fp, [ip]
 800447c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004480:	fb09 220b 	mla	r2, r9, fp, r2
 8004484:	4452      	add	r2, sl
 8004486:	b289      	uxth	r1, r1
 8004488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800448c:	f84e 1b04 	str.w	r1, [lr], #4
 8004490:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004498:	f8be 1000 	ldrh.w	r1, [lr]
 800449c:	fb09 110a 	mla	r1, r9, sl, r1
 80044a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80044a4:	4567      	cmp	r7, ip
 80044a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80044aa:	d8e5      	bhi.n	8004478 <__multiply+0x10c>
 80044ac:	9a01      	ldr	r2, [sp, #4]
 80044ae:	50a9      	str	r1, [r5, r2]
 80044b0:	3504      	adds	r5, #4
 80044b2:	e799      	b.n	80043e8 <__multiply+0x7c>
 80044b4:	3e01      	subs	r6, #1
 80044b6:	e79b      	b.n	80043f0 <__multiply+0x84>
 80044b8:	08005484 	.word	0x08005484
 80044bc:	08005495 	.word	0x08005495

080044c0 <__pow5mult>:
 80044c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c4:	4615      	mov	r5, r2
 80044c6:	f012 0203 	ands.w	r2, r2, #3
 80044ca:	4606      	mov	r6, r0
 80044cc:	460f      	mov	r7, r1
 80044ce:	d007      	beq.n	80044e0 <__pow5mult+0x20>
 80044d0:	4c25      	ldr	r4, [pc, #148]	; (8004568 <__pow5mult+0xa8>)
 80044d2:	3a01      	subs	r2, #1
 80044d4:	2300      	movs	r3, #0
 80044d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80044da:	f7ff fe9d 	bl	8004218 <__multadd>
 80044de:	4607      	mov	r7, r0
 80044e0:	10ad      	asrs	r5, r5, #2
 80044e2:	d03d      	beq.n	8004560 <__pow5mult+0xa0>
 80044e4:	69f4      	ldr	r4, [r6, #28]
 80044e6:	b97c      	cbnz	r4, 8004508 <__pow5mult+0x48>
 80044e8:	2010      	movs	r0, #16
 80044ea:	f7ff fd7f 	bl	8003fec <malloc>
 80044ee:	4602      	mov	r2, r0
 80044f0:	61f0      	str	r0, [r6, #28]
 80044f2:	b928      	cbnz	r0, 8004500 <__pow5mult+0x40>
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <__pow5mult+0xac>)
 80044f6:	481e      	ldr	r0, [pc, #120]	; (8004570 <__pow5mult+0xb0>)
 80044f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80044fc:	f000 fbe4 	bl	8004cc8 <__assert_func>
 8004500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004504:	6004      	str	r4, [r0, #0]
 8004506:	60c4      	str	r4, [r0, #12]
 8004508:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800450c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004510:	b94c      	cbnz	r4, 8004526 <__pow5mult+0x66>
 8004512:	f240 2171 	movw	r1, #625	; 0x271
 8004516:	4630      	mov	r0, r6
 8004518:	f7ff ff12 	bl	8004340 <__i2b>
 800451c:	2300      	movs	r3, #0
 800451e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004522:	4604      	mov	r4, r0
 8004524:	6003      	str	r3, [r0, #0]
 8004526:	f04f 0900 	mov.w	r9, #0
 800452a:	07eb      	lsls	r3, r5, #31
 800452c:	d50a      	bpl.n	8004544 <__pow5mult+0x84>
 800452e:	4639      	mov	r1, r7
 8004530:	4622      	mov	r2, r4
 8004532:	4630      	mov	r0, r6
 8004534:	f7ff ff1a 	bl	800436c <__multiply>
 8004538:	4639      	mov	r1, r7
 800453a:	4680      	mov	r8, r0
 800453c:	4630      	mov	r0, r6
 800453e:	f7ff fe49 	bl	80041d4 <_Bfree>
 8004542:	4647      	mov	r7, r8
 8004544:	106d      	asrs	r5, r5, #1
 8004546:	d00b      	beq.n	8004560 <__pow5mult+0xa0>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	b938      	cbnz	r0, 800455c <__pow5mult+0x9c>
 800454c:	4622      	mov	r2, r4
 800454e:	4621      	mov	r1, r4
 8004550:	4630      	mov	r0, r6
 8004552:	f7ff ff0b 	bl	800436c <__multiply>
 8004556:	6020      	str	r0, [r4, #0]
 8004558:	f8c0 9000 	str.w	r9, [r0]
 800455c:	4604      	mov	r4, r0
 800455e:	e7e4      	b.n	800452a <__pow5mult+0x6a>
 8004560:	4638      	mov	r0, r7
 8004562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004566:	bf00      	nop
 8004568:	080055e0 	.word	0x080055e0
 800456c:	08005415 	.word	0x08005415
 8004570:	08005495 	.word	0x08005495

08004574 <__lshift>:
 8004574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004578:	460c      	mov	r4, r1
 800457a:	6849      	ldr	r1, [r1, #4]
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004582:	68a3      	ldr	r3, [r4, #8]
 8004584:	4607      	mov	r7, r0
 8004586:	4691      	mov	r9, r2
 8004588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800458c:	f108 0601 	add.w	r6, r8, #1
 8004590:	42b3      	cmp	r3, r6
 8004592:	db0b      	blt.n	80045ac <__lshift+0x38>
 8004594:	4638      	mov	r0, r7
 8004596:	f7ff fddd 	bl	8004154 <_Balloc>
 800459a:	4605      	mov	r5, r0
 800459c:	b948      	cbnz	r0, 80045b2 <__lshift+0x3e>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <__lshift+0xd0>)
 80045a2:	4829      	ldr	r0, [pc, #164]	; (8004648 <__lshift+0xd4>)
 80045a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80045a8:	f000 fb8e 	bl	8004cc8 <__assert_func>
 80045ac:	3101      	adds	r1, #1
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	e7ee      	b.n	8004590 <__lshift+0x1c>
 80045b2:	2300      	movs	r3, #0
 80045b4:	f100 0114 	add.w	r1, r0, #20
 80045b8:	f100 0210 	add.w	r2, r0, #16
 80045bc:	4618      	mov	r0, r3
 80045be:	4553      	cmp	r3, sl
 80045c0:	db33      	blt.n	800462a <__lshift+0xb6>
 80045c2:	6920      	ldr	r0, [r4, #16]
 80045c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045c8:	f104 0314 	add.w	r3, r4, #20
 80045cc:	f019 091f 	ands.w	r9, r9, #31
 80045d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80045d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80045d8:	d02b      	beq.n	8004632 <__lshift+0xbe>
 80045da:	f1c9 0e20 	rsb	lr, r9, #32
 80045de:	468a      	mov	sl, r1
 80045e0:	2200      	movs	r2, #0
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	fa00 f009 	lsl.w	r0, r0, r9
 80045e8:	4310      	orrs	r0, r2
 80045ea:	f84a 0b04 	str.w	r0, [sl], #4
 80045ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80045f2:	459c      	cmp	ip, r3
 80045f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80045f8:	d8f3      	bhi.n	80045e2 <__lshift+0x6e>
 80045fa:	ebac 0304 	sub.w	r3, ip, r4
 80045fe:	3b15      	subs	r3, #21
 8004600:	f023 0303 	bic.w	r3, r3, #3
 8004604:	3304      	adds	r3, #4
 8004606:	f104 0015 	add.w	r0, r4, #21
 800460a:	4584      	cmp	ip, r0
 800460c:	bf38      	it	cc
 800460e:	2304      	movcc	r3, #4
 8004610:	50ca      	str	r2, [r1, r3]
 8004612:	b10a      	cbz	r2, 8004618 <__lshift+0xa4>
 8004614:	f108 0602 	add.w	r6, r8, #2
 8004618:	3e01      	subs	r6, #1
 800461a:	4638      	mov	r0, r7
 800461c:	612e      	str	r6, [r5, #16]
 800461e:	4621      	mov	r1, r4
 8004620:	f7ff fdd8 	bl	80041d4 <_Bfree>
 8004624:	4628      	mov	r0, r5
 8004626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462a:	f842 0f04 	str.w	r0, [r2, #4]!
 800462e:	3301      	adds	r3, #1
 8004630:	e7c5      	b.n	80045be <__lshift+0x4a>
 8004632:	3904      	subs	r1, #4
 8004634:	f853 2b04 	ldr.w	r2, [r3], #4
 8004638:	f841 2f04 	str.w	r2, [r1, #4]!
 800463c:	459c      	cmp	ip, r3
 800463e:	d8f9      	bhi.n	8004634 <__lshift+0xc0>
 8004640:	e7ea      	b.n	8004618 <__lshift+0xa4>
 8004642:	bf00      	nop
 8004644:	08005484 	.word	0x08005484
 8004648:	08005495 	.word	0x08005495

0800464c <__mcmp>:
 800464c:	b530      	push	{r4, r5, lr}
 800464e:	6902      	ldr	r2, [r0, #16]
 8004650:	690c      	ldr	r4, [r1, #16]
 8004652:	1b12      	subs	r2, r2, r4
 8004654:	d10e      	bne.n	8004674 <__mcmp+0x28>
 8004656:	f100 0314 	add.w	r3, r0, #20
 800465a:	3114      	adds	r1, #20
 800465c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004660:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004664:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004668:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800466c:	42a5      	cmp	r5, r4
 800466e:	d003      	beq.n	8004678 <__mcmp+0x2c>
 8004670:	d305      	bcc.n	800467e <__mcmp+0x32>
 8004672:	2201      	movs	r2, #1
 8004674:	4610      	mov	r0, r2
 8004676:	bd30      	pop	{r4, r5, pc}
 8004678:	4283      	cmp	r3, r0
 800467a:	d3f3      	bcc.n	8004664 <__mcmp+0x18>
 800467c:	e7fa      	b.n	8004674 <__mcmp+0x28>
 800467e:	f04f 32ff 	mov.w	r2, #4294967295
 8004682:	e7f7      	b.n	8004674 <__mcmp+0x28>

08004684 <__mdiff>:
 8004684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004688:	460c      	mov	r4, r1
 800468a:	4606      	mov	r6, r0
 800468c:	4611      	mov	r1, r2
 800468e:	4620      	mov	r0, r4
 8004690:	4690      	mov	r8, r2
 8004692:	f7ff ffdb 	bl	800464c <__mcmp>
 8004696:	1e05      	subs	r5, r0, #0
 8004698:	d110      	bne.n	80046bc <__mdiff+0x38>
 800469a:	4629      	mov	r1, r5
 800469c:	4630      	mov	r0, r6
 800469e:	f7ff fd59 	bl	8004154 <_Balloc>
 80046a2:	b930      	cbnz	r0, 80046b2 <__mdiff+0x2e>
 80046a4:	4b3a      	ldr	r3, [pc, #232]	; (8004790 <__mdiff+0x10c>)
 80046a6:	4602      	mov	r2, r0
 80046a8:	f240 2137 	movw	r1, #567	; 0x237
 80046ac:	4839      	ldr	r0, [pc, #228]	; (8004794 <__mdiff+0x110>)
 80046ae:	f000 fb0b 	bl	8004cc8 <__assert_func>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80046b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046bc:	bfa4      	itt	ge
 80046be:	4643      	movge	r3, r8
 80046c0:	46a0      	movge	r8, r4
 80046c2:	4630      	mov	r0, r6
 80046c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80046c8:	bfa6      	itte	ge
 80046ca:	461c      	movge	r4, r3
 80046cc:	2500      	movge	r5, #0
 80046ce:	2501      	movlt	r5, #1
 80046d0:	f7ff fd40 	bl	8004154 <_Balloc>
 80046d4:	b920      	cbnz	r0, 80046e0 <__mdiff+0x5c>
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <__mdiff+0x10c>)
 80046d8:	4602      	mov	r2, r0
 80046da:	f240 2145 	movw	r1, #581	; 0x245
 80046de:	e7e5      	b.n	80046ac <__mdiff+0x28>
 80046e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80046e4:	6926      	ldr	r6, [r4, #16]
 80046e6:	60c5      	str	r5, [r0, #12]
 80046e8:	f104 0914 	add.w	r9, r4, #20
 80046ec:	f108 0514 	add.w	r5, r8, #20
 80046f0:	f100 0e14 	add.w	lr, r0, #20
 80046f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80046f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80046fc:	f108 0210 	add.w	r2, r8, #16
 8004700:	46f2      	mov	sl, lr
 8004702:	2100      	movs	r1, #0
 8004704:	f859 3b04 	ldr.w	r3, [r9], #4
 8004708:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800470c:	fa11 f88b 	uxtah	r8, r1, fp
 8004710:	b299      	uxth	r1, r3
 8004712:	0c1b      	lsrs	r3, r3, #16
 8004714:	eba8 0801 	sub.w	r8, r8, r1
 8004718:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800471c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004720:	fa1f f888 	uxth.w	r8, r8
 8004724:	1419      	asrs	r1, r3, #16
 8004726:	454e      	cmp	r6, r9
 8004728:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800472c:	f84a 3b04 	str.w	r3, [sl], #4
 8004730:	d8e8      	bhi.n	8004704 <__mdiff+0x80>
 8004732:	1b33      	subs	r3, r6, r4
 8004734:	3b15      	subs	r3, #21
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	3304      	adds	r3, #4
 800473c:	3415      	adds	r4, #21
 800473e:	42a6      	cmp	r6, r4
 8004740:	bf38      	it	cc
 8004742:	2304      	movcc	r3, #4
 8004744:	441d      	add	r5, r3
 8004746:	4473      	add	r3, lr
 8004748:	469e      	mov	lr, r3
 800474a:	462e      	mov	r6, r5
 800474c:	4566      	cmp	r6, ip
 800474e:	d30e      	bcc.n	800476e <__mdiff+0xea>
 8004750:	f10c 0203 	add.w	r2, ip, #3
 8004754:	1b52      	subs	r2, r2, r5
 8004756:	f022 0203 	bic.w	r2, r2, #3
 800475a:	3d03      	subs	r5, #3
 800475c:	45ac      	cmp	ip, r5
 800475e:	bf38      	it	cc
 8004760:	2200      	movcc	r2, #0
 8004762:	4413      	add	r3, r2
 8004764:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004768:	b17a      	cbz	r2, 800478a <__mdiff+0x106>
 800476a:	6107      	str	r7, [r0, #16]
 800476c:	e7a4      	b.n	80046b8 <__mdiff+0x34>
 800476e:	f856 8b04 	ldr.w	r8, [r6], #4
 8004772:	fa11 f288 	uxtah	r2, r1, r8
 8004776:	1414      	asrs	r4, r2, #16
 8004778:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800477c:	b292      	uxth	r2, r2
 800477e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004782:	f84e 2b04 	str.w	r2, [lr], #4
 8004786:	1421      	asrs	r1, r4, #16
 8004788:	e7e0      	b.n	800474c <__mdiff+0xc8>
 800478a:	3f01      	subs	r7, #1
 800478c:	e7ea      	b.n	8004764 <__mdiff+0xe0>
 800478e:	bf00      	nop
 8004790:	08005484 	.word	0x08005484
 8004794:	08005495 	.word	0x08005495

08004798 <__d2b>:
 8004798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800479c:	460f      	mov	r7, r1
 800479e:	2101      	movs	r1, #1
 80047a0:	ec59 8b10 	vmov	r8, r9, d0
 80047a4:	4616      	mov	r6, r2
 80047a6:	f7ff fcd5 	bl	8004154 <_Balloc>
 80047aa:	4604      	mov	r4, r0
 80047ac:	b930      	cbnz	r0, 80047bc <__d2b+0x24>
 80047ae:	4602      	mov	r2, r0
 80047b0:	4b24      	ldr	r3, [pc, #144]	; (8004844 <__d2b+0xac>)
 80047b2:	4825      	ldr	r0, [pc, #148]	; (8004848 <__d2b+0xb0>)
 80047b4:	f240 310f 	movw	r1, #783	; 0x30f
 80047b8:	f000 fa86 	bl	8004cc8 <__assert_func>
 80047bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80047c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047c4:	bb2d      	cbnz	r5, 8004812 <__d2b+0x7a>
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	f1b8 0300 	subs.w	r3, r8, #0
 80047cc:	d026      	beq.n	800481c <__d2b+0x84>
 80047ce:	4668      	mov	r0, sp
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	f7ff fd87 	bl	80042e4 <__lo0bits>
 80047d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80047da:	b1e8      	cbz	r0, 8004818 <__d2b+0x80>
 80047dc:	f1c0 0320 	rsb	r3, r0, #32
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	430b      	orrs	r3, r1
 80047e6:	40c2      	lsrs	r2, r0
 80047e8:	6163      	str	r3, [r4, #20]
 80047ea:	9201      	str	r2, [sp, #4]
 80047ec:	9b01      	ldr	r3, [sp, #4]
 80047ee:	61a3      	str	r3, [r4, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf14      	ite	ne
 80047f4:	2202      	movne	r2, #2
 80047f6:	2201      	moveq	r2, #1
 80047f8:	6122      	str	r2, [r4, #16]
 80047fa:	b1bd      	cbz	r5, 800482c <__d2b+0x94>
 80047fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004800:	4405      	add	r5, r0
 8004802:	603d      	str	r5, [r7, #0]
 8004804:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004808:	6030      	str	r0, [r6, #0]
 800480a:	4620      	mov	r0, r4
 800480c:	b003      	add	sp, #12
 800480e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	e7d6      	b.n	80047c6 <__d2b+0x2e>
 8004818:	6161      	str	r1, [r4, #20]
 800481a:	e7e7      	b.n	80047ec <__d2b+0x54>
 800481c:	a801      	add	r0, sp, #4
 800481e:	f7ff fd61 	bl	80042e4 <__lo0bits>
 8004822:	9b01      	ldr	r3, [sp, #4]
 8004824:	6163      	str	r3, [r4, #20]
 8004826:	3020      	adds	r0, #32
 8004828:	2201      	movs	r2, #1
 800482a:	e7e5      	b.n	80047f8 <__d2b+0x60>
 800482c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004830:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004834:	6038      	str	r0, [r7, #0]
 8004836:	6918      	ldr	r0, [r3, #16]
 8004838:	f7ff fd34 	bl	80042a4 <__hi0bits>
 800483c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004840:	e7e2      	b.n	8004808 <__d2b+0x70>
 8004842:	bf00      	nop
 8004844:	08005484 	.word	0x08005484
 8004848:	08005495 	.word	0x08005495

0800484c <__ssputs_r>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	688e      	ldr	r6, [r1, #8]
 8004852:	461f      	mov	r7, r3
 8004854:	42be      	cmp	r6, r7
 8004856:	680b      	ldr	r3, [r1, #0]
 8004858:	4682      	mov	sl, r0
 800485a:	460c      	mov	r4, r1
 800485c:	4690      	mov	r8, r2
 800485e:	d82c      	bhi.n	80048ba <__ssputs_r+0x6e>
 8004860:	898a      	ldrh	r2, [r1, #12]
 8004862:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004866:	d026      	beq.n	80048b6 <__ssputs_r+0x6a>
 8004868:	6965      	ldr	r5, [r4, #20]
 800486a:	6909      	ldr	r1, [r1, #16]
 800486c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004870:	eba3 0901 	sub.w	r9, r3, r1
 8004874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004878:	1c7b      	adds	r3, r7, #1
 800487a:	444b      	add	r3, r9
 800487c:	106d      	asrs	r5, r5, #1
 800487e:	429d      	cmp	r5, r3
 8004880:	bf38      	it	cc
 8004882:	461d      	movcc	r5, r3
 8004884:	0553      	lsls	r3, r2, #21
 8004886:	d527      	bpl.n	80048d8 <__ssputs_r+0x8c>
 8004888:	4629      	mov	r1, r5
 800488a:	f7ff fbd7 	bl	800403c <_malloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	b360      	cbz	r0, 80048ec <__ssputs_r+0xa0>
 8004892:	6921      	ldr	r1, [r4, #16]
 8004894:	464a      	mov	r2, r9
 8004896:	f000 fa09 	bl	8004cac <memcpy>
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a4:	81a3      	strh	r3, [r4, #12]
 80048a6:	6126      	str	r6, [r4, #16]
 80048a8:	6165      	str	r5, [r4, #20]
 80048aa:	444e      	add	r6, r9
 80048ac:	eba5 0509 	sub.w	r5, r5, r9
 80048b0:	6026      	str	r6, [r4, #0]
 80048b2:	60a5      	str	r5, [r4, #8]
 80048b4:	463e      	mov	r6, r7
 80048b6:	42be      	cmp	r6, r7
 80048b8:	d900      	bls.n	80048bc <__ssputs_r+0x70>
 80048ba:	463e      	mov	r6, r7
 80048bc:	6820      	ldr	r0, [r4, #0]
 80048be:	4632      	mov	r2, r6
 80048c0:	4641      	mov	r1, r8
 80048c2:	f000 f9c9 	bl	8004c58 <memmove>
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	1b9b      	subs	r3, r3, r6
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	4433      	add	r3, r6
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	2000      	movs	r0, #0
 80048d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d8:	462a      	mov	r2, r5
 80048da:	f000 fa3b 	bl	8004d54 <_realloc_r>
 80048de:	4606      	mov	r6, r0
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d1e0      	bne.n	80048a6 <__ssputs_r+0x5a>
 80048e4:	6921      	ldr	r1, [r4, #16]
 80048e6:	4650      	mov	r0, sl
 80048e8:	f7ff fb34 	bl	8003f54 <_free_r>
 80048ec:	230c      	movs	r3, #12
 80048ee:	f8ca 3000 	str.w	r3, [sl]
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f8:	81a3      	strh	r3, [r4, #12]
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295
 80048fe:	e7e9      	b.n	80048d4 <__ssputs_r+0x88>

08004900 <_svfiprintf_r>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	4698      	mov	r8, r3
 8004906:	898b      	ldrh	r3, [r1, #12]
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	b09d      	sub	sp, #116	; 0x74
 800490c:	4607      	mov	r7, r0
 800490e:	460d      	mov	r5, r1
 8004910:	4614      	mov	r4, r2
 8004912:	d50e      	bpl.n	8004932 <_svfiprintf_r+0x32>
 8004914:	690b      	ldr	r3, [r1, #16]
 8004916:	b963      	cbnz	r3, 8004932 <_svfiprintf_r+0x32>
 8004918:	2140      	movs	r1, #64	; 0x40
 800491a:	f7ff fb8f 	bl	800403c <_malloc_r>
 800491e:	6028      	str	r0, [r5, #0]
 8004920:	6128      	str	r0, [r5, #16]
 8004922:	b920      	cbnz	r0, 800492e <_svfiprintf_r+0x2e>
 8004924:	230c      	movs	r3, #12
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	e0d0      	b.n	8004ad0 <_svfiprintf_r+0x1d0>
 800492e:	2340      	movs	r3, #64	; 0x40
 8004930:	616b      	str	r3, [r5, #20]
 8004932:	2300      	movs	r3, #0
 8004934:	9309      	str	r3, [sp, #36]	; 0x24
 8004936:	2320      	movs	r3, #32
 8004938:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800493c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004940:	2330      	movs	r3, #48	; 0x30
 8004942:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ae8 <_svfiprintf_r+0x1e8>
 8004946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800494a:	f04f 0901 	mov.w	r9, #1
 800494e:	4623      	mov	r3, r4
 8004950:	469a      	mov	sl, r3
 8004952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004956:	b10a      	cbz	r2, 800495c <_svfiprintf_r+0x5c>
 8004958:	2a25      	cmp	r2, #37	; 0x25
 800495a:	d1f9      	bne.n	8004950 <_svfiprintf_r+0x50>
 800495c:	ebba 0b04 	subs.w	fp, sl, r4
 8004960:	d00b      	beq.n	800497a <_svfiprintf_r+0x7a>
 8004962:	465b      	mov	r3, fp
 8004964:	4622      	mov	r2, r4
 8004966:	4629      	mov	r1, r5
 8004968:	4638      	mov	r0, r7
 800496a:	f7ff ff6f 	bl	800484c <__ssputs_r>
 800496e:	3001      	adds	r0, #1
 8004970:	f000 80a9 	beq.w	8004ac6 <_svfiprintf_r+0x1c6>
 8004974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004976:	445a      	add	r2, fp
 8004978:	9209      	str	r2, [sp, #36]	; 0x24
 800497a:	f89a 3000 	ldrb.w	r3, [sl]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80a1 	beq.w	8004ac6 <_svfiprintf_r+0x1c6>
 8004984:	2300      	movs	r3, #0
 8004986:	f04f 32ff 	mov.w	r2, #4294967295
 800498a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800498e:	f10a 0a01 	add.w	sl, sl, #1
 8004992:	9304      	str	r3, [sp, #16]
 8004994:	9307      	str	r3, [sp, #28]
 8004996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800499a:	931a      	str	r3, [sp, #104]	; 0x68
 800499c:	4654      	mov	r4, sl
 800499e:	2205      	movs	r2, #5
 80049a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a4:	4850      	ldr	r0, [pc, #320]	; (8004ae8 <_svfiprintf_r+0x1e8>)
 80049a6:	f7fb fc13 	bl	80001d0 <memchr>
 80049aa:	9a04      	ldr	r2, [sp, #16]
 80049ac:	b9d8      	cbnz	r0, 80049e6 <_svfiprintf_r+0xe6>
 80049ae:	06d0      	lsls	r0, r2, #27
 80049b0:	bf44      	itt	mi
 80049b2:	2320      	movmi	r3, #32
 80049b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b8:	0711      	lsls	r1, r2, #28
 80049ba:	bf44      	itt	mi
 80049bc:	232b      	movmi	r3, #43	; 0x2b
 80049be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c2:	f89a 3000 	ldrb.w	r3, [sl]
 80049c6:	2b2a      	cmp	r3, #42	; 0x2a
 80049c8:	d015      	beq.n	80049f6 <_svfiprintf_r+0xf6>
 80049ca:	9a07      	ldr	r2, [sp, #28]
 80049cc:	4654      	mov	r4, sl
 80049ce:	2000      	movs	r0, #0
 80049d0:	f04f 0c0a 	mov.w	ip, #10
 80049d4:	4621      	mov	r1, r4
 80049d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049da:	3b30      	subs	r3, #48	; 0x30
 80049dc:	2b09      	cmp	r3, #9
 80049de:	d94d      	bls.n	8004a7c <_svfiprintf_r+0x17c>
 80049e0:	b1b0      	cbz	r0, 8004a10 <_svfiprintf_r+0x110>
 80049e2:	9207      	str	r2, [sp, #28]
 80049e4:	e014      	b.n	8004a10 <_svfiprintf_r+0x110>
 80049e6:	eba0 0308 	sub.w	r3, r0, r8
 80049ea:	fa09 f303 	lsl.w	r3, r9, r3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	46a2      	mov	sl, r4
 80049f4:	e7d2      	b.n	800499c <_svfiprintf_r+0x9c>
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	1d19      	adds	r1, r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	9103      	str	r1, [sp, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfbb      	ittet	lt
 8004a02:	425b      	neglt	r3, r3
 8004a04:	f042 0202 	orrlt.w	r2, r2, #2
 8004a08:	9307      	strge	r3, [sp, #28]
 8004a0a:	9307      	strlt	r3, [sp, #28]
 8004a0c:	bfb8      	it	lt
 8004a0e:	9204      	strlt	r2, [sp, #16]
 8004a10:	7823      	ldrb	r3, [r4, #0]
 8004a12:	2b2e      	cmp	r3, #46	; 0x2e
 8004a14:	d10c      	bne.n	8004a30 <_svfiprintf_r+0x130>
 8004a16:	7863      	ldrb	r3, [r4, #1]
 8004a18:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1a:	d134      	bne.n	8004a86 <_svfiprintf_r+0x186>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	9203      	str	r2, [sp, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bfb8      	it	lt
 8004a28:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a2c:	3402      	adds	r4, #2
 8004a2e:	9305      	str	r3, [sp, #20]
 8004a30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004af8 <_svfiprintf_r+0x1f8>
 8004a34:	7821      	ldrb	r1, [r4, #0]
 8004a36:	2203      	movs	r2, #3
 8004a38:	4650      	mov	r0, sl
 8004a3a:	f7fb fbc9 	bl	80001d0 <memchr>
 8004a3e:	b138      	cbz	r0, 8004a50 <_svfiprintf_r+0x150>
 8004a40:	9b04      	ldr	r3, [sp, #16]
 8004a42:	eba0 000a 	sub.w	r0, r0, sl
 8004a46:	2240      	movs	r2, #64	; 0x40
 8004a48:	4082      	lsls	r2, r0
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	3401      	adds	r4, #1
 8004a4e:	9304      	str	r3, [sp, #16]
 8004a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a54:	4825      	ldr	r0, [pc, #148]	; (8004aec <_svfiprintf_r+0x1ec>)
 8004a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a5a:	2206      	movs	r2, #6
 8004a5c:	f7fb fbb8 	bl	80001d0 <memchr>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d038      	beq.n	8004ad6 <_svfiprintf_r+0x1d6>
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <_svfiprintf_r+0x1f0>)
 8004a66:	bb1b      	cbnz	r3, 8004ab0 <_svfiprintf_r+0x1b0>
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	3307      	adds	r3, #7
 8004a6c:	f023 0307 	bic.w	r3, r3, #7
 8004a70:	3308      	adds	r3, #8
 8004a72:	9303      	str	r3, [sp, #12]
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	4433      	add	r3, r6
 8004a78:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7a:	e768      	b.n	800494e <_svfiprintf_r+0x4e>
 8004a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a80:	460c      	mov	r4, r1
 8004a82:	2001      	movs	r0, #1
 8004a84:	e7a6      	b.n	80049d4 <_svfiprintf_r+0xd4>
 8004a86:	2300      	movs	r3, #0
 8004a88:	3401      	adds	r4, #1
 8004a8a:	9305      	str	r3, [sp, #20]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f04f 0c0a 	mov.w	ip, #10
 8004a92:	4620      	mov	r0, r4
 8004a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a98:	3a30      	subs	r2, #48	; 0x30
 8004a9a:	2a09      	cmp	r2, #9
 8004a9c:	d903      	bls.n	8004aa6 <_svfiprintf_r+0x1a6>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0c6      	beq.n	8004a30 <_svfiprintf_r+0x130>
 8004aa2:	9105      	str	r1, [sp, #20]
 8004aa4:	e7c4      	b.n	8004a30 <_svfiprintf_r+0x130>
 8004aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aaa:	4604      	mov	r4, r0
 8004aac:	2301      	movs	r3, #1
 8004aae:	e7f0      	b.n	8004a92 <_svfiprintf_r+0x192>
 8004ab0:	ab03      	add	r3, sp, #12
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <_svfiprintf_r+0x1f4>)
 8004ab8:	a904      	add	r1, sp, #16
 8004aba:	4638      	mov	r0, r7
 8004abc:	f7fd fe62 	bl	8002784 <_printf_float>
 8004ac0:	1c42      	adds	r2, r0, #1
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	d1d6      	bne.n	8004a74 <_svfiprintf_r+0x174>
 8004ac6:	89ab      	ldrh	r3, [r5, #12]
 8004ac8:	065b      	lsls	r3, r3, #25
 8004aca:	f53f af2d 	bmi.w	8004928 <_svfiprintf_r+0x28>
 8004ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad0:	b01d      	add	sp, #116	; 0x74
 8004ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad6:	ab03      	add	r3, sp, #12
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	462a      	mov	r2, r5
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <_svfiprintf_r+0x1f4>)
 8004ade:	a904      	add	r1, sp, #16
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	f7fe f8f3 	bl	8002ccc <_printf_i>
 8004ae6:	e7eb      	b.n	8004ac0 <_svfiprintf_r+0x1c0>
 8004ae8:	080055ec 	.word	0x080055ec
 8004aec:	080055f6 	.word	0x080055f6
 8004af0:	08002785 	.word	0x08002785
 8004af4:	0800484d 	.word	0x0800484d
 8004af8:	080055f2 	.word	0x080055f2

08004afc <__sflush_r>:
 8004afc:	898a      	ldrh	r2, [r1, #12]
 8004afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b02:	4605      	mov	r5, r0
 8004b04:	0710      	lsls	r0, r2, #28
 8004b06:	460c      	mov	r4, r1
 8004b08:	d458      	bmi.n	8004bbc <__sflush_r+0xc0>
 8004b0a:	684b      	ldr	r3, [r1, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dc05      	bgt.n	8004b1c <__sflush_r+0x20>
 8004b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	dc02      	bgt.n	8004b1c <__sflush_r+0x20>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	d0f9      	beq.n	8004b16 <__sflush_r+0x1a>
 8004b22:	2300      	movs	r3, #0
 8004b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b28:	682f      	ldr	r7, [r5, #0]
 8004b2a:	6a21      	ldr	r1, [r4, #32]
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	d032      	beq.n	8004b96 <__sflush_r+0x9a>
 8004b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	075a      	lsls	r2, r3, #29
 8004b36:	d505      	bpl.n	8004b44 <__sflush_r+0x48>
 8004b38:	6863      	ldr	r3, [r4, #4]
 8004b3a:	1ac0      	subs	r0, r0, r3
 8004b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b3e:	b10b      	cbz	r3, 8004b44 <__sflush_r+0x48>
 8004b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b42:	1ac0      	subs	r0, r0, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	4602      	mov	r2, r0
 8004b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b4a:	6a21      	ldr	r1, [r4, #32]
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b0      	blx	r6
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	d106      	bne.n	8004b64 <__sflush_r+0x68>
 8004b56:	6829      	ldr	r1, [r5, #0]
 8004b58:	291d      	cmp	r1, #29
 8004b5a:	d82b      	bhi.n	8004bb4 <__sflush_r+0xb8>
 8004b5c:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <__sflush_r+0x108>)
 8004b5e:	410a      	asrs	r2, r1
 8004b60:	07d6      	lsls	r6, r2, #31
 8004b62:	d427      	bmi.n	8004bb4 <__sflush_r+0xb8>
 8004b64:	2200      	movs	r2, #0
 8004b66:	6062      	str	r2, [r4, #4]
 8004b68:	04d9      	lsls	r1, r3, #19
 8004b6a:	6922      	ldr	r2, [r4, #16]
 8004b6c:	6022      	str	r2, [r4, #0]
 8004b6e:	d504      	bpl.n	8004b7a <__sflush_r+0x7e>
 8004b70:	1c42      	adds	r2, r0, #1
 8004b72:	d101      	bne.n	8004b78 <__sflush_r+0x7c>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b903      	cbnz	r3, 8004b7a <__sflush_r+0x7e>
 8004b78:	6560      	str	r0, [r4, #84]	; 0x54
 8004b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b7c:	602f      	str	r7, [r5, #0]
 8004b7e:	2900      	cmp	r1, #0
 8004b80:	d0c9      	beq.n	8004b16 <__sflush_r+0x1a>
 8004b82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b86:	4299      	cmp	r1, r3
 8004b88:	d002      	beq.n	8004b90 <__sflush_r+0x94>
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f7ff f9e2 	bl	8003f54 <_free_r>
 8004b90:	2000      	movs	r0, #0
 8004b92:	6360      	str	r0, [r4, #52]	; 0x34
 8004b94:	e7c0      	b.n	8004b18 <__sflush_r+0x1c>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b0      	blx	r6
 8004b9c:	1c41      	adds	r1, r0, #1
 8004b9e:	d1c8      	bne.n	8004b32 <__sflush_r+0x36>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0c5      	beq.n	8004b32 <__sflush_r+0x36>
 8004ba6:	2b1d      	cmp	r3, #29
 8004ba8:	d001      	beq.n	8004bae <__sflush_r+0xb2>
 8004baa:	2b16      	cmp	r3, #22
 8004bac:	d101      	bne.n	8004bb2 <__sflush_r+0xb6>
 8004bae:	602f      	str	r7, [r5, #0]
 8004bb0:	e7b1      	b.n	8004b16 <__sflush_r+0x1a>
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	e7ad      	b.n	8004b18 <__sflush_r+0x1c>
 8004bbc:	690f      	ldr	r7, [r1, #16]
 8004bbe:	2f00      	cmp	r7, #0
 8004bc0:	d0a9      	beq.n	8004b16 <__sflush_r+0x1a>
 8004bc2:	0793      	lsls	r3, r2, #30
 8004bc4:	680e      	ldr	r6, [r1, #0]
 8004bc6:	bf08      	it	eq
 8004bc8:	694b      	ldreq	r3, [r1, #20]
 8004bca:	600f      	str	r7, [r1, #0]
 8004bcc:	bf18      	it	ne
 8004bce:	2300      	movne	r3, #0
 8004bd0:	eba6 0807 	sub.w	r8, r6, r7
 8004bd4:	608b      	str	r3, [r1, #8]
 8004bd6:	f1b8 0f00 	cmp.w	r8, #0
 8004bda:	dd9c      	ble.n	8004b16 <__sflush_r+0x1a>
 8004bdc:	6a21      	ldr	r1, [r4, #32]
 8004bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004be0:	4643      	mov	r3, r8
 8004be2:	463a      	mov	r2, r7
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b0      	blx	r6
 8004be8:	2800      	cmp	r0, #0
 8004bea:	dc06      	bgt.n	8004bfa <__sflush_r+0xfe>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf2:	81a3      	strh	r3, [r4, #12]
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	e78e      	b.n	8004b18 <__sflush_r+0x1c>
 8004bfa:	4407      	add	r7, r0
 8004bfc:	eba8 0800 	sub.w	r8, r8, r0
 8004c00:	e7e9      	b.n	8004bd6 <__sflush_r+0xda>
 8004c02:	bf00      	nop
 8004c04:	dfbffffe 	.word	0xdfbffffe

08004c08 <_fflush_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	690b      	ldr	r3, [r1, #16]
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	b913      	cbnz	r3, 8004c18 <_fflush_r+0x10>
 8004c12:	2500      	movs	r5, #0
 8004c14:	4628      	mov	r0, r5
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	b118      	cbz	r0, 8004c22 <_fflush_r+0x1a>
 8004c1a:	6a03      	ldr	r3, [r0, #32]
 8004c1c:	b90b      	cbnz	r3, 8004c22 <_fflush_r+0x1a>
 8004c1e:	f7fe fa03 	bl	8003028 <__sinit>
 8004c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f3      	beq.n	8004c12 <_fflush_r+0xa>
 8004c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c2c:	07d0      	lsls	r0, r2, #31
 8004c2e:	d404      	bmi.n	8004c3a <_fflush_r+0x32>
 8004c30:	0599      	lsls	r1, r3, #22
 8004c32:	d402      	bmi.n	8004c3a <_fflush_r+0x32>
 8004c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c36:	f7fe fb0e 	bl	8003256 <__retarget_lock_acquire_recursive>
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	f7ff ff5d 	bl	8004afc <__sflush_r>
 8004c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c44:	07da      	lsls	r2, r3, #31
 8004c46:	4605      	mov	r5, r0
 8004c48:	d4e4      	bmi.n	8004c14 <_fflush_r+0xc>
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	059b      	lsls	r3, r3, #22
 8004c4e:	d4e1      	bmi.n	8004c14 <_fflush_r+0xc>
 8004c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c52:	f7fe fb01 	bl	8003258 <__retarget_lock_release_recursive>
 8004c56:	e7dd      	b.n	8004c14 <_fflush_r+0xc>

08004c58 <memmove>:
 8004c58:	4288      	cmp	r0, r1
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	eb01 0402 	add.w	r4, r1, r2
 8004c60:	d902      	bls.n	8004c68 <memmove+0x10>
 8004c62:	4284      	cmp	r4, r0
 8004c64:	4623      	mov	r3, r4
 8004c66:	d807      	bhi.n	8004c78 <memmove+0x20>
 8004c68:	1e43      	subs	r3, r0, #1
 8004c6a:	42a1      	cmp	r1, r4
 8004c6c:	d008      	beq.n	8004c80 <memmove+0x28>
 8004c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c76:	e7f8      	b.n	8004c6a <memmove+0x12>
 8004c78:	4402      	add	r2, r0
 8004c7a:	4601      	mov	r1, r0
 8004c7c:	428a      	cmp	r2, r1
 8004c7e:	d100      	bne.n	8004c82 <memmove+0x2a>
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c8a:	e7f7      	b.n	8004c7c <memmove+0x24>

08004c8c <_sbrk_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4d06      	ldr	r5, [pc, #24]	; (8004ca8 <_sbrk_r+0x1c>)
 8004c90:	2300      	movs	r3, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	f7fc fcde 	bl	8001658 <_sbrk>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_sbrk_r+0x1a>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_sbrk_r+0x1a>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	200003b8 	.word	0x200003b8

08004cac <memcpy>:
 8004cac:	440a      	add	r2, r1
 8004cae:	4291      	cmp	r1, r2
 8004cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cb4:	d100      	bne.n	8004cb8 <memcpy+0xc>
 8004cb6:	4770      	bx	lr
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	d1f9      	bne.n	8004cba <memcpy+0xe>
 8004cc6:	bd10      	pop	{r4, pc}

08004cc8 <__assert_func>:
 8004cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cca:	4614      	mov	r4, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <__assert_func+0x2c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	68d8      	ldr	r0, [r3, #12]
 8004cd6:	b14c      	cbz	r4, 8004cec <__assert_func+0x24>
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <__assert_func+0x30>)
 8004cda:	9100      	str	r1, [sp, #0]
 8004cdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ce0:	4906      	ldr	r1, [pc, #24]	; (8004cfc <__assert_func+0x34>)
 8004ce2:	462b      	mov	r3, r5
 8004ce4:	f000 f872 	bl	8004dcc <fiprintf>
 8004ce8:	f000 f882 	bl	8004df0 <abort>
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <__assert_func+0x38>)
 8004cee:	461c      	mov	r4, r3
 8004cf0:	e7f3      	b.n	8004cda <__assert_func+0x12>
 8004cf2:	bf00      	nop
 8004cf4:	20000064 	.word	0x20000064
 8004cf8:	08005607 	.word	0x08005607
 8004cfc:	08005614 	.word	0x08005614
 8004d00:	08005642 	.word	0x08005642

08004d04 <_calloc_r>:
 8004d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d06:	fba1 2402 	umull	r2, r4, r1, r2
 8004d0a:	b94c      	cbnz	r4, 8004d20 <_calloc_r+0x1c>
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	9201      	str	r2, [sp, #4]
 8004d10:	f7ff f994 	bl	800403c <_malloc_r>
 8004d14:	9a01      	ldr	r2, [sp, #4]
 8004d16:	4605      	mov	r5, r0
 8004d18:	b930      	cbnz	r0, 8004d28 <_calloc_r+0x24>
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	b003      	add	sp, #12
 8004d1e:	bd30      	pop	{r4, r5, pc}
 8004d20:	220c      	movs	r2, #12
 8004d22:	6002      	str	r2, [r0, #0]
 8004d24:	2500      	movs	r5, #0
 8004d26:	e7f8      	b.n	8004d1a <_calloc_r+0x16>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	f7fe fa16 	bl	800315a <memset>
 8004d2e:	e7f4      	b.n	8004d1a <_calloc_r+0x16>

08004d30 <__ascii_mbtowc>:
 8004d30:	b082      	sub	sp, #8
 8004d32:	b901      	cbnz	r1, 8004d36 <__ascii_mbtowc+0x6>
 8004d34:	a901      	add	r1, sp, #4
 8004d36:	b142      	cbz	r2, 8004d4a <__ascii_mbtowc+0x1a>
 8004d38:	b14b      	cbz	r3, 8004d4e <__ascii_mbtowc+0x1e>
 8004d3a:	7813      	ldrb	r3, [r2, #0]
 8004d3c:	600b      	str	r3, [r1, #0]
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	1e10      	subs	r0, r2, #0
 8004d42:	bf18      	it	ne
 8004d44:	2001      	movne	r0, #1
 8004d46:	b002      	add	sp, #8
 8004d48:	4770      	bx	lr
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	e7fb      	b.n	8004d46 <__ascii_mbtowc+0x16>
 8004d4e:	f06f 0001 	mvn.w	r0, #1
 8004d52:	e7f8      	b.n	8004d46 <__ascii_mbtowc+0x16>

08004d54 <_realloc_r>:
 8004d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d58:	4680      	mov	r8, r0
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	460e      	mov	r6, r1
 8004d5e:	b921      	cbnz	r1, 8004d6a <_realloc_r+0x16>
 8004d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	4611      	mov	r1, r2
 8004d66:	f7ff b969 	b.w	800403c <_malloc_r>
 8004d6a:	b92a      	cbnz	r2, 8004d78 <_realloc_r+0x24>
 8004d6c:	f7ff f8f2 	bl	8003f54 <_free_r>
 8004d70:	4625      	mov	r5, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	f000 f841 	bl	8004dfe <_malloc_usable_size_r>
 8004d7c:	4284      	cmp	r4, r0
 8004d7e:	4607      	mov	r7, r0
 8004d80:	d802      	bhi.n	8004d88 <_realloc_r+0x34>
 8004d82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d86:	d812      	bhi.n	8004dae <_realloc_r+0x5a>
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	f7ff f956 	bl	800403c <_malloc_r>
 8004d90:	4605      	mov	r5, r0
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d0ed      	beq.n	8004d72 <_realloc_r+0x1e>
 8004d96:	42bc      	cmp	r4, r7
 8004d98:	4622      	mov	r2, r4
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	bf28      	it	cs
 8004d9e:	463a      	movcs	r2, r7
 8004da0:	f7ff ff84 	bl	8004cac <memcpy>
 8004da4:	4631      	mov	r1, r6
 8004da6:	4640      	mov	r0, r8
 8004da8:	f7ff f8d4 	bl	8003f54 <_free_r>
 8004dac:	e7e1      	b.n	8004d72 <_realloc_r+0x1e>
 8004dae:	4635      	mov	r5, r6
 8004db0:	e7df      	b.n	8004d72 <_realloc_r+0x1e>

08004db2 <__ascii_wctomb>:
 8004db2:	b149      	cbz	r1, 8004dc8 <__ascii_wctomb+0x16>
 8004db4:	2aff      	cmp	r2, #255	; 0xff
 8004db6:	bf85      	ittet	hi
 8004db8:	238a      	movhi	r3, #138	; 0x8a
 8004dba:	6003      	strhi	r3, [r0, #0]
 8004dbc:	700a      	strbls	r2, [r1, #0]
 8004dbe:	f04f 30ff 	movhi.w	r0, #4294967295
 8004dc2:	bf98      	it	ls
 8004dc4:	2001      	movls	r0, #1
 8004dc6:	4770      	bx	lr
 8004dc8:	4608      	mov	r0, r1
 8004dca:	4770      	bx	lr

08004dcc <fiprintf>:
 8004dcc:	b40e      	push	{r1, r2, r3}
 8004dce:	b503      	push	{r0, r1, lr}
 8004dd0:	4601      	mov	r1, r0
 8004dd2:	ab03      	add	r3, sp, #12
 8004dd4:	4805      	ldr	r0, [pc, #20]	; (8004dec <fiprintf+0x20>)
 8004dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	f000 f83f 	bl	8004e60 <_vfiprintf_r>
 8004de2:	b002      	add	sp, #8
 8004de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004de8:	b003      	add	sp, #12
 8004dea:	4770      	bx	lr
 8004dec:	20000064 	.word	0x20000064

08004df0 <abort>:
 8004df0:	b508      	push	{r3, lr}
 8004df2:	2006      	movs	r0, #6
 8004df4:	f000 fa0c 	bl	8005210 <raise>
 8004df8:	2001      	movs	r0, #1
 8004dfa:	f7fc fbd1 	bl	80015a0 <_exit>

08004dfe <_malloc_usable_size_r>:
 8004dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e02:	1f18      	subs	r0, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bfbc      	itt	lt
 8004e08:	580b      	ldrlt	r3, [r1, r0]
 8004e0a:	18c0      	addlt	r0, r0, r3
 8004e0c:	4770      	bx	lr

08004e0e <__sfputc_r>:
 8004e0e:	6893      	ldr	r3, [r2, #8]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	b410      	push	{r4}
 8004e16:	6093      	str	r3, [r2, #8]
 8004e18:	da08      	bge.n	8004e2c <__sfputc_r+0x1e>
 8004e1a:	6994      	ldr	r4, [r2, #24]
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	db01      	blt.n	8004e24 <__sfputc_r+0x16>
 8004e20:	290a      	cmp	r1, #10
 8004e22:	d103      	bne.n	8004e2c <__sfputc_r+0x1e>
 8004e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e28:	f000 b934 	b.w	8005094 <__swbuf_r>
 8004e2c:	6813      	ldr	r3, [r2, #0]
 8004e2e:	1c58      	adds	r0, r3, #1
 8004e30:	6010      	str	r0, [r2, #0]
 8004e32:	7019      	strb	r1, [r3, #0]
 8004e34:	4608      	mov	r0, r1
 8004e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <__sfputs_r>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	4606      	mov	r6, r0
 8004e40:	460f      	mov	r7, r1
 8004e42:	4614      	mov	r4, r2
 8004e44:	18d5      	adds	r5, r2, r3
 8004e46:	42ac      	cmp	r4, r5
 8004e48:	d101      	bne.n	8004e4e <__sfputs_r+0x12>
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	e007      	b.n	8004e5e <__sfputs_r+0x22>
 8004e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e52:	463a      	mov	r2, r7
 8004e54:	4630      	mov	r0, r6
 8004e56:	f7ff ffda 	bl	8004e0e <__sfputc_r>
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	d1f3      	bne.n	8004e46 <__sfputs_r+0xa>
 8004e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e60 <_vfiprintf_r>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	460d      	mov	r5, r1
 8004e66:	b09d      	sub	sp, #116	; 0x74
 8004e68:	4614      	mov	r4, r2
 8004e6a:	4698      	mov	r8, r3
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	b118      	cbz	r0, 8004e78 <_vfiprintf_r+0x18>
 8004e70:	6a03      	ldr	r3, [r0, #32]
 8004e72:	b90b      	cbnz	r3, 8004e78 <_vfiprintf_r+0x18>
 8004e74:	f7fe f8d8 	bl	8003028 <__sinit>
 8004e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e7a:	07d9      	lsls	r1, r3, #31
 8004e7c:	d405      	bmi.n	8004e8a <_vfiprintf_r+0x2a>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	059a      	lsls	r2, r3, #22
 8004e82:	d402      	bmi.n	8004e8a <_vfiprintf_r+0x2a>
 8004e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e86:	f7fe f9e6 	bl	8003256 <__retarget_lock_acquire_recursive>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	071b      	lsls	r3, r3, #28
 8004e8e:	d501      	bpl.n	8004e94 <_vfiprintf_r+0x34>
 8004e90:	692b      	ldr	r3, [r5, #16]
 8004e92:	b99b      	cbnz	r3, 8004ebc <_vfiprintf_r+0x5c>
 8004e94:	4629      	mov	r1, r5
 8004e96:	4630      	mov	r0, r6
 8004e98:	f000 f93a 	bl	8005110 <__swsetup_r>
 8004e9c:	b170      	cbz	r0, 8004ebc <_vfiprintf_r+0x5c>
 8004e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ea0:	07dc      	lsls	r4, r3, #31
 8004ea2:	d504      	bpl.n	8004eae <_vfiprintf_r+0x4e>
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	b01d      	add	sp, #116	; 0x74
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	89ab      	ldrh	r3, [r5, #12]
 8004eb0:	0598      	lsls	r0, r3, #22
 8004eb2:	d4f7      	bmi.n	8004ea4 <_vfiprintf_r+0x44>
 8004eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eb6:	f7fe f9cf 	bl	8003258 <__retarget_lock_release_recursive>
 8004eba:	e7f3      	b.n	8004ea4 <_vfiprintf_r+0x44>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec0:	2320      	movs	r3, #32
 8004ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eca:	2330      	movs	r3, #48	; 0x30
 8004ecc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005080 <_vfiprintf_r+0x220>
 8004ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ed4:	f04f 0901 	mov.w	r9, #1
 8004ed8:	4623      	mov	r3, r4
 8004eda:	469a      	mov	sl, r3
 8004edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee0:	b10a      	cbz	r2, 8004ee6 <_vfiprintf_r+0x86>
 8004ee2:	2a25      	cmp	r2, #37	; 0x25
 8004ee4:	d1f9      	bne.n	8004eda <_vfiprintf_r+0x7a>
 8004ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8004eea:	d00b      	beq.n	8004f04 <_vfiprintf_r+0xa4>
 8004eec:	465b      	mov	r3, fp
 8004eee:	4622      	mov	r2, r4
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7ff ffa2 	bl	8004e3c <__sfputs_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f000 80a9 	beq.w	8005050 <_vfiprintf_r+0x1f0>
 8004efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f00:	445a      	add	r2, fp
 8004f02:	9209      	str	r2, [sp, #36]	; 0x24
 8004f04:	f89a 3000 	ldrb.w	r3, [sl]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80a1 	beq.w	8005050 <_vfiprintf_r+0x1f0>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f04f 32ff 	mov.w	r2, #4294967295
 8004f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f18:	f10a 0a01 	add.w	sl, sl, #1
 8004f1c:	9304      	str	r3, [sp, #16]
 8004f1e:	9307      	str	r3, [sp, #28]
 8004f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f24:	931a      	str	r3, [sp, #104]	; 0x68
 8004f26:	4654      	mov	r4, sl
 8004f28:	2205      	movs	r2, #5
 8004f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f2e:	4854      	ldr	r0, [pc, #336]	; (8005080 <_vfiprintf_r+0x220>)
 8004f30:	f7fb f94e 	bl	80001d0 <memchr>
 8004f34:	9a04      	ldr	r2, [sp, #16]
 8004f36:	b9d8      	cbnz	r0, 8004f70 <_vfiprintf_r+0x110>
 8004f38:	06d1      	lsls	r1, r2, #27
 8004f3a:	bf44      	itt	mi
 8004f3c:	2320      	movmi	r3, #32
 8004f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f42:	0713      	lsls	r3, r2, #28
 8004f44:	bf44      	itt	mi
 8004f46:	232b      	movmi	r3, #43	; 0x2b
 8004f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f50:	2b2a      	cmp	r3, #42	; 0x2a
 8004f52:	d015      	beq.n	8004f80 <_vfiprintf_r+0x120>
 8004f54:	9a07      	ldr	r2, [sp, #28]
 8004f56:	4654      	mov	r4, sl
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f04f 0c0a 	mov.w	ip, #10
 8004f5e:	4621      	mov	r1, r4
 8004f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f64:	3b30      	subs	r3, #48	; 0x30
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	d94d      	bls.n	8005006 <_vfiprintf_r+0x1a6>
 8004f6a:	b1b0      	cbz	r0, 8004f9a <_vfiprintf_r+0x13a>
 8004f6c:	9207      	str	r2, [sp, #28]
 8004f6e:	e014      	b.n	8004f9a <_vfiprintf_r+0x13a>
 8004f70:	eba0 0308 	sub.w	r3, r0, r8
 8004f74:	fa09 f303 	lsl.w	r3, r9, r3
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	9304      	str	r3, [sp, #16]
 8004f7c:	46a2      	mov	sl, r4
 8004f7e:	e7d2      	b.n	8004f26 <_vfiprintf_r+0xc6>
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	1d19      	adds	r1, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	9103      	str	r1, [sp, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfbb      	ittet	lt
 8004f8c:	425b      	neglt	r3, r3
 8004f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8004f92:	9307      	strge	r3, [sp, #28]
 8004f94:	9307      	strlt	r3, [sp, #28]
 8004f96:	bfb8      	it	lt
 8004f98:	9204      	strlt	r2, [sp, #16]
 8004f9a:	7823      	ldrb	r3, [r4, #0]
 8004f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f9e:	d10c      	bne.n	8004fba <_vfiprintf_r+0x15a>
 8004fa0:	7863      	ldrb	r3, [r4, #1]
 8004fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa4:	d134      	bne.n	8005010 <_vfiprintf_r+0x1b0>
 8004fa6:	9b03      	ldr	r3, [sp, #12]
 8004fa8:	1d1a      	adds	r2, r3, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	9203      	str	r2, [sp, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bfb8      	it	lt
 8004fb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fb6:	3402      	adds	r4, #2
 8004fb8:	9305      	str	r3, [sp, #20]
 8004fba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005090 <_vfiprintf_r+0x230>
 8004fbe:	7821      	ldrb	r1, [r4, #0]
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	4650      	mov	r0, sl
 8004fc4:	f7fb f904 	bl	80001d0 <memchr>
 8004fc8:	b138      	cbz	r0, 8004fda <_vfiprintf_r+0x17a>
 8004fca:	9b04      	ldr	r3, [sp, #16]
 8004fcc:	eba0 000a 	sub.w	r0, r0, sl
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	4082      	lsls	r2, r0
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	3401      	adds	r4, #1
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fde:	4829      	ldr	r0, [pc, #164]	; (8005084 <_vfiprintf_r+0x224>)
 8004fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fe4:	2206      	movs	r2, #6
 8004fe6:	f7fb f8f3 	bl	80001d0 <memchr>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d03f      	beq.n	800506e <_vfiprintf_r+0x20e>
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <_vfiprintf_r+0x228>)
 8004ff0:	bb1b      	cbnz	r3, 800503a <_vfiprintf_r+0x1da>
 8004ff2:	9b03      	ldr	r3, [sp, #12]
 8004ff4:	3307      	adds	r3, #7
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	9303      	str	r3, [sp, #12]
 8004ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005000:	443b      	add	r3, r7
 8005002:	9309      	str	r3, [sp, #36]	; 0x24
 8005004:	e768      	b.n	8004ed8 <_vfiprintf_r+0x78>
 8005006:	fb0c 3202 	mla	r2, ip, r2, r3
 800500a:	460c      	mov	r4, r1
 800500c:	2001      	movs	r0, #1
 800500e:	e7a6      	b.n	8004f5e <_vfiprintf_r+0xfe>
 8005010:	2300      	movs	r3, #0
 8005012:	3401      	adds	r4, #1
 8005014:	9305      	str	r3, [sp, #20]
 8005016:	4619      	mov	r1, r3
 8005018:	f04f 0c0a 	mov.w	ip, #10
 800501c:	4620      	mov	r0, r4
 800501e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005022:	3a30      	subs	r2, #48	; 0x30
 8005024:	2a09      	cmp	r2, #9
 8005026:	d903      	bls.n	8005030 <_vfiprintf_r+0x1d0>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0c6      	beq.n	8004fba <_vfiprintf_r+0x15a>
 800502c:	9105      	str	r1, [sp, #20]
 800502e:	e7c4      	b.n	8004fba <_vfiprintf_r+0x15a>
 8005030:	fb0c 2101 	mla	r1, ip, r1, r2
 8005034:	4604      	mov	r4, r0
 8005036:	2301      	movs	r3, #1
 8005038:	e7f0      	b.n	800501c <_vfiprintf_r+0x1bc>
 800503a:	ab03      	add	r3, sp, #12
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	462a      	mov	r2, r5
 8005040:	4b12      	ldr	r3, [pc, #72]	; (800508c <_vfiprintf_r+0x22c>)
 8005042:	a904      	add	r1, sp, #16
 8005044:	4630      	mov	r0, r6
 8005046:	f7fd fb9d 	bl	8002784 <_printf_float>
 800504a:	4607      	mov	r7, r0
 800504c:	1c78      	adds	r0, r7, #1
 800504e:	d1d6      	bne.n	8004ffe <_vfiprintf_r+0x19e>
 8005050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005052:	07d9      	lsls	r1, r3, #31
 8005054:	d405      	bmi.n	8005062 <_vfiprintf_r+0x202>
 8005056:	89ab      	ldrh	r3, [r5, #12]
 8005058:	059a      	lsls	r2, r3, #22
 800505a:	d402      	bmi.n	8005062 <_vfiprintf_r+0x202>
 800505c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800505e:	f7fe f8fb 	bl	8003258 <__retarget_lock_release_recursive>
 8005062:	89ab      	ldrh	r3, [r5, #12]
 8005064:	065b      	lsls	r3, r3, #25
 8005066:	f53f af1d 	bmi.w	8004ea4 <_vfiprintf_r+0x44>
 800506a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800506c:	e71c      	b.n	8004ea8 <_vfiprintf_r+0x48>
 800506e:	ab03      	add	r3, sp, #12
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	462a      	mov	r2, r5
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <_vfiprintf_r+0x22c>)
 8005076:	a904      	add	r1, sp, #16
 8005078:	4630      	mov	r0, r6
 800507a:	f7fd fe27 	bl	8002ccc <_printf_i>
 800507e:	e7e4      	b.n	800504a <_vfiprintf_r+0x1ea>
 8005080:	080055ec 	.word	0x080055ec
 8005084:	080055f6 	.word	0x080055f6
 8005088:	08002785 	.word	0x08002785
 800508c:	08004e3d 	.word	0x08004e3d
 8005090:	080055f2 	.word	0x080055f2

08005094 <__swbuf_r>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	460e      	mov	r6, r1
 8005098:	4614      	mov	r4, r2
 800509a:	4605      	mov	r5, r0
 800509c:	b118      	cbz	r0, 80050a6 <__swbuf_r+0x12>
 800509e:	6a03      	ldr	r3, [r0, #32]
 80050a0:	b90b      	cbnz	r3, 80050a6 <__swbuf_r+0x12>
 80050a2:	f7fd ffc1 	bl	8003028 <__sinit>
 80050a6:	69a3      	ldr	r3, [r4, #24]
 80050a8:	60a3      	str	r3, [r4, #8]
 80050aa:	89a3      	ldrh	r3, [r4, #12]
 80050ac:	071a      	lsls	r2, r3, #28
 80050ae:	d525      	bpl.n	80050fc <__swbuf_r+0x68>
 80050b0:	6923      	ldr	r3, [r4, #16]
 80050b2:	b31b      	cbz	r3, 80050fc <__swbuf_r+0x68>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	6922      	ldr	r2, [r4, #16]
 80050b8:	1a98      	subs	r0, r3, r2
 80050ba:	6963      	ldr	r3, [r4, #20]
 80050bc:	b2f6      	uxtb	r6, r6
 80050be:	4283      	cmp	r3, r0
 80050c0:	4637      	mov	r7, r6
 80050c2:	dc04      	bgt.n	80050ce <__swbuf_r+0x3a>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4628      	mov	r0, r5
 80050c8:	f7ff fd9e 	bl	8004c08 <_fflush_r>
 80050cc:	b9e0      	cbnz	r0, 8005108 <__swbuf_r+0x74>
 80050ce:	68a3      	ldr	r3, [r4, #8]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	60a3      	str	r3, [r4, #8]
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	701e      	strb	r6, [r3, #0]
 80050dc:	6962      	ldr	r2, [r4, #20]
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d004      	beq.n	80050ee <__swbuf_r+0x5a>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	07db      	lsls	r3, r3, #31
 80050e8:	d506      	bpl.n	80050f8 <__swbuf_r+0x64>
 80050ea:	2e0a      	cmp	r6, #10
 80050ec:	d104      	bne.n	80050f8 <__swbuf_r+0x64>
 80050ee:	4621      	mov	r1, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	f7ff fd89 	bl	8004c08 <_fflush_r>
 80050f6:	b938      	cbnz	r0, 8005108 <__swbuf_r+0x74>
 80050f8:	4638      	mov	r0, r7
 80050fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050fc:	4621      	mov	r1, r4
 80050fe:	4628      	mov	r0, r5
 8005100:	f000 f806 	bl	8005110 <__swsetup_r>
 8005104:	2800      	cmp	r0, #0
 8005106:	d0d5      	beq.n	80050b4 <__swbuf_r+0x20>
 8005108:	f04f 37ff 	mov.w	r7, #4294967295
 800510c:	e7f4      	b.n	80050f8 <__swbuf_r+0x64>
	...

08005110 <__swsetup_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <__swsetup_r+0xac>)
 8005114:	4605      	mov	r5, r0
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	460c      	mov	r4, r1
 800511a:	b118      	cbz	r0, 8005124 <__swsetup_r+0x14>
 800511c:	6a03      	ldr	r3, [r0, #32]
 800511e:	b90b      	cbnz	r3, 8005124 <__swsetup_r+0x14>
 8005120:	f7fd ff82 	bl	8003028 <__sinit>
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800512a:	0718      	lsls	r0, r3, #28
 800512c:	d422      	bmi.n	8005174 <__swsetup_r+0x64>
 800512e:	06d9      	lsls	r1, r3, #27
 8005130:	d407      	bmi.n	8005142 <__swsetup_r+0x32>
 8005132:	2309      	movs	r3, #9
 8005134:	602b      	str	r3, [r5, #0]
 8005136:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	e034      	b.n	80051ac <__swsetup_r+0x9c>
 8005142:	0758      	lsls	r0, r3, #29
 8005144:	d512      	bpl.n	800516c <__swsetup_r+0x5c>
 8005146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005148:	b141      	cbz	r1, 800515c <__swsetup_r+0x4c>
 800514a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800514e:	4299      	cmp	r1, r3
 8005150:	d002      	beq.n	8005158 <__swsetup_r+0x48>
 8005152:	4628      	mov	r0, r5
 8005154:	f7fe fefe 	bl	8003f54 <_free_r>
 8005158:	2300      	movs	r3, #0
 800515a:	6363      	str	r3, [r4, #52]	; 0x34
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	2300      	movs	r3, #0
 8005166:	6063      	str	r3, [r4, #4]
 8005168:	6923      	ldr	r3, [r4, #16]
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f043 0308 	orr.w	r3, r3, #8
 8005172:	81a3      	strh	r3, [r4, #12]
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	b94b      	cbnz	r3, 800518c <__swsetup_r+0x7c>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800517e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005182:	d003      	beq.n	800518c <__swsetup_r+0x7c>
 8005184:	4621      	mov	r1, r4
 8005186:	4628      	mov	r0, r5
 8005188:	f000 f884 	bl	8005294 <__smakebuf_r>
 800518c:	89a0      	ldrh	r0, [r4, #12]
 800518e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005192:	f010 0301 	ands.w	r3, r0, #1
 8005196:	d00a      	beq.n	80051ae <__swsetup_r+0x9e>
 8005198:	2300      	movs	r3, #0
 800519a:	60a3      	str	r3, [r4, #8]
 800519c:	6963      	ldr	r3, [r4, #20]
 800519e:	425b      	negs	r3, r3
 80051a0:	61a3      	str	r3, [r4, #24]
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	b943      	cbnz	r3, 80051b8 <__swsetup_r+0xa8>
 80051a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051aa:	d1c4      	bne.n	8005136 <__swsetup_r+0x26>
 80051ac:	bd38      	pop	{r3, r4, r5, pc}
 80051ae:	0781      	lsls	r1, r0, #30
 80051b0:	bf58      	it	pl
 80051b2:	6963      	ldrpl	r3, [r4, #20]
 80051b4:	60a3      	str	r3, [r4, #8]
 80051b6:	e7f4      	b.n	80051a2 <__swsetup_r+0x92>
 80051b8:	2000      	movs	r0, #0
 80051ba:	e7f7      	b.n	80051ac <__swsetup_r+0x9c>
 80051bc:	20000064 	.word	0x20000064

080051c0 <_raise_r>:
 80051c0:	291f      	cmp	r1, #31
 80051c2:	b538      	push	{r3, r4, r5, lr}
 80051c4:	4604      	mov	r4, r0
 80051c6:	460d      	mov	r5, r1
 80051c8:	d904      	bls.n	80051d4 <_raise_r+0x14>
 80051ca:	2316      	movs	r3, #22
 80051cc:	6003      	str	r3, [r0, #0]
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80051d6:	b112      	cbz	r2, 80051de <_raise_r+0x1e>
 80051d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051dc:	b94b      	cbnz	r3, 80051f2 <_raise_r+0x32>
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 f830 	bl	8005244 <_getpid_r>
 80051e4:	462a      	mov	r2, r5
 80051e6:	4601      	mov	r1, r0
 80051e8:	4620      	mov	r0, r4
 80051ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ee:	f000 b817 	b.w	8005220 <_kill_r>
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d00a      	beq.n	800520c <_raise_r+0x4c>
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	d103      	bne.n	8005202 <_raise_r+0x42>
 80051fa:	2316      	movs	r3, #22
 80051fc:	6003      	str	r3, [r0, #0]
 80051fe:	2001      	movs	r0, #1
 8005200:	e7e7      	b.n	80051d2 <_raise_r+0x12>
 8005202:	2400      	movs	r4, #0
 8005204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005208:	4628      	mov	r0, r5
 800520a:	4798      	blx	r3
 800520c:	2000      	movs	r0, #0
 800520e:	e7e0      	b.n	80051d2 <_raise_r+0x12>

08005210 <raise>:
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <raise+0xc>)
 8005212:	4601      	mov	r1, r0
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	f7ff bfd3 	b.w	80051c0 <_raise_r>
 800521a:	bf00      	nop
 800521c:	20000064 	.word	0x20000064

08005220 <_kill_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4d07      	ldr	r5, [pc, #28]	; (8005240 <_kill_r+0x20>)
 8005224:	2300      	movs	r3, #0
 8005226:	4604      	mov	r4, r0
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	f7fc f9a7 	bl	8001580 <_kill>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d102      	bne.n	800523c <_kill_r+0x1c>
 8005236:	682b      	ldr	r3, [r5, #0]
 8005238:	b103      	cbz	r3, 800523c <_kill_r+0x1c>
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	bd38      	pop	{r3, r4, r5, pc}
 800523e:	bf00      	nop
 8005240:	200003b8 	.word	0x200003b8

08005244 <_getpid_r>:
 8005244:	f7fc b994 	b.w	8001570 <_getpid>

08005248 <__swhatbuf_r>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	460c      	mov	r4, r1
 800524c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005250:	2900      	cmp	r1, #0
 8005252:	b096      	sub	sp, #88	; 0x58
 8005254:	4615      	mov	r5, r2
 8005256:	461e      	mov	r6, r3
 8005258:	da0d      	bge.n	8005276 <__swhatbuf_r+0x2e>
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005260:	f04f 0100 	mov.w	r1, #0
 8005264:	bf0c      	ite	eq
 8005266:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800526a:	2340      	movne	r3, #64	; 0x40
 800526c:	2000      	movs	r0, #0
 800526e:	6031      	str	r1, [r6, #0]
 8005270:	602b      	str	r3, [r5, #0]
 8005272:	b016      	add	sp, #88	; 0x58
 8005274:	bd70      	pop	{r4, r5, r6, pc}
 8005276:	466a      	mov	r2, sp
 8005278:	f000 f848 	bl	800530c <_fstat_r>
 800527c:	2800      	cmp	r0, #0
 800527e:	dbec      	blt.n	800525a <__swhatbuf_r+0x12>
 8005280:	9901      	ldr	r1, [sp, #4]
 8005282:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005286:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800528a:	4259      	negs	r1, r3
 800528c:	4159      	adcs	r1, r3
 800528e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005292:	e7eb      	b.n	800526c <__swhatbuf_r+0x24>

08005294 <__smakebuf_r>:
 8005294:	898b      	ldrh	r3, [r1, #12]
 8005296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005298:	079d      	lsls	r5, r3, #30
 800529a:	4606      	mov	r6, r0
 800529c:	460c      	mov	r4, r1
 800529e:	d507      	bpl.n	80052b0 <__smakebuf_r+0x1c>
 80052a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	6123      	str	r3, [r4, #16]
 80052a8:	2301      	movs	r3, #1
 80052aa:	6163      	str	r3, [r4, #20]
 80052ac:	b002      	add	sp, #8
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	ab01      	add	r3, sp, #4
 80052b2:	466a      	mov	r2, sp
 80052b4:	f7ff ffc8 	bl	8005248 <__swhatbuf_r>
 80052b8:	9900      	ldr	r1, [sp, #0]
 80052ba:	4605      	mov	r5, r0
 80052bc:	4630      	mov	r0, r6
 80052be:	f7fe febd 	bl	800403c <_malloc_r>
 80052c2:	b948      	cbnz	r0, 80052d8 <__smakebuf_r+0x44>
 80052c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052c8:	059a      	lsls	r2, r3, #22
 80052ca:	d4ef      	bmi.n	80052ac <__smakebuf_r+0x18>
 80052cc:	f023 0303 	bic.w	r3, r3, #3
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	e7e3      	b.n	80052a0 <__smakebuf_r+0xc>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	6020      	str	r0, [r4, #0]
 80052dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	9b00      	ldr	r3, [sp, #0]
 80052e4:	6163      	str	r3, [r4, #20]
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	6120      	str	r0, [r4, #16]
 80052ea:	b15b      	cbz	r3, 8005304 <__smakebuf_r+0x70>
 80052ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 f81d 	bl	8005330 <_isatty_r>
 80052f6:	b128      	cbz	r0, 8005304 <__smakebuf_r+0x70>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	431d      	orrs	r5, r3
 8005308:	81a5      	strh	r5, [r4, #12]
 800530a:	e7cf      	b.n	80052ac <__smakebuf_r+0x18>

0800530c <_fstat_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d07      	ldr	r5, [pc, #28]	; (800532c <_fstat_r+0x20>)
 8005310:	2300      	movs	r3, #0
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	4611      	mov	r1, r2
 8005318:	602b      	str	r3, [r5, #0]
 800531a:	f7fc f974 	bl	8001606 <_fstat>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	d102      	bne.n	8005328 <_fstat_r+0x1c>
 8005322:	682b      	ldr	r3, [r5, #0]
 8005324:	b103      	cbz	r3, 8005328 <_fstat_r+0x1c>
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	bd38      	pop	{r3, r4, r5, pc}
 800532a:	bf00      	nop
 800532c:	200003b8 	.word	0x200003b8

08005330 <_isatty_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d06      	ldr	r5, [pc, #24]	; (800534c <_isatty_r+0x1c>)
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	f7fc f973 	bl	8001626 <_isatty>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_isatty_r+0x1a>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_isatty_r+0x1a>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	200003b8 	.word	0x200003b8

08005350 <_init>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr

0800535c <_fini>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	bf00      	nop
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr
